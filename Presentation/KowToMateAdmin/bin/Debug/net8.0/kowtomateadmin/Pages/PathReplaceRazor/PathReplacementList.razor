@page "/pathreplacement/{paramCompanyObjectId}"

@*@attribute [Authorize(Roles = "PathReplacement.ViewAllPaths")]*@

@using CutOutWiz.Core.Utilities
@using CutOutWiz.Core
@using CutOutWiz.Services.Managers.Common
@using CutOutWiz.Services.Models.Common
@using CutOutWiz.Services.Models.PathReplacements
@using CutOutWiz.Services.PathReplacementServices
@using KowToMateAdmin.Helper;
@using KowToMateAdmin.Models.Security
@using KowToMateAdmin.Pages.Shared
@using static CutOutWiz.Core.Utilities.Enums
@using CutOutWiz.Services.Models.FtpModels

@inject IWorkContext _workContext
@inject IJSRuntime js
@inject ICompanyManager _companyService
@inject IPathReplacementService _pathReplacement

<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <h4 class="mb-sm-0 font-size-18">
                FTP Servers
            </h4>
            <div class="page-title-right">
                <button type="button" class="btn btn-sm btn-primary" @onclick="AddNew" title="Add New FileServer"><span class="fas fa-plus"></span> Add New</button>
            </div>

        </div>
    </div>
</div>
<!-- end page title -->

<div class="row">
    <div class="col-lg-12">

        <RadzenDataGrid Data="@pathReplacements" IsLoading="isLoading" TItem="PathReplacementModel"
                        AllowFiltering="true" AllowColumnResize="true"
                        FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowSorting="true" AllowPaging="true" PageSize="20"
                        PagerHorizontalAlign="HorizontalAlign.Center"
                        ShowPagingSummary="true" PageSizeOptions="@pageSizeOptions"
                        RowDoubleClick="(async (arg)=> await RowDoubleClick(arg))">
            <Columns>
                <RadzenDataGridColumn TItem="PathReplacementModel" Property="Type" Title="Type" FilterValue="@filterStatus" TextAlign="TextAlign.Center">
                    <FilterTemplate>
                        <RadzenDropDown @bind-Value=@filterStatus Style="width:100%;" TextProperty="EnumName" ValueProperty="EnumValue"
                                        Data="@(statuses)" AllowClear="true" />
                    </FilterTemplate>
                    <Template Context="data">
                        @((PathReplacementType)data.Type)
                    </Template>
                </RadzenDataGridColumn>
               
                <RadzenDataGridColumn TItem="PathReplacementModel" Property="OldText" Title="OldText" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="PathReplacementModel" Property="NewText" Title="NewText" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="PathReplacementModel" Property="Level" Title="Level" SortOrder="SortOrder.Ascending" />
                <RadzenDataGridColumn TItem="PathReplacementModel" Property="ExecutionOrder" Title="Execution Order" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="PathReplacementModel" Property="DateFormat" Title="Date Format" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="PathReplacementModel" Property="Id" Title="Actions" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        @*<AuthorizeView Roles="">
                            <a class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="() => GoToDetails(data.ObjectId)">
                                <span class="fas fa-info-circle"></span>
                            </a>
                        </AuthorizeView>*@
                       @* <AuthorizeView Roles="PathReplacement.CanEdit">*@
                        <button type="button" class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="(async () => await UpdatePathReplacement((int)data.Id))">
                                <span class="fas fa-pencil-alt"></span>
                            </button>
                        @*</AuthorizeView>*@

                        @*<AuthorizeView Roles="PathReplacement.CanDelete">*@
                            	<button type="button" class="btn btn-sm btn-outline-danger btn-tbl-action" @onclick="() => Delete((int)data.Id)">
                            <span class="fas fa-times"></span>
                            </button>
                        @*</AuthorizeView>*@
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@if (isPopupVisible)
{
    <EditForm Model=@pathReplacement OnValidSubmit="@InsertUpdatePathReplacement">
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">FTP Server</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAddEditPopup"></button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <PathReplacementAddOrEdit pathReplacement="pathReplacement" />
                            <div class="col">
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Save Changes</button>
                       @* @if (!string.IsNullOrWhiteSpace(fileServer.Id))
                        {
                            <button type="button" class="btn btn-danger" disabled="@isSubmitting" @onclick="() => Delete(fileServer.ObjectId,fileServer.Name)">Delete</button>
                        }*@
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseAddEditPopup">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

<ModalNotification @ref="ModalNotification" ConfirmationChanged="ConfirmDelete_Click">
</ModalNotification>

@code {
    protected ModalNotification ModalNotification { get; set; }

    [Parameter]
    public string paramCompanyObjectId { get; set; }
    bool isSubmitting;
    private List<PathReplacementModel> pathReplacements;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 50, 100, 500 };
    bool isLoading = false;
    private PathReplacementModel pathReplacement = new PathReplacementModel();
    bool isPopupVisible = false;
    private LoginUserInfoViewModel loginUser = null;
    private int selectedObjectId = 0;

    List<CustomEnumTypes> statuses = new List<CustomEnumTypes>();
    private byte? filterStatus;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        loginUser = _workContext.LoginUserInfo;
        await LoadCompanyPathReplacements();
        isLoading = false;
    }

    private async Task LoadCompanyPathReplacements()
    {
        var company = await _companyService.GetByObjectId(paramCompanyObjectId);
        pathReplacements = await _pathReplacement.GetPathReplacements(company.Id);

        //Populate Status
        foreach (PathReplacementType item in Enum.GetValues(typeof(PathReplacementType)))
        {
            statuses.Add(new CustomEnumTypes { EnumName = item.ToString(), EnumValue = Convert.ToByte((int)item) });
        }
    }
    private async Task RowDoubleClick(DataGridRowMouseEventArgs<PathReplacementModel> args)
    {
        await Edit((int)args.Data.Id);
    }

    private async Task InsertUpdatePathReplacement()
    {
        isSubmitting = true;
        var company = await _companyService.GetByObjectId(paramCompanyObjectId);
        if (pathReplacement.Id == 0)
        {
            //fileServer.CreatedByContactId = loginUser.ContactId;
            pathReplacement.CompanyId = company.Id;

            var addResponse = await _pathReplacement.Insert(pathReplacement);

            if (!addResponse.IsSuccess)
            {
                ModalNotification.ShowMessage("Error", addResponse.Message);
                isSubmitting = false;
                return;
            }
        }
        else
        {
            //fileServer.UpdatedByContactId = loginUser.ContactId;
            pathReplacement.CompanyId = company.Id;
            var updateResponse = await _pathReplacement.Update(pathReplacement);

            if (!updateResponse.IsSuccess)
            {
                ModalNotification.ShowMessage("Error", updateResponse.Message);
                isSubmitting = false;
                return;
            }
        }
        pathReplacement = new PathReplacementModel();
        isSubmitting = false;

        await LoadCompanyPathReplacements();
        CloseAddEditPopup();
    }
    private async Task UpdatePathReplacement(int Id)
    {
        var company =  await _companyService.GetByObjectId(paramCompanyObjectId);

        if (Id != 0)
        {
            var pathsReplace = await _pathReplacement.GetPathReplacements(company.Id);
            pathReplacement = pathsReplace.FirstOrDefault(x => x.Id == Id);
            StateHasChanged();
            ShowAddEditPopup();
        }
        else
        {
            await js.DisplayMessage($"At Least Select One FTP Info");
            return;
        }
    }

    void AddNew()
    {
        pathReplacement = new PathReplacementModel();
        ShowAddEditPopup();
    }

    private async Task Edit(int objectId)
    {
        var path = await _pathReplacement.Update(pathReplacement);
        ShowAddEditPopup();
    }

    void ShowAddEditPopup()
    {
        isPopupVisible = true;
    }

    void CloseAddEditPopup()
    {
        isPopupVisible = false;
    }

    protected void Delete(int id)
    {
        selectedObjectId = id;
        var msg = $"Are you sure you want to delete the path replacement \"{id}\"?";
        ModalNotification.ShowConfirmation("Confirm Delete", msg);
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var deleteResponse = await _pathReplacement.Delete(selectedObjectId);

            if (deleteResponse.IsSuccess)
            {
                await LoadCompanyPathReplacements();
                pathReplacement = new PathReplacementModel();
                CloseAddEditPopup();
            }
            else
            {
                ModalNotification.ShowMessage("Error", deleteResponse.Message);
            }
        }
        isSubmitting = false;
    }
}