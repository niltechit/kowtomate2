@page "/order/Details/{objectId}"

@using CutOutWiz.Core.Utilities
@using CutOutWiz.Core
@using CutOutWiz.Services.Managers.Common
@using CutOutWiz.Services.Models.ClientOrders
@using CutOutWiz.Services.Models.Common
@using CutOutWiz.Core.Management
@using CutOutWiz.Services.Models.OrderAssignedImageEditors
@using CutOutWiz.Core.OrderTeams
@using CutOutWiz.Services.Models.SOP
@using CutOutWiz.Services.Models.Security
@using CutOutWiz.Services.BLL.OrderStatusAndOrderItemStatus;
@using CutOutWiz.Services.BLL.UpdateOrderItem;
@using CutOutWiz.Services.BLL;
@using CutOutWiz.Services.ClaimManagementService
@using CutOutWiz.Services.ClientCommonCategoryService.ClientCategorys
@using CutOutWiz.Services.FeedbackReworkServices;
@using CutOutWiz.Services.FolderServices;
@using CutOutWiz.Services.Helper
@using CutOutWiz.Services.Management
@using CutOutWiz.Services.ClientOrders
@using CutOutWiz.Services.OrderItemStatusChangeLogService
@using CutOutWiz.Services.OrderSOP
@using CutOutWiz.Services.OrderAndOrderItemStatusChangeLogServices
@using CutOutWiz.Services.OrderTeamServices
@using CutOutWiz.Services.Security
@using CutOutWiz.Services.WebApiService
@using KowToMateAdmin.Helper
@using KowToMateAdmin.Models.Security
@using KowToMateAdmin.Pages.Management.Team
@using KowToMateAdmin.Pages.Management.TeamMember
@using KowToMateAdmin.Pages.SOP.StandardService
@using CutOutWiz.Services.StorageService
@using System.IO
@using CutOutWiz.Services.Logs
@using KowToMateAdmin.Pages.Shared
@using System.IO.Compression
@using KowToMateAdmin.Services;
@using Microsoft.Extensions.Caching.Memory
@using static CutOutWiz.Core.Utilities.Enums

@inject IJSRuntime js
@inject IClientOrderService _orderService
@inject IOrderTemplateService _orderTemplateService
@inject IOrderSOPTemplateService _sopTemplateService
@inject IClientOrderItemService _clientOrderItemService
@inject IFtpService _ftpService
@inject IFileServerManager _fileServerService
@inject NavigationManager _uriHelper
@inject IWebHostEnvironment _webHostEnvironment
@inject ITeamMemberService _teamMemberService
@inject ITeamService _teamService
@inject IWorkContext _workContext
@inject IOrderAssignedImageEditorService _orderAssignedImageEditorService
@inject IClientOrderService _clientOrderService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IUpdateOrderItemBLLService _updateOrderItemBLLService
@inject IOrderStatusService _orderStatusService
@inject IOrderTeamService _orderTeamService
@inject ICompanyTeamManager _companyTeamService
@inject IContactManager _contactManager
@inject IConfiguration _configuration
@inject ICompanyManager _companyService
@inject NavigationManager UriHelper
@inject IOrderFileAssignService _assignService
@inject IClientOrderItemService _orderFileService
@inject IOrderStatusChangeLogService _orderStatusChangeLogService
@inject IOrderItemStatusChangeLogService _orderItemStatusChangeLogService
@inject IOrderFileAttachmentService _orderFileAttachmentService
@inject NotificationService _topNtificationService
@inject IOrderSOPTemplateService _templateService
@inject IOrderSOPStandardServiceService _standardServiceService
@inject IDownloadService _downloadService
@inject IFluentFtpService _fluentFtpService
@inject IOrderTemplateSOPService _orderTemplateSOPService
@inject IOrderTempleateSOPFileService _orderTemplateSOPFileService
@inject IOrderSOPStandardService _orderSOPStandardService
@inject IOrderSOPTemplateJoiningService _orderSOPTemplateJoiningService
@inject IFolderService _folderService
@inject ILocalFileService _localFileService
@inject IOrderSOPTemplateOrderSOPStandardService _orderSOPTemplateOrderSOPStandardService
@inject IAcitivityLogCommonMethodService _activityLogCommonMethodService
@inject ILogServices _activityLogService
@inject IActivityAppLogService _activityAppLogService
@inject IFtpFilePathService _ftpFilePathService
@inject IFeedbackReworkService _feedBackReworkService
@inject IContactManager _contactManager
@inject IClientCategoryService _clientCategoryService
@inject IFileConvertionService _convertion
@inject IFtpSharpLibraryService _ftpSharpLibraryService
@inject IFileViewApiService _fileViewApiService
@inject IMemoryCache _memoryCache
<!-- start page title -->


<div class="row">

    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <h4 class="mb-sm-0 font-size-18">
                @if (loginUser.CompanyType == (int)CompanyType.Client)
                {
                    @:Order : @order.OrderNumber (@order.ExternalOrderStatusEnumName)
                }
                else
                {
                    @:Order : @order.OrderNumber (@order.InternalOrderStatusEnumName)
                }
                @*<span>(@filteredStandardServices.Count)</span>*@
            </h4>
            <div class="">
                <div class="row">
                    <h4 class="mb-sm-0 font-size-18">File Upload Time: @timer.elapsedTime</h4>
                </div>
            </div>
            <div class="page-title-right">
                @*<ol class="breadcrumb m-0">
                <li class="breadcrumb-item"><a emailef="javascript: void(0);">Invoices</a></li>
                <li class="breadcrumb-item active">Invoice List</li><span class="fas fa-pencil-alt"></span><i class="fa-solid fa-backward"></i><i class="fa-solid fa-circle-arrow-left"></i>
                </ol>*@
                @if (order.InternalOrderStatus == (byte)InternalOrderStatus.OrderPlacing && loginUser.CompanyType == (int)CompanyType.Client)
                {
                    <button class="btn btn-sm btn-primary btn-space" @onclick="AddOrderPlaced">Order Placed</button>
                }
                <a type="button" class="btn btn-sm btn-secondary btn-space" href="/orders"><span class="fas fa-angle-double-left"></span> Back </a>
                @* TODO : Zakir*@
                @* @if(order.InternalOrderStatus==(byte)InternalOrderStatus.OrderPlacing)
                {
                <button type="button" class="btn btn-sm btn-secondary" @onclick="OrderPlace()"><span class="fas fa-angle-double-left"></span> Placed Order</button>
                }*@

                <button type="button" class="btn btn-sm btn-primary" id="refreshBtnForOrderDetail" @onclick="(e)=>LoadOrderItemForLoginUser(true)" style="background-color:#7da52f;color:white" title="Refresh"><span class="fas fa-sync"></span> Refresh</button>

                <AuthorizeView Roles="Order.AssignNewOrderToEditor">
                    <button type="button" class="btn btn-sm btn-primary btn-space" @onclick="AssignToEditor" title="Assign Order To Editor"><span class="fas fa-plus"></span> AOTE</button>
                </AuthorizeView>
                <AuthorizeView Roles="Order.AssignNewOrderToTeam">
                    @if (@order.InternalOrderStatus == (byte)InternalOrderStatus.Assigned)
                    {
                        <button type="button" class="btn btn-sm btn-primary" @onclick="ShowAssignNewTeamAssignForOrderPopup" title="Assign Order To Another Team"><span class="fas fa-plus"></span> AOTAT</button>
                    }
                </AuthorizeView>
                @if (loginUser.CompanyType == (int)CompanyType.Admin)
                {
                    <button class="btn btn-sm btn-outline-primary btn-tbl-action ml-3" title="Order Category Set" @onclick="()=>ViewCategorySetUpPopup()">
                        <i class="fas fa-plus"> CategorySet</i>
                    </button>
                }
                <AuthorizeView Roles="Order.AssignNewOrderItemToTeam">
                    @if (@teams.Count() > 0)
                    {
                        <button type="button" class="btn btn-sm btn-primary" @onclick="ShowAssignItemToTeamPopup" title="Assign Order To Team" disabled="@assignOrderToTeam"><span class="fas fa-plus"></span> AOTT</button>
                    }
                </AuthorizeView>
                @*<AuthorizeView Roles="Order.CanEditOrder">
                <a type="button" class="btn btn-sm btn-primary" href="/order/upload/@order.ObjectId"><span class="fas fa-pencil-alt"></span> Edit</a>
                </AuthorizeView>*@
                <AuthorizeView Roles="Order.CanAcknowledgeForQc">
                    <button class="btn btn-sm btn-info btn-space" @onclick="(e)=>UpdateOrderItemByQcForAFQ(InternalOrderItemStatus.InQc)" title="Acknowledge For Qc"><span class="fas fa-solid fa-check"></span> AFQ</button>
                </AuthorizeView>
                <AuthorizeView Roles="Order.CanApproveByQc">
                    <button class="btn btn-sm btn-success btn-space" @onclick="(e)=>UpdateOrderItemByQcForApproved(InternalOrderItemStatus.ReadyToDeliver,0,true)"><span class="fas fa-solid fa-check"></span> Approve</button>
                </AuthorizeView>
                <AuthorizeView Roles="Order.CanRejectByQc">
                    <button class="btn btn-sm btn-danger btn-space" @onclick="(e)=>Reject(InternalOrderItemStatus.ReworkDistributed)"><span class="fas fa-ban"></span> Reject</button>
                </AuthorizeView>
                <AuthorizeView Roles="Order.EditorCanUploadCompletedFiles">
                    @if (isAbleToUpload)
                    {
                        <a class="btn btn-sm btn-primary btn-space" href="/UploadCompleteFiles/@order.ObjectId" title="Upload Completed File"><span class="fas fa-arrow-circle-up"></span> UCF</a>

                    }
                </AuthorizeView>
                <AuthorizeView Roles="Order.CanSeizeOrderItem">

                    <button class="btn btn-sm btn-success btn-space" @onclick="LeaveAssignImage" title="Seize Assigned File"><span class="fas fa-ban"></span> SAF</button>

                </AuthorizeView>
                @*	<AuthorizeView Roles="Order.CanLeaveOrderItem">
                @if (isAbleToUpload)
                {
                <button class="btn btn-sm btn-success btn-space" @onclick="LeaveAssignImage" title="Leave Assigned File"><span class="fas fa-ban"></span> LAF</button>
                }
                </AuthorizeView>*@
                <AuthorizeView Roles="Order.QCCanUploadCompletedFiles">
                    <a class="btn btn-sm btn-success btn-space" href="/QCUploadCompleteFiles/@order.ObjectId" title="Qc Upload Completed Files"><span class="fas fa-arrow-circle-up"></span> QUCF </a>
                </AuthorizeView>
                <AuthorizeView Roles="Order.QCCanUploadRejectedFiles">
                    <a class="btn btn-sm btn-danger btn-space" href="/QCUploadRejectedFiles/@order.ObjectId" title="QC Upload Rejected Files"><span class="fas fa-arrow-circle-up"></span> QURF</a>
                </AuthorizeView>
                <AuthorizeView Roles="Order.QCReassignFiles">
                    <button class="btn btn-sm btn-warning btn-space" @onclick="ReAssignImage" title="QC Reassign Files"><span class="fas fa-ban"></span> RA</button>
                </AuthorizeView>
            </div>
        </div>
    </div>
</div>

@if (spinShow)
{
    <div class="loader">
        @*<Chase/>
    <Circle/>
    <CircleFade/>
    <Flow/>*@
        <Grid />
        @*<Plane/>*@
        @*<Pulse/>
    <Swing/>
    <Wander/>
    <Wave/>
    <Bounce/>
    <Fold/>*@

    </div>
}

<div class="row">
    <div class="col-xl-12">
        <div class="card">
            <div class="card-body">
                <!-- Nav tabs -->
                <ul class="nav nav-tabs" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" data-bs-toggle="tab" href="#orderInfo" role="tab">
                            <span class="d-block d-sm-none"><i class="fas fa-home"></i></span>
                            <span class="d-none d-sm-block">Order Info</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#orderDetails" role="tab">
                            <span class="d-block d-sm-none"><i class="far fa-user"></i></span>
                            <span class="d-none d-sm-block">Order Details</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#orderColorRefImages" role="tab">
                            <span class="d-block d-sm-none"><i class="far fa-user"></i></span>
                            <span class="d-none d-sm-block">Color Ref Images</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" @onclick="LoadFeedBackImages" href="#feedBackImages" role="tab">
                            <span class="d-block d-sm-none"><i class="far fa-user"></i></span>
                            <span class="d-none d-sm-block">Feedback Images</span>
                        </a>
                    </li>

                </ul>
                @* <div class="float-right">
                <button type="button" class="btn btn-sm btn-secondary" @onclick="(e)=>MultipleF
                (order)"><span class="fas fa-arrow-circle-down"></span> Full Download</button>
                </div>*@

                <!-- Tab panes -->
                <div class="tab-content p-3 text-muted">
                    <div class="tab-pane active" id="orderInfo" role="tabpanel">
                        @if (order is null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else
                        {
                            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                <button type="button" class="btn btn-sm btn-outline-info btn-tbl-action" @onclick="(e)=>DownloadOrderFileAttachment(0,(int)order.Id)">
                                    <i class="fas fa-download"></i>Download All Attachment
                                </button>
                            </div>

                            <hr />
                            <div class="card">
                                <div class="card-header">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <h6>Instruction</h6>
                                        </div>
                                        <div class="col-md-6">
                                            <AuthorizeView Roles="Order.Edit">
                                                @if (order.InternalOrderStatus == (byte)InternalOrderStatus.OrderPlaced || order.InternalOrderStatus == (byte)InternalOrderStatus.OrderPlacing)
                                                {
                                                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                                        <button type="button" class="btn btn-sm ml-3" @onclick="@(()=> DownloadOrderInstruction(order))" style="float:right;background-color:#7da52f;color:white;"><i class="fas fa-download"></i></button>
                                                        <button type="button" class="btn btn-sm" @onclick="@(()=> isInstructionEditable = true)" style="float:right;background-color:#7da52f;color:white;"><span class="fas fa-pencil-alt"></span> Upload</button>
                                                    </div>
                                                }
                                            </AuthorizeView>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-body">

                                    @if (isInstructionEditable)
                                    {
                                        <EditForm Model=@order>
                                            <RadzenHtmlEditor @bind-Value=@order.Instructions Change=@((args) =>OnValueChange("Instructions",args)) style="height: 250px; margin-bottom: 1rem;">
                                                <RadzenHtmlEditorBold />
                                                <RadzenHtmlEditorItalic />
                                                <RadzenHtmlEditorColor />
                                                <RadzenHtmlEditorBackground />
                                                <RadzenHtmlEditorFontName />
                                                <RadzenHtmlEditorFontSize />
                                            </RadzenHtmlEditor>
                                            @*<RadzenTextArea @bind-Value="@order.InstructionInText" Rows="2" Change=@((args) =>OnValueChange("InstructionInText",args)) Style="width:100%;" />*@
                                        </EditForm>
                                    }
                                    else
                                    {
                                        if (string.IsNullOrEmpty(order.Instructions))
                                        {
                                            <span>No Instruction</span>
                                        }
                                        else
                                        {
                                            @((MarkupString)order.Instructions)
                                        }
                                    }
                                </div>
                            </div>
                            <hr />
                            <div class="card">
                                <div class="card-header">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <h6>Order Attachment</h6>
                                        </div>
                                        <div class="col-md-6">
                                            <AuthorizeView Roles="Order.Edit">
                                                @if (order.InternalOrderStatus == (byte)InternalOrderStatus.OrderPlaced || order.InternalOrderStatus == (byte)InternalOrderStatus.OrderPlacing)
                                                {
                                                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                                        <button type="button" class="btn btn-sm" style="background-color:#7da52f;color:white;" @onclick="ShowAttachmentEditPopUp">
                                                            <i class="fas fa-pencil-alt"></i> Upload Update SOP
                                                        </button>
                                                    </div>
                                                }
                                            </AuthorizeView>
                                        </div>
                                    </div>
                                </div>

                                <div class="card-body">
                                    @if (orderAttachementFiles.Count() > 0)
                                    {
                                        <div class="table-responsive">
                                            <table class="table mb-0 table-striped table-hover table-sm">
                                                <thead>
                                                    <tr>
                                                        <th>SL</th>
                                                        <th style="width:191px">Name</th>
                                                        <th>File Size</th>
                                                        <th>Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @{
                                                        int count = 1;
                                                    }
                                                    @foreach (var item in orderAttachementFiles)
                                                    {

                                                        <tr data-id="1">
                                                            <td class="fw-bold">@(count++) </td>
                                                            <td data-field="id" style="width: 80px">@item.FileName</td>
                                                            <td>
                                                                @if (item.FileSize > 0)
                                                                {
                                                                    <span>@(_genericService.GetSizeStringToHumanReadable(item.FileSize)) </span>
                                                                }
                                                                else
                                                                {
                                                                    <span>N/A</span>
                                                                }
                                                            </td>
                                                            <td>
                                                                <button type="button" class="btn btn-sm btn-outline-info btn-tbl-action" @onclick="(e)=>DownloadOrderFileAttachment(item.Id,0)">
                                                                    <i class="fas fa-download"></i>
                                                                </button>
                                                                <AuthorizeView Roles="Can.DeleteOrderAttachment">
                                                                    <button type="button" class="btn btn-sm btn-outline-danger btn-tbl-action" @onclick="(e)=>DeleteOrderAttachmentFile(item.Id)">
                                                                        <span class="fas fa-times"></span>
                                                                    </button>
                                                                </AuthorizeView>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>

                                    }
                                    else
                                    {
                                        <span>No Attachment</span>
                                    }

                                </div>

                            </div>
                            <hr />
                            <AuthorizeView Roles="OrderSOP.CanUploadUpdatedOrderSOP">
                                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="(e)=>OrderUploadSop()">
                                        <i class="fas fa-pencil-alt"></i> Upload Update SOP
                                    </button>
                                </div>
                            </AuthorizeView>
                            //<OrderTemplateListByCompany Order="order" UploadSop="UploadSop" templateList="sopTemplates" DownloadSopTemplate="DownloadSopTemplate" DownloadTemplate="DownloadSOPFileAttachment" DeleteSOPTemplate="DeleteSOPTemplate"></OrderTemplateListByCompany>
                            <KowToMateAdmin.Pages.OrderSOP.OrderSOPTemplateList Order="order" OrderDownloadTemplate="DownloadOrderSOPFileAttachment" orderTemplateList="orderSOPTemplateList" OrderUploadSop="OrderUploadSop" OrderDeleteSOPTemplate="OrderSOPDelete"></KowToMateAdmin.Pages.OrderSOP.OrderSOPTemplateList>

                            <hr />
                        }
                    </div>
                    <div class="tab-pane" id="orderDetails" role="tabpanel">

                        <AuthorizeView Roles="Order.Add">
                            @if (order.InternalOrderStatus < (byte)InternalOrderStatus.Completed)
                            {
                                <button type="button" class="btn btn-sm" style="background-color:#7da52f;color:white;" @onclick="@(()=> isOrderItemAddPopupVisible = true)"><span class="fas fa-pencil-alt"></span>Add Order Item</button>
                            }
                        </AuthorizeView>
                        <button type="button" class="btn btn-sm btn-warning" @onclick="(async () => await ShowHideImgaeOnList())" title="Cascading Filter">
                            @if (showImageOnList)
                            {
                                @:<span class="fas fa-check-square"></span> Hide Images
                            }
                            else
                            {
                                @:<span class="fas fa-square"></span> Show Images
                            }

                        </button>
                        @*TODO : Zakir Working this work but not completed The Permission Value : Order.AdditionalFileUpload Next: TODO Zakir  *@
                        @*<AuthorizeView Roles="Order.Add">
                        <button type="button" class="btn btn-sm btn-secondary" @onclick="@(()=> isOrderFileAddPopupVisible = true)"><span class="fas fa-pencil-alt"></span>Add Additional File</button>
                        </AuthorizeView>*@
                        @if (fileViewMode != 2 && fileViewMode != 3)
                        {
                            <AuthorizeView Roles="Order.CanDownloadForView">
                                @if (@clientOrderItems.Count > 0)
                                {
                                    <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="(e)=>SingleDownload(false)">
                                        <span class="fas fa-arrow-circle-down"></span>
                                        Download Raw
                                    </button>
                                }
                            </AuthorizeView>

                            <AuthorizeView Roles="Order.CanDownloadForReadyToDownload">

                                @if (@clientOrderItems.Count > 0 && fileViewMode == 1)
                                {
                                    <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="(e)=>SingleDownloadCompletedFile(false)">
                                        <span class="fas fa-arrow-circle-down"></span>
                                        Download Completed File
                                    </button>
                                }
                            </AuthorizeView>
                        }
                        else
                        {
                            <AuthorizeView Roles="@PermissionConstants.Order_CanViewStatusWiseDownloadButton">
                                @if ((fileViewMode == 2 || fileViewMode == 3) && orderItemStatusWiseViewMode == 1)
                                {
                                    <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="async (e)=>await DownloadSelectedFilesWithoutListView(orderItemStatusWiseViewMode, null, ResponseMessage.Raw_File_Download_Success_Message,EmployeeRoles.TeamLead)"><span class="fas fa-arrow-circle-down"></span> Download</button>
                                }
                                else if ((fileViewMode == 2 || fileViewMode == 3) && orderItemStatusWiseViewMode == 2)
                                {
                                    <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="async (e)=>await DownloadSelectedFilesWithoutListView(orderItemStatusWiseViewMode, null, ResponseMessage.ProductionDone_File_Download_Success_Message,EmployeeRoles.TeamLead)"><span class="fas fa-arrow-circle-down"></span> Download</button>
                                }
                                else if ((fileViewMode == 2 || fileViewMode == 3) && orderItemStatusWiseViewMode == 3)
                                {
                                    <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="async (e)=>await DownloadSelectedFilesWithoutListView(orderItemStatusWiseViewMode, null, ResponseMessage.Completed_File_Download_Success_Message,EmployeeRoles.TeamLead)"><span class="fas fa-arrow-circle-down"></span> Download</button>
                                }
                            </AuthorizeView>
                        }
                        <AuthorizeView Roles="Order.CanDownloadForWork">

                            @*<button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="(e)=>UpdateOrderItemByQc(InternalOrderItemStatus.InQc,0)"><span class="fas fa-arrow-circle-down"></span> Download For Work</button>*@


                            @if (@clientOrderItems.Count > 0 && fileViewMode == 1)
                            {
                                <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="async (e)=>await SingleDownloadEditor()"><span class="fas fa-arrow-circle-down"></span> Download For Work</button>
                            }

                            @if ((fileViewMode == 2 || fileViewMode == 3) && orderItemStatusWiseViewMode == 1)
                            {
                                <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="async (e)=>await DownloadSelectedFilesWithoutListView(orderItemStatusWiseViewMode, InternalOrderItemStatus.InProduction, ResponseMessage.Raw_File_Download_Success_Message,EmployeeRoles.Editor)"><span class="fas fa-arrow-circle-down"></span> Download</button>
                            }
                            else if ((fileViewMode == 2 || fileViewMode == 3) && orderItemStatusWiseViewMode == 2)
                            {
                                <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="async (e)=>await DownloadSelectedFilesWithoutListView(orderItemStatusWiseViewMode, null, ResponseMessage.ProductionDone_File_Download_Success_Message,EmployeeRoles.Editor)"><span class="fas fa-arrow-circle-down"></span> Download</button>
                            }
                            else if ((fileViewMode == 2 || fileViewMode == 3) && orderItemStatusWiseViewMode == 3)
                            {
                                <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="async (e)=>await DownloadSelectedFilesWithoutListView(orderItemStatusWiseViewMode, null, ResponseMessage.Completed_File_Download_Success_Message,EmployeeRoles.Editor)"><span class="fas fa-arrow-circle-down"></span> Download</button>
                            }

                            @*<button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="(e)=>SingleDownloadEditor()"><span class="fas fa-arrow-circle-down"></span> Download For Work</button>*@
                            @if (@clientOrderItems.Where(x => x.Status == (int)InternalOrderItemStatus.ReworkDistributed).Count() > 0 || @clientOrderItems.Where(x => x.Status == (int)InternalOrderItemStatus.ReworkInProduction).Count() > 0)
                            {
                                <button type="button" class="btn btn-sm btn-danger" style="margin:5px" disabled="@isSubmitting" @onclick="(e)=>EditorRejectedFileDownload()">
                                    <span class="fas fa-arrow-circle-down"></span>
                                    Download Rejected File
                                </button>
                            }
                        </AuthorizeView>
                        <AuthorizeView Roles="Order.CanDownloadForQc">
                            @if ((fileViewMode == 2 || fileViewMode == 3) && orderItemStatusWiseViewMode == 1)
                            {
                                <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="async (e)=>await DownloadSelectedFilesWithoutListView(orderItemStatusWiseViewMode,null, ResponseMessage.Raw_File_Download_Success_Message,EmployeeRoles.QC)"><span class="fas fa-arrow-circle-down"></span> Download</button>
                            }
                            else if ((fileViewMode == 2 || fileViewMode == 3) && orderItemStatusWiseViewMode == 2)
                            {
                                <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="async (e)=>await DownloadSelectedFilesWithoutListView(orderItemStatusWiseViewMode,InternalOrderItemStatus.InQc,ResponseMessage.ProductionDone_File_Download_Success_Message,EmployeeRoles.QC)"><span class="fas fa-arrow-circle-down"></span> Download</button>
                            }
                            else if ((fileViewMode == 2 || fileViewMode == 3) && orderItemStatusWiseViewMode == 3)
                            {
                                <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="async (e)=>await DownloadSelectedFilesWithoutListView(orderItemStatusWiseViewMode,null,ResponseMessage.Completed_File_Download_Success_Message,EmployeeRoles.QC)"><span class="fas fa-arrow-circle-down"></span> Download</button>
                            }
                        </AuthorizeView>


                        <AuthorizeView Roles="Order.CanDownloadForQc">
                            @if (fileViewMode != 2 && fileViewMode != 3)
                            {
                                @if (@clientOrderItems.Count > 0)
                                {
                                    <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="async (e)=>await SingleDownloadQC()"><span class="fas fa-arrow-circle-down"></span> Download For Qc</button>

                                }
                            }
                        </AuthorizeView>
                        @if (loginUser.CompanyType != (int)CompanyType.Client)
                        {
                            <button type="button" class="btn btn-sm btn-secondary" disabled="@isSubmitting" @onclick="(e)=>ShowSetOrderItemTypePopup()" title="Set As Supporting Image"> Set As Supporting Image</button>
                        }
                        <AuthorizeView Roles="Order.CanOrderDeliveryToClient">
                            <button type="button" class="btn btn-sm btn-secondary ml-3" disabled="@isSubmitting" @onclick="(e)=>MakeReadyToDeliverImageDelivered()" title="Delivered"> Delivered </button>
                        </AuthorizeView>
                        <AuthorizeView Roles="Order.FolderSearchOption">
                            <input style="border-radius:5px;border-block-color:aqua" placeholder="Search By Folder Name" type="text" @oninput="UpdateText" />
                        </AuthorizeView>


                        @if (isProgressBar)
                        {
                            @if (progressBarCurrentValue > 0)
                            {
                                <div class="row">
                                    <div class="col-lg-10">
                                        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Secondary" class="" Value="progressBarCurrentValue" Max="100" Style="margin-top:20px;background-color:aquamarine;color:black" />
                                    </div>
                                </div>
                            }
                        }
                        <div class="row">


                            <div class="col-xl-6">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="d-flex flex-wrap gap-2">
                                            <div>
                                                <div class="d-flex flex-wrap gap-3">
                                                    <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
                                                        <h5 class="mb-0" style="margin-right:30px;margin-top:5px">Files</h5>
                                                        @if (fileViewMode == 2)
                                                        {
                                                            <input type="radio" class="btn-check" @onclick="(e)=>ShowStatusWiseOrderItems(1)" name="btnradio" id="btnradio4" autocomplete="off" checked>
                                                            <label class="btn btn-outline-secondary" for="btnradio4">Raw View(@rawImageCount)</label>

                                                            <input type="radio" @onclick="(e)=>ShowStatusWiseOrderItems(2)" class="btn-check" name="btnradio" id="btnradio5" autocomplete="off">
                                                            <label class="btn btn-outline-secondary" for="btnradio5">Production Done View(@productionDoneImageCount)</label>

                                                            <input type="radio" @onclick="(e)=>ShowStatusWiseOrderItems(3)" class="btn-check" name="btnradio" id="btnradio6" autocomplete="off">
                                                            <label class="btn btn-outline-secondary" for="btnradio6">Completed View(@readyToDeliveryImageCount)</label>
                                                        }
                                                        else if (fileViewMode == 3)
                                                        {
                                                            <input type="radio" class="btn-check" @onclick="(e)=>ShowStatusWiseOrderItems(1)" name="btnradio" id="btnradio4" autocomplete="off" checked>
                                                            <label class="btn btn-outline-secondary" for="btnradio4">Raw View(@rawImageCount)</label>

                                                            <input type="radio" @onclick="(e)=>ShowStatusWiseOrderItems(2)" class="btn-check" name="btnradio" id="btnradio5" autocomplete="off">
                                                            <label class="btn btn-outline-secondary" for="btnradio5">Production Done View(@productionDoneImageCount)</label>

                                                            <input type="radio" @onclick="(e)=>ShowStatusWiseOrderItems(3)" class="btn-check" name="btnradio" id="btnradio6" autocomplete="off">
                                                            <label class="btn btn-outline-secondary" for="btnradio6">Completed View(@readyToDeliveryImageCount)</label>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>


                            <div class="col-xl-6">
                                <div>
                                    <ul class="nav nav-pills justify-content-end mb-2">
                                        <li class="nav-item">
                                            <span class="nav-link disabled">View :</span>
                                        </li>
                                        <li class="nav-item" @onclick="(arg) => ChangePreview(1)">
                                            @if (fileViewMode == 1)
                                            {
                                                <span class="nav-link cursor-pointer active">
                                                    <i class="mdi mdi-format-list-bulleted"></i>
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="nav-link cursor-pointer">
                                                    <i class="mdi mdi-format-list-bulleted"></i>
                                                </span>
                                            }
                                        </li>
                                        <li class="nav-item" @onclick="(arg) => ChangePreview(2)">

                                            @if (fileViewMode == 2)
                                            {
                                                <span class="nav-link cursor-pointer active">
                                                    <i class="mdi mdi-view-grid-outline"></i>
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="nav-link cursor-pointer">
                                                    <i class="mdi mdi-view-grid-outline"></i>
                                                </span>
                                            }
                                        </li>
                                        <li class="nav-item" @onclick="(arg) => ChangePreview(3)">

                                            @if (fileViewMode == 3)
                                            {
                                                <span class="nav-link cursor-pointer active">
                                                    <i class="mdi mdi-image-multiple"></i>
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="nav-link cursor-pointer">
                                                    <i class="mdi mdi-image-multiple"></i>
                                                </span>
                                            }
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            @if (@selectedFiles?.Count > 0)
                            {
                                <p style="color:darkblue;font-weight:bold">select @selectedFiles.Count Images</p>
                            }
                            <div class="col-lg-12">
                                @if (fileViewMode == 1)
                                {

                                    <RadzenDataGrid @ref="grid" Data="@clientOrderItems" IsLoading="isLoading" TItem="ClientOrderItemModel"
                                                    AllowFiltering="true" AllowColumnResize="true"
                                                    FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    AllowSorting="true" AllowPaging="true" PageSize="12"
                                                    PagerHorizontalAlign="HorizontalAlign.Center"
                                                    SelectionMode="DataGridSelectionMode.Multiple"
                                                    ShowPagingSummary="true" PageSizeOptions="@pageSizeOptions"
                                                    AllowRowSelectOnRowClick=@allowRowSelectOnRowClick
                                                    @bind-Value="@selectedFiles" ColumnWidth="150px" RowRender="@OnRowRender">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="ClientOrderItemModel" TextAlign="TextAlign.Center" Width="30px" Frozen="true" Sortable="false"
                                                                  Filterable="false" Groupable="false" Reorderable="false" Pickable="false">
                                                <HeaderTemplate>
                                                    <RadzenCheckBox TriState="false" TValue="bool" Value="@(clientOrderItems == null ? false : clientOrderItems.Any(i => selectedFiles != null && selectedFiles.Contains(i)))"
                                                                    Change="@(args => selectedFiles = args && clientOrderItems != null ? clientOrderItems.Where(f=> (filterStatus == null || f.Status == filterStatus) && (string.IsNullOrWhiteSpace(filterFileName) ||  f.FileName.Contains(filterFileName, StringComparison.InvariantCultureIgnoreCase))).Skip(grid.CurrentPage * grid.PageSize).Take(grid.PageSize).ToList() : null)" />
                                                </HeaderTemplate>
                                                <Template Context="data">
                                                    <RadzenCheckBox TriState="false" Value="@(selectedFiles != null && selectedFiles.Contains(data))"
                                                                    TValue="bool" Change=@(args => { if(!allowRowSelectOnRowClick) { grid.SelectRow(data); }}) />
                                                </Template>
                                            </RadzenDataGridColumn>

                                            <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=1 Property="FileName" Title="File Name" FilterValue="@filterFileName" Resizable="true" Width="250px" Frozen="true">
                                                <FilterTemplate>
                                                    <RadzenTextBox Class="w-100" @bind-Value="filterFileName" />
                                                </FilterTemplate>
                                            </RadzenDataGridColumn>

                                            <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=7 Property="CategoryName" Title="Category Name" Resizable="true" Width="150px" Frozen="true">
                                                @*  <FilterTemplate>
                                            <RadzenTextBox Class="w-100" />
                                            </FilterTemplate> *@
                                            </RadzenDataGridColumn>

                                            @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                            {
                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=4 Property="Status" Title="Status" FilterValue="@filterStatus" TextAlign="TextAlign.Center" Width="200px">
                                                    <FilterTemplate>
                                                        <RadzenDropDown @bind-Value=@filterStatus Style="width:100%;" TextProperty="EnumName" ValueProperty="EnumValue"
                                                                        Data="@(internalOrderItemStatusList)" AllowClear="true" />
                                                    </FilterTemplate>
                                                    <Template Context="order">

                                                        @if (order.Status != null)
                                                        {
                                                            <span class=@cssHelper.GivenBackgroundColorForStatus(order)>
                                                                @(
                                                                    (InternalOrderItemStatus)order.Status
                                                                    )
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span>N/A</span>
                                                        }
                                                    </Template>
                                                </RadzenDataGridColumn>

                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=6 Property="ArrivalTime" Title="Arrival Time" Resizable="true" TextAlign="TextAlign.Center" Width="150px">

                                                </RadzenDataGridColumn>

                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=6 Property="CategorySetStatus" Title="Category Set Status" TextAlign="TextAlign.Center" Width="200px">
                                                    <Template Context="clientOrderItem">

                                                        @if (clientOrderItem.CategorySetStatus != null)
                                                        {
                                                            <span class=@cssHelper.GivenBackgroundColorForItemCategorySetStatus(clientOrderItem)>
                                                                @(
                                                                    (ItemCategorySetStatus)clientOrderItem.CategorySetStatus
                                                                    )
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span>N/A</span>
                                                        }
                                                    </Template>
                                                </RadzenDataGridColumn>


                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="ExpectedDeliveryDate" Title="Expected Delivery Date" Resizable="true" Width="250px">

                                                    <Template Context="clientOrderItem">
                                                        <span>@clientOrderItem.ExpectedDeliveryDate</span>
                                                        <AuthorizeView Roles="Order.CanUpdateOrderDedline">
                                                            <button type="button" class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="(async () => await OrderItemExpectedDeliveryDatePopupVisible(clientOrderItem))">
                                                                <span class="fas fa-pencil-alt"></span>
                                                            </button>
                                                        </AuthorizeView>

                                                    </Template>
                                                </RadzenDataGridColumn>

                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=7 Property="TimeLeft" Title="Time Left" Resizable="true" TextAlign="TextAlign.Center" Width="100px">
                                                    <Template Context="orderItem">
                                                        <span>
                                                            @if (@orderItem.ArrivalTime.HasValue && orderItem.Status != (byte)InternalOrderItemStatus.Completed)
                                                            {
                                                                var arrivalTimePlus1_4Hours = @orderItem.ArrivalTime.Value.AddHours(AutomatedAppConstant.VcDeadLineInHour);
                                                                var timeLeft = arrivalTimePlus1_4Hours - DateTime.Now;
                                                                if (timeLeft.TotalMinutes > 0)
                                                                {
                                                                    @($"{(int)timeLeft.TotalMinutes} Min Left")
                                                                    ;
                                                                }
                                                                else
                                                                {
                                                                    <span style="font-weight: bold;">@($"Over Due By {(int)timeLeft.TotalMinutes * (-1)} Min") </span>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <text>N/A</text>
                                                            }
                                                        </span>
                                                    </Template>
                                                </RadzenDataGridColumn>

                                            }

                                            @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                            {
                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=5 Property="FileGroup" Title="File Group" FilterValue="@filterGroup" TextAlign="TextAlign.Center" Width="110px">
                                                    <FilterTemplate>
                                                        <RadzenDropDown @bind-Value=@filterGroup Style="width:100%;" TextProperty="EnumName" ValueProperty="EnumValue"
                                                                        Data="@(fileGroupCustomEnumList)" AllowClear="true" />
                                                    </FilterTemplate>
                                                    <Template Context="orderItem">

                                                        @if (orderItem.Status != null)
                                                        {
                                                            <span class="badge bg-success">
                                                                @(
                                                                    (OrderItemFileGroup)orderItem.FileGroup
                                                                    )
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span>N/A</span>
                                                        }
                                                    </Template>

                                                </RadzenDataGridColumn>

                                            }
                                            @if (showImageOnList)
                                            {

                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=2 Property="FileByteString" Title="Raw Image" TextAlign="TextAlign.Center" Filterable="false" Frozen="true">
                                                    <Template Context="order">
                                                        <div>
                                                            @*   @if(order.InternalFileInputPath != null)
                                                    {
                                                    @if (loadingImages.ContainsKey(order.InternalFileInputPath) && loadingImages[order.InternalFileInputPath])
                                                    {
                                                    <div class="image-spinner"></div>
                                                    }
                                                    else
                                                    {
                                                    <img height="100px" width="100px"
                                                    @ondblclick="(e) => ShowImagePopup((int)order.Id)"
                                                    src="@GetCachedImageUrl(order.InternalFileInputPath)">
                                                    }
                                                    } *@

                                                            @if (order.InternalFileInputPath != null)
                                                            {
                                                                string imageUrl = GetCachedImageUrl(order.InternalFileInputPath);

                                                                if (!string.IsNullOrEmpty(imageUrl))
                                                                {
                                                                    <img height="100px" width="100px"
                                                                         @ondblclick="(e) => ShowImagePopup((int)order.Id)"
                                                                         src="@imageUrl">
                                                                }
                                                                else
                                                                {
                                                                    <div class="image-spinner"></div>
                                                                }
                                                            }

                                                        </div>
                                                    </Template>
                                                </RadzenDataGridColumn>

                                                @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                                {
                                                    <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=3 Property="ProductionFileByteString" Title="Prod Done Img" TextAlign="TextAlign.Center" Filterable="false" Frozen="true">
                                                        <Template Context="order">
                                                            @if (order.Status >= (int)InternalOrderItemStatus.ProductionDone)
                                                            {
                                                                if (order.Status >= (int)InternalOrderItemStatus.ReadyToDeliver)
                                                                {

                                                                    @if (order.InternalFileOutputPath != null)
                                                                    {
                                                                        string imageUrl = GetCachedImageUrl(order.InternalFileOutputPath);

                                                                        if (!string.IsNullOrEmpty(imageUrl))
                                                                        {
                                                                            <img height="100px" width="100px"
                                                                                 @ondblclick="(e) => ShowProductionDoneImagePopup(order)"
                                                                                 src="@imageUrl">
                                                                        }
                                                                        else
                                                                        {
                                                                            <div class="image-spinner"></div>
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    @if (order.ProductionDoneFilePath != null)
                                                                    {
                                                                        string imageUrl = GetCachedImageUrl(order.ProductionDoneFilePath);

                                                                        if (!string.IsNullOrEmpty(imageUrl))
                                                                        {
                                                                            <img height="100px" width="100px"
                                                                                 @ondblclick="(e) => ShowProductionDoneImagePopup(order)"
                                                                                 src="@imageUrl">
                                                                        }
                                                                        else
                                                                        {
                                                                            <div class="image-spinner"></div>
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <span>N/A</span>
                                                            }
                                                        </Template>
                                                    </RadzenDataGridColumn>
                                                }

                                                @if (loginUser.CompanyType == (int)CompanyType.Client)
                                                {
                                                    <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=3 Property="ProductionFileByteString" Title="Completed Images" TextAlign="TextAlign.Center" Filterable="false">
                                                        <Template Context="order">
                                                            @if (order.ExternalStatus == (int)ExternalOrderItemStatus.ReadyToDownload || order.ExternalStatus == (int)ExternalOrderItemStatus.Completed)
                                                            {
                                                               @*  <div>
                                                                    <img height="100px" width="100px" @ondblclick="(e)=>ShowProductionDoneImagePopup(order)" src="@fileServer.RootFolder/@order.InternalFileOutputPath?width=200">
                                                                </div> *@
                                                                @if (order.InternalFileOutputPath != null)
                                                                {
                                                                    string imageUrl = GetCachedImageUrl(order.InternalFileOutputPath);

                                                                    if (!string.IsNullOrEmpty(imageUrl))
                                                                    {
                                                                        <img height="100px" width="100px"
                                                                             @ondblclick="(e) => ShowProductionDoneImagePopup(order)"
                                                                             src="@imageUrl">
                                                                    }
                                                                    else
                                                                    {
                                                                        <div class="image-spinner"></div>
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                <span>N/A</span>
                                                            }
                                                        </Template>
                                                    </RadzenDataGridColumn>
                                                }

                                            }

                                            @if (loginUser.CompanyType == (int)CompanyType.Client)
                                            {
                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=8 Property="ExternalStatus" Title="Status" FilterValue="@filterStatus" TextAlign="TextAlign.Center">
                                                    <FilterTemplate>
                                                        <RadzenDropDown @bind-Value=@filterStatus Style="width:100%;" TextProperty="EnumName" ValueProperty="EnumValue"
                                                                        Data="@(internalOrderItemStatusList)" AllowClear="true" />
                                                    </FilterTemplate>
                                                    <Template Context="order">

                                                        @if (order.ExternalStatus != null)
                                                        {
                                                            <span class="@cssHelper.GivenBackgroundColorForStatus(order)">@((ExternalOrderItemStatus)order.ExternalStatus)</span>
                                                        }
                                                        else
                                                        {
                                                            <span>N/A</span>
                                                        }
                                                    </Template>

                                                </RadzenDataGridColumn>
                                            }
                                            <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=9 Property="FileSize" Title="Size" TextAlign="TextAlign.Center" Filterable="false">
                                                <Template Context="order">
                                                    @if (order.FileSize <= 0 || order.FileSize == null)
                                                    {
                                                        <span>N/A</span>
                                                    }
                                                    else
                                                    {
                                                        <span>@(_genericService.GetSizeStringToHumanReadable(order.FileSize)) </span>
                                                    }
                                                </Template>
                                            </RadzenDataGridColumn>
                                            @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                            {
                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=10 Property="TeamName" Title="Team Name" TextAlign="TextAlign.Center" Filterable="false">
                                                    <Template Context="order">
                                                        @if (string.IsNullOrEmpty(order.TeamName))
                                                        {
                                                            <span>N/A</span>
                                                        }
                                                        else
                                                        {
                                                            <span>@order.TeamName</span>
                                                        }
                                                    </Template>
                                                </RadzenDataGridColumn>
                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=11 Property="EditorName" Title="Editor Name" TextAlign="TextAlign.Center" Filterable="false" Width="250px">
                                                    <Template Context="order">
                                                        @if (string.IsNullOrEmpty(order.EditorName))
                                                        {
                                                            <span>N/A</span>
                                                        }
                                                        else
                                                        {
                                                            <span>@order.EditorName</span>
                                                        }
                                                    </Template>
                                                </RadzenDataGridColumn>
                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=12 Property="OrderAssignDate" Title="Order Assign Date" TextAlign="TextAlign.Center" Filterable="false">
                                                    <Template Context="order">
                                                        @if (@order.OrderAssignDate == null)
                                                        {
                                                            <span>N/A</span>
                                                        }
                                                        else
                                                        {
                                                            <span>@order.OrderAssignDate</span>
                                                        }
                                                    </Template>
                                                </RadzenDataGridColumn>
                                                @if (authState.User.IsInRole(PermissionConstants.Order_QCUploadCompletedFiles))
                                                {
                                                    <RadzenDataGridColumn Width="120px" OrderIndex=13 TItem="ClientOrderItemModel" Property="Id" Title="Actions" Filterable="false" Sortable="false" Pickable="false" TextAlign="TextAlign.Center">
                                                        <Template Context="orderItem">
                                                            @*@if ( (int)InternalOrderItemStatus.ReadyToDeliver > orderItem.Status)
                                                {*@
                                                            <div class="float-right">
                                                                <button type="button" class="btn btn-sm btn-secondary" @onclick="(e)=>ShowReplacePopup(orderItem)"><span class="fas fa-arrow-circle-down"></span>Replace</button>
                                                            </div>
                                                            @*}*@
                                                        </Template>
                                                    </RadzenDataGridColumn>
                                                }
                                            }
                                            @if (showActionColumn)
                                            {
                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" OrderIndex=14 Property="Id" Title="Actions" Filterable="false" Sortable="false" Pickable="false" TextAlign="TextAlign.Center" Width="300px">
                                                    <Template Context="orderItem">
                                                        <AuthorizeView Roles="Order.CanViewOrderItemStatusLog">
                                                            <button class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="(e)=>ViewOrderItemStatusLog((int)orderItem.Id)">
                                                                <i class="fas fa-eye">Logs</i>
                                                            </button>
                                                        </AuthorizeView>
                                                        <AuthorizeView Roles="Order.CanViewOrderItemStatusLog">
                                                            <button class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="(e)=>ViewOrderItemActivityLog((int)orderItem.Id)">
                                                                <i class="fas fa-eye">Activity Log</i>
                                                            </button>
                                                        </AuthorizeView>
                                                    </Template>
                                                </RadzenDataGridColumn>
                                            }



                                        </Columns>
                                    </RadzenDataGrid>

                                }
                                else
                                {

                                    var folderNavs = topDirectoryPath.Split('/');
                                    //var navRootPath = folderNavs[0];
                                    var navPath = "";

                                    <div style="font-weight:bold;" class="border-bottom border-top pt-2 pb-2">
                                        @for (int count = 0; count < folderNavs.Length; count++)
                                        {
                                            if (count == 0)
                                            {
                                                navPath = folderNavs[count];
                                            }
                                            else
                                            {
                                                navPath = $"{navPath}/{folderNavs[count]}";
                                            }

                                            var newNav = navPath;
                                            //var newNav = navRootPath + "/" + navPath;
                                            @if (count == folderNavs.Length - 1)
                                            {
                                                <span>/@folderNavs[count]</span>
                                            }
                                            else
                                            {
                                                <span class="cursor-pointer" @onclick=@(async () => await LoadSubFoldersAndFiles(newNav))>/@folderNavs[count]</span>
                                            }
                                        }
                                    </div>

                                    @if (folderNodes != null && folderNodes.Any())
                                    {
                                        var firstNode = folderNodes.FirstOrDefault();
                                        <div class="row mt-3" id="solid" @onclick="(args)=>MakeOrderItemUnselected(args)">
                                            @{
                                                int folderCounter = 0;
                                            }
                                            @foreach (var folder in folderNodes)
                                            {
                                                @if (folderCounter % 5 == 0)
                                                {
                                                    if (folderCounter > 0)
                                                    {
                                                        <div></div>
                                                    }
                                                    <div class="row"></div>
                                                }

                                                var isSelectedClass = folder.IsSelected ? "selected-folder-file" : "";
                                                @if (folder.IsFolder)
                                                {
                                                    if (folder.IsFileParentFolder)
                                                    {
                                                        var parentFolderContainFilePathUrl = GetCachedImageUrl(folder.ParentFolderContainFilePath,80,80);
                                                         <div class="col-xl-2 col-lg-2 col-md-4 col-sm-6 mb-3">
                                                       <div class="folder-container @isSelectedClass" @onclick="async (args) => await OnClickTitle(args, folder)" @ondblclick=@(async () => await LoadSubFoldersAndFiles(folder.Prefix + "/" + folder.FolderName))>
                                                              <div class="folderParrent">
                                                                <h4>@folder.FolderName</h4>
                                                                <div class="folder">
                                                                    <div class="folder-icon-wrap">
                                                                            <img class="folder-icon" src="./assets/images/foldericon.svg" />
                                                                        <div>
                                                                                <img src="@parentFolderContainFilePathUrl" alt="Folder Image" class="folder-image" />
                                                                        </div>
                                                                    </div>

                                                                    <div class="folder-info-wrap">
                                                                        <div class="folder-info">
                                                                                <span style="font-weight:bold">@folder.ParentFolderContainFileCount Files</span>
                                                                        </div>
                                                                        <div class="folder-info">
                                                                             <span class="folder-status">
                                                                                @((InternalOrderItemStatus)folder.FolderMinStatus != 0 ? $"{(InternalOrderItemStatus)folder.FolderMinStatus}" : "N/A")
                                                                            </span>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    }
                                                    else
                                                    {
                                                         <div class="col-xl-2 col-lg-2 col-md-4 col-sm-6 mb-3">
                                                        <div class="@isSelectedClass" @onclick="async (args) => await OnClickTitle(args, folder)" @ondblclick=@(async () => await LoadSubFoldersAndFiles(folder.Prefix + "/" + folder.FolderName))>
                                                            <i class="fas fa-folder"></i> @folder.FolderName
                                                            <span style="color:green;font-weight:bold;margin-left:12%">
                                                                @((InternalOrderItemStatus)folder.FolderMinStatus != 0 ? $"{(InternalOrderItemStatus)folder.FolderMinStatus}" : "N/A")
                                                            </span>
                                                        </div>
                                                    </div>
                                                    }
                                                }

                                                folderCounter++;
                                            }
                                            @if (folderCounter % 5 != 0)
                                            {
                                                <div></div>
                                            }
                                            @if (folderNodes.Where(f => f.IsFolder == false).ToList().Count() > 0)
                                            {

                                                //This is folder structure list view.Todo: Rakib

                                                @if (fileViewMode == 2)
                                                {
                                                    <table class="table">
                                                        <thead>
                                                            <tr>
                                                                <th><input type="checkbox" id="allOrderItemId" value="pongpong" @onchange="(arg)=>SelectAllOrderItemNodesFromFolderStructure(arg.Value)"></th>
                                                                <th>File Name</th>
                                                                @if (showImageOnList)
                                                                {
                                                                    <th>Image</th>
                                                                }
                                                                <th>Status</th>
                                                                <th>File Group</th>
                                                                @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                                                {
                                                                    <th>Assign To</th>
                                                                }
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var file in folderNodeFilesList)
                                                            {
                                                                var isSelectedClass = file.IsSelected ? "selected-folder-file" : "";
                                                                @if (!file.IsFolder)
                                                                {
                                                                    <tr>
                                                                        @if (selectedOrderItemFromFolderStructure.Exists(sf => sf.OrderItemId == file.OrderItemId))
                                                                        {
                                                                            <td><input type="checkbox" checked id="@file.OrderItemId" name="selectedTemplateId" @onchange="(arg)=>SelectOrderItemNodesFromFolderStructure(file,arg.Value)"></td>
                                                                        }
                                                                        else
                                                                        {
                                                                            <td><input type="checkbox" id="@file.OrderItemId" name="selectedTemplateId" @onchange="(arg)=>SelectOrderItemNodesFromFolderStructure(file,arg.Value)"></td>
                                                                        }

                                                                        <td>@file.FolderName</td>
                                                                        @if (showImageOnList)
                                                                        {
                                                                            @* <td><img height="100px" width="100px" @ondblclick="(e)=>ShowImagePopup((int)file.OrderItemId)" src="@fileServer.RootFolder/@file.InternalFileInputPath?width=200"></td> *@
                                                                            <td>
                                                                                @if (file.FolderName != null)
                                                                                {
                                                                                    string imageUrl = "";
                                                                                    @if (orderItemStatusWiseViewMode == 1)
                                                                                    {
                                                                                        if (!string.IsNullOrEmpty(file.InternalFileInputPath))
                                                                                        {
                                                                                            imageUrl = GetCachedImageUrl(file.InternalFileInputPath);
                                                                                        }
                                                                                    }
                                                                                    else if (orderItemStatusWiseViewMode == 2)
                                                                                    {
                                                                                        if (!string.IsNullOrEmpty(file.ProductionDoneFilePath))
                                                                                        {
                                                                                            imageUrl = GetCachedImageUrl(file.ProductionDoneFilePath);
                                                                                        }
                                                                                    }
                                                                                    else if (orderItemStatusWiseViewMode == 3)
                                                                                    {
                                                                                        if (!string.IsNullOrEmpty(file.InternalFileOutputPath))
                                                                                        {
                                                                                            imageUrl = GetCachedImageUrl(file.InternalFileOutputPath);
                                                                                        }
                                                                                    }
                                                                                    if (!string.IsNullOrEmpty(imageUrl))
                                                                                    {

                                                                                        <img height="100px" width="100px"
                                                                                             @ondblclick="(e) => ShowImagePopup((int)file.OrderItemId)"
                                                                                             src="@imageUrl" title="@file.EditorName">
                                                                                    }
                                                                                    else
                                                                                    {

                                                                                        <div class="image-spinner"></div>
                                                                                    }
                                                                                }
                                                                            </td>
                                                                        }
                                                                        @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                                                        {
                                                                            <td>@((InternalOrderItemStatus)file.Status)</td>
                                                                        }
                                                                        @if (loginUser.CompanyType == (int)CompanyType.Client)
                                                                        {
                                                                            <td>@((ExternalOrderItemStatus)file.ExternalStatus)</td>
                                                                        }
                                                                        <td>@((OrderItemFileGroup)file.FileGroup)</td>
                                                                        @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                                                        {
                                                                            @if (string.IsNullOrEmpty(@file.EditorName))
                                                                            {
                                                                                <td>N/A</td>
                                                                            }
                                                                            else
                                                                            {
                                                                                <td>@file.EditorName</td>
                                                                            }

                                                                        }
                                                                    </tr>
                                                                }
                                                            }

                                                        </tbody>

                                                    </table>
                                                }

                                                @if (fileViewMode == 3)
                                                {
                                                    <div class="row">
                                                        @foreach (var file in folderNodeFilesList)
                                                        {
                                                            @if (!file.IsFolder)
                                                            {
                                                                @* @onclick="async (args) => await OnOrderItemClick(args,file.OrderItemId)" @ondblclick="(e) => ShowImagePopup((int)file.OrderItemId)" *@
                                                                <div class="col-xl-1 col-lg-1 col-md-2 col-sm-2 mb-4" style="user-select:none">
                                                                    <div class="card  @((selectedItemFromFolderStructure.Contains(file.OrderItemId) ? "selected-folder-file" : ""))" style="width: 100%;"
                                                                         @onmousedown="(e) => OnMouseDown(e, file.OrderItemId)"
                                                                         @onmousemove="(e) => OnMouseMove(e, file.OrderItemId)">

                                                                        @if (file.FolderName != null)
                                                                        {
                                                                            string imageUrl = "";
                                                                            @if (orderItemStatusWiseViewMode == 1)
                                                                            {
                                                                                if (!string.IsNullOrEmpty(file.InternalFileInputPath))
                                                                                {
                                                                                    imageUrl = GetCachedImageUrl(file.InternalFileInputPath);
                                                                                }
                                                                            }
                                                                            else if (orderItemStatusWiseViewMode == 2)
                                                                            {
                                                                                if (!string.IsNullOrEmpty(file.ProductionDoneFilePath))
                                                                                {
                                                                                    imageUrl = GetCachedImageUrl(file.ProductionDoneFilePath);
                                                                                }
                                                                            }
                                                                            else if (orderItemStatusWiseViewMode == 3)
                                                                            {
                                                                                if (!string.IsNullOrEmpty(file.InternalFileOutputPath))
                                                                                {
                                                                                    imageUrl = GetCachedImageUrl(file.InternalFileOutputPath);
                                                                                }
                                                                            }
                                                                            if (!string.IsNullOrEmpty(imageUrl))
                                                                            {

                                                                                <img height="100px" width="100px"
                                                                                     @ondblclick="(e) => ShowImagePopup((int)file.OrderItemId)"
                                                                                     src="@imageUrl" title="@file.EditorName">
                                                                            }
                                                                            else
                                                                            {

                                                                                <div class="image-spinner"></div>
                                                                            }
                                                                        }

                                                                        <div class="card-body text-center">
                                                                            <h5 style="font-size: 10px;margin: 0 0 7px 0;">@file.FolderName</h5>

                                                                            @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                                                            {
                                                                                <p class=@cssHelper.GivenBackgroundColorForStatus((byte)file.Status) style="font-size: 10px;margin: 0 0 7px 0;">
                                                                                    @((InternalOrderItemStatus)file.Status)
                                                                                </p>
                                                                            }
                                                                            @if (loginUser.CompanyType == (int)CompanyType.Client)
                                                                            {
                                                                                <p class=@cssHelper.GivenBackgroundColorForStatus((byte)file.Status) style="font-size: 10px;margin: 0 0 7px 0;">
                                                                                    @((ExternalOrderItemStatus)file.ExternalStatus)
                                                                                </p>
                                                                            }

                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                    </div>
                                                }

                                                <div class="row">
                                                    <div class="col-md-3">
                                                    </div>
                                                    <div class="col-md-3">
                                                        <nav aria-label="Page navigation example">
                                                            <ul class="pagination">

                                                                @*<li class="page-item"><a class="page-link" href="#">Previous</a></li>*@

                                                                @for (var i = 1; i <= numberOfPage; i++)
                                                                {
                                                                    var localVariable = i;
                                                                    <li class="page-item" @onclick="(e=>HandleChangePage(localVariable))"><a class="page-link">@i</a></li>
                                                                }
                                                            </ul>
                                                        </nav>
                                                    </div>
                                                    <div class="col-md-3">
                                                        <div>
                                                            <label>Page Size</label>
                                                            <select @onchange="PageSizeChange" style="width:107px;height: 32px;border-color:#74788D;border-radius:17px">
                                                                <option value="10">--select--</option>
                                                                <option value="10">10</option>
                                                                <option value="20">20</option>
                                                                <option value="30">30</option>
                                                                <option value="100">100</option>
                                                                <option value="100">200</option>
                                                                <option value="201">All</option>
                                                            </select>

                                                        </div>

                                                    </div>
                                                </div>

                                            }
                                        </div>
                                    }
                                    @*  </div> *@
                                }
                            </div>
                        </div>

                       @if (loginUser.CompanyType == (int)CompanyType.Admin)
                        {
                            var results = clientOrderItems.Where(x => x.Status != null && x.FileGroup == (int)OrderItemFileGroup.Work && (x.InternalFileInputPath !=null || x.InternalFileOutputPath != null || x.ProductionDoneFilePath!=null)).GroupBy(x => x.Status).Select(gcs => new { Status = gcs.Key, count = gcs.Count()});
                            <div class="row" style="margin-top:10px">
                                <div class="col-lg-4 col-sm-6 col-md-6"></div>

                                <div class="col-lg-4 col-sm-6 col-md-6" style="overflow:auto">
                                    <table class="table table-bordered border-primary">
                                        @if (results.Count() > 0)
                                        {
                                            <thead>
                                                <tr>
                                                    <th>Status</th>
                                                    <th>Total</th>
                                                </tr>
                                            </thead>
                                        }
                                        <tbody>
                                            @foreach (var item in results)
                                            {
                                                <tr>
                                                    <td>@((InternalOrderItemStatus)item.Status)</td>
                                                    <td>@item.count</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                        @* else
                        {
                            var results = clientOrderItems.GroupBy(x => x.ExternalStatus).Select(gcs => new { Status = gcs.Key, count = gcs.Count() });
                            <div class="row" style="margin-top:10px">
                                <div class="col-lg-4 col-sm-6 col-md-6"></div>

                                <div class="col-lg-4 col-sm-6 col-md-6" style="overflow:auto">
                                    <table class="table table-bordered border-primary">
                                        @if (results.Count() > 0)
                                        {
                                            <thead>
                                                <tr>
                                                    <th>Status</th>
                                                    <th>Total</th>
                                                </tr>
                                            </thead>
                                        }
                                        <tbody>
                                            @foreach (var item in results)
                                            {
                                                <tr>
                                                    <td>@((ExternalOrderItemStatus)item.Status)</td>
                                                    <td>@item.count</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }  *@

                    </div>
                    <div class="tab-pane" id="orderColorRefImages" role="tabpanel">
                        @if (@clientItemColorRefGroupList.Count > 0)
                        {
                            <button type="button" class="btn btn-sm btn-warning ml-3" @onclick="(async () => await ShowHideImgaeOnList())" title="Cascading Filter">
                                @if (showImageOnList)
                                {
                                    @:<span class="fas fa-check-square"></span> Hide Images
                                }
                                else
                                {
                                    @:<span class="fas fa-square"></span> Show Images
                                }

                            </button>




                            <button type="button" class="btn btn-sm btn-secondary ml-3" disabled="@isSubmitting" @onclick="(e)=>SingleDownload(false)">
                                <span class="fas fa-arrow-circle-down"></span>
                                Download

                            </button>

                            <button type="button" class="btn btn-sm btn-secondary ml-3" disabled="@isSubmitting" @onclick="(e)=>BackShowSetOrderItemTypePopup()" title="Set As Supporting Image"> Set As Supporting Image</button>
                            <RadzenDataGrid @ref="gridColorRefGroupList" Data="@clientItemColorRefGroupList" IsLoading="isLoading" TItem="ClientOrderItemModel"
                                            AllowFiltering="true" AllowColumnResize="true"
                                            FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowSorting="true" AllowPaging="true" PageSize="20"
                                            PagerHorizontalAlign="HorizontalAlign.Center"
                                            SelectionMode="DataGridSelectionMode.Multiple"
                                            ShowPagingSummary="true" PageSizeOptions="@pageSizeOptions"
                                            AllowRowSelectOnRowClick="false"
                                            @bind-Value="@selectedColorRefFiles" ColumnWidth="150px">
                                <Columns>
                                    <RadzenDataGridColumn TItem="ClientOrderItemModel" TextAlign="TextAlign.Center" Width="30px" Frozen="true" Sortable="false"
                                                          Filterable="false" Groupable="false" Reorderable="false" Pickable="false" OrderIndex="1">
                                        <HeaderTemplate>
                                            <RadzenCheckBox TriState="false" TValue="bool" Value="@(clientItemColorRefGroupList == null ? false : clientItemColorRefGroupList.Any(i => selectedColorRefFiles != null && selectedColorRefFiles.Contains(i)))"
                                                            Change="@(args => selectedColorRefFiles = args && clientItemColorRefGroupList != null ? clientItemColorRefGroupList.Where(f=> (filterColorRefStatus == null || f.Status == filterColorRefStatus) && (string.IsNullOrWhiteSpace(filterColorRefFileName) ||  f.FileName.Contains(filterColorRefFileName,StringComparison.InvariantCultureIgnoreCase))).ToList() : null)" />
                                        </HeaderTemplate>
                                        <Template Context="data">
                                            <RadzenCheckBox TriState="false" Value="@(selectedColorRefFiles != null && selectedColorRefFiles.Contains(data))"
                                                            TValue="bool" Change=@(args => { if(!allowRowSelectOnRowClick) { gridColorRefGroupList.SelectRow(data); }}) />
                                        </Template>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileName" Title="File Name" FilterValue="@filterColorRefFileName" SortOrder="SortOrder.Ascending" Resizable="true" Width="250px" OrderIndex="2">
                                        <FilterTemplate>
                                            <RadzenTextBox @bind-Value="filterColorRefFileName" />
                                        </FilterTemplate>
                                    </RadzenDataGridColumn>
                                    @if (showImageOnList)
                                    {

                                        <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileByteString" Title="Raw Image" TextAlign="TextAlign.Center" Filterable="false" OrderIndex="3">
                                            <Template Context="order">
                                                <div>

                                                    @* <img height="100px" width="100px" @ondblclick="(e)=>ShowImagePopup((int)order.Id)" src="@fileServer.RootFolder/@order.InternalFileInputPath?width=100"> *@

                                                    @if (order.InternalFileInputPath != null)
                                                    {
                                                        string imageUrl = GetCachedImageUrl(order.InternalFileInputPath);

                                                        if (!string.IsNullOrEmpty(imageUrl))
                                                        {
                                                            <img height="100px" width="100px"
                                                                 @ondblclick="(e) => ShowImagePopup((int)order.Id)"
                                                                 src="@imageUrl">
                                                        }
                                                        else
                                                        {
                                                            <div class="image-spinner"></div>
                                                        }
                                                    }

                                                </div>
                                            </Template>
                                        </RadzenDataGridColumn>

                                        @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                        {
                                            <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="ProductionFileByteString" Title="ProductionDone Images" TextAlign="TextAlign.Center" Filterable="false" OrderIndex="4">
                                                <Template Context="order">
                                                    @if (order.Status >= (int)InternalOrderItemStatus.ProductionDone)
                                                    {
                                                        if (order.Status >= (int)InternalOrderItemStatus.ReadyToDeliver)
                                                        {

                                                           @*  <div>
                                                                <img height="100px" width="100px" @ondblclick="(e)=>ShowProductionDoneImagePopup(order)" src="@fileServer.RootFolder/@order.InternalFileOutputPath?width=200">
                                                            </div> *@


                                                            @if (order.InternalFileInputPath != null)
                                                            {
                                                                string imageUrl = GetCachedImageUrl(order.InternalFileOutputPath);

                                                                if (!string.IsNullOrEmpty(imageUrl))
                                                                {
                                                                    <img height="100px" width="100px"
                                                                         @ondblclick="(e) => ShowImagePopup((int)order.Id)"
                                                                         src="@imageUrl">
                                                                }
                                                                else
                                                                {
                                                                    <div class="image-spinner"></div>
                                                                }
                                                            }

                                                        }
                                                        else
                                                        {
                                                            @* <div>
                                                                <img height="100px" width="100px" @ondblclick="(e)=>ShowProductionDoneImagePopup(order)" src="@fileServer.RootFolder/@order.ProductionDoneFilePath?width=200">
                                                            </div> *@

                                                            @if (order.InternalFileInputPath != null)
                                                            {
                                                                string imageUrl = GetCachedImageUrl(order.InternalFileOutputPath);

                                                                if (!string.IsNullOrEmpty(imageUrl))
                                                                {
                                                                    <img height="100px" width="100px"
                                                                         @ondblclick="(e) => ShowImagePopup((int)order.Id)"
                                                                         src="@imageUrl">
                                                                }
                                                                else
                                                                {
                                                                    <div class="image-spinner"></div>
                                                                }
                                                            }

                                                        }
                                                    }
                                                    else
                                                    {
                                                        <span>N/A</span>
                                                    }
                                                </Template>
                                            </RadzenDataGridColumn>
                                        }

                                    }


                                    @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                    {
                                        <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="Status" Title="Status" FilterValue="@filterColorRefStatus" TextAlign="TextAlign.Center" Width="200px" OrderIndex="5">
                                            <FilterTemplate>
                                                <RadzenDropDown @bind-Value=@filterColorRefStatus Style="width:100%;" TextProperty="EnumName" ValueProperty="EnumValue"
                                                                Data="@(internalOrderItemStatusList)" AllowClear="true" />
                                            </FilterTemplate>
                                            <Template Context="order">

                                                @if (order.Status != null)
                                                {
                                                    <span class="badge bg-success">
                                                        @(
                                                            (InternalOrderItemStatus)order.Status
                                                            )
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span>N/A</span>
                                                }
                                            </Template>

                                        </RadzenDataGridColumn>

                                    }

                                    @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                    {
                                        <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileGroup" Title="File Group" FilterValue="@filterColorRefGroup" TextAlign="TextAlign.Center" Width="200px" OrderIndex="6">
                                            <FilterTemplate>
                                                <RadzenDropDown @bind-Value=@filterColorRefGroup Style="width:100%;" TextProperty="EnumName" ValueProperty="EnumValue"
                                                                Data="@(fileGroupCustomEnumList)" AllowClear="true" />
                                            </FilterTemplate>
                                            <Template Context="orderItem">

                                                @if (orderItem.Status != null)
                                                {
                                                    <span class="badge bg-success">
                                                        @(
                                                            (OrderItemFileGroup)orderItem.FileGroup
                                                            )
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span>N/A</span>
                                                }
                                            </Template>

                                        </RadzenDataGridColumn>

                                    }
                                    @if (showImageOnList)
                                    {

                                        <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileByteString" Title="Raw Image" TextAlign="TextAlign.Center" Filterable="false" OrderIndex="7">
                                            <Template Context="order">
                                                <div>

                                                    @* <img height="100px" width="100px" @ondblclick="(e)=>ShowImagePopup((int)order.Id)" src="@fileServer.RootFolder/@order.InternalFileInputPath?width=100">
 *@

                                                    @if (order.InternalFileInputPath != null)
                                                    {
                                                        string imageUrl = GetCachedImageUrl(order.InternalFileInputPath);

                                                        if (!string.IsNullOrEmpty(imageUrl))
                                                        {
                                                            <img height="100px" width="100px"
                                                                 @ondblclick="(e) => ShowImagePopup((int)order.Id)"
                                                                 src="@imageUrl">
                                                        }
                                                        else
                                                        {
                                                            <div class="image-spinner"></div>
                                                        }
                                                    }

                                                </div>
                                            </Template>
                                        </RadzenDataGridColumn>

                                        @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                        {
                                            <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="ProductionFileByteString" Title="ProductionDone Images" TextAlign="TextAlign.Center" Filterable="false" OrderIndex="8">
                                                <Template Context="order">
                                                    @if (order.Status >= (int)InternalOrderItemStatus.ProductionDone)
                                                    {
                                                        if (order.Status >= (int)InternalOrderItemStatus.ReadyToDeliver)
                                                        {

                                                            <div>
                                                                <img height="100px" width="100px" @ondblclick="(e)=>ShowProductionDoneImagePopup(order)" src="@fileServer.RootFolder/@order.InternalFileOutputPath?width=200">
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <div>
                                                                <img height="100px" width="100px" @ondblclick="(e)=>ShowProductionDoneImagePopup(order)" src="@fileServer.RootFolder/@order.ProductionDoneFilePath?width=200">
                                                            </div>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <span>N/A</span>
                                                    }
                                                </Template>
                                            </RadzenDataGridColumn>
                                        }
                                        ////a

                                    }

                                    @if (loginUser.CompanyType == (int)CompanyType.Client)
                                    {
                                        <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="ExternalStatus" Title="Status" FilterValue="@filterColorRefStatus" TextAlign="TextAlign.Center" OrderIndex="9">
                                            <FilterTemplate>
                                                <RadzenDropDown @bind-Value=@filterColorRefStatus Style="width:100%;" TextProperty="EnumName" ValueProperty="EnumValue"
                                                                Data="@(internalOrderItemStatusList)" AllowClear="true" />
                                            </FilterTemplate>
                                            <Template Context="order">
                                                @if (order.ExternalStatus != null)
                                                {
                                                    <span class="badge bg-success">@((ExternalOrderItemStatus)order.ExternalStatus)</span>
                                                }
                                                else
                                                {
                                                    <span>N/A</span>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                    }

                                    <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileSize" Title="Size" TextAlign="TextAlign.Center" Filterable="false" OrderIndex="10">
                                        <Template Context="order">
                                            @if (order.FileSize <= 0 || order.FileSize == null)
                                            {
                                                <span>N/A</span>
                                            }
                                            else
                                            {
                                                <span>@(_genericService.GetSizeStringToHumanReadable(order.FileSize)) </span>
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                    @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                    {
                                        <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="TeamName" Title="Team Name" TextAlign="TextAlign.Center" Filterable="false" OrderIndex="11">
                                            <Template Context="order">
                                                @if (string.IsNullOrEmpty(order.TeamName))
                                                {
                                                    <span>N/A</span>
                                                }
                                                else
                                                {
                                                    <span>@order.TeamName</span>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="EditorName" Title="Editor Name" TextAlign="TextAlign.Center" Filterable="false" OrderIndex="12">
                                            <Template Context="order">
                                                @if (string.IsNullOrEmpty(order.EditorName))
                                                {
                                                    <span>N/A</span>
                                                }
                                                else
                                                {
                                                    <span>@order.EditorName</span>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="OrderAssignDate" Title="Order Assign Date" TextAlign="TextAlign.Center" Filterable="false" OrderIndex="13">
                                            <Template Context="order">
                                                @if (@order.OrderAssignDate == null)
                                                {
                                                    <span>N/A</span>
                                                }
                                                else
                                                {
                                                    <span>@order.OrderAssignDate</span>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                        @if (authState.User.IsInRole(PermissionConstants.Order_QCUploadCompletedFiles))
                                        {
                                            <RadzenDataGridColumn Width="120px" TItem="ClientOrderItemModel" Property="Id" Title="Actions" Filterable="false" Sortable="false" Pickable="false" TextAlign="TextAlign.Center" OrderIndex="14">
                                                <Template Context="orderItem">
                                                    @*@if ( (int)InternalOrderItemStatus.ReadyToDeliver > orderItem.Status)
                                        {*@
                                                    <div class="float-right">
                                                        <button type="button" class="btn btn-sm btn-secondary" @onclick="(e)=>ShowReplacePopup(orderItem)"><span class="fas fa-arrow-circle-down"></span>Replace</button>
                                                    </div>
                                                    @*}*@
                                                </Template>
                                            </RadzenDataGridColumn>
                                        }
                                    }
                                    @if (showActionColumn)
                                    {
                                        <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="Id" Title="Actions" Filterable="false" Sortable="false" Pickable="false" TextAlign="TextAlign.Center" Width="200px" OrderIndex="15">
                                            <Template Context="orderItem">
                                                <AuthorizeView Roles="Order.CanViewOrderItemStatusLog">
                                                    <button class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="(e)=>ViewOrderItemStatusLog((int)orderItem.Id)">
                                                        <i class="fas fa-eye">Status Log</i>
                                                    </button>
                                                </AuthorizeView>
                                            </Template>
                                        </RadzenDataGridColumn>
                                    }

                                </Columns>
                            </RadzenDataGrid>
                        }
                        else
                        {
                            <div class="=" card>
                                No Color Reference Image Exist
                            </div>
                        }
                    </div>
                    <div class="tab-pane" id="feedBackImages" role="tabpanel">


                        <button type="button" class="btn btn-sm btn-secondary mb-3" disabled="@isSubmitting" @onclick="async (e)=>await DownloadRejectedFile(false)"><span class="fas fa-arrow-circle-down"></span> Download Rejected File</button>

                        <RadzenDataGrid @ref="feedbacksGrid" Data="@feedBackImages" IsLoading="isLoading" TItem="ClientOrderItemModel"
                                        AllowFiltering="true" AllowColumnResize="true"
                                        FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowSorting="true" AllowPaging="true" PageSize="12"
                                        PagerHorizontalAlign="HorizontalAlign.Center"
                                        SelectionMode="DataGridSelectionMode.Multiple"
                                        ShowPagingSummary="true" PageSizeOptions="@pageSizeOptions"
                                        AllowRowSelectOnRowClick=@allowRowSelectOnRowClick
                                        @bind-Value="@selectedFeedbackFiles" ColumnWidth="150px" RowRender="@OnRowRender">
                            <Columns>
                                <RadzenDataGridColumn TItem="ClientOrderItemModel" TextAlign="TextAlign.Center" Width="30px" Frozen="true" Sortable="false"
                                                      Filterable="false" Groupable="false" Reorderable="false" Pickable="false">
                                    <HeaderTemplate>
                                        <RadzenCheckBox TriState="false" TValue="bool" Value="@(feedBackImages == null ? false : feedBackImages.Any(i => selectedFeedbackFiles != null && selectedFeedbackFiles.Contains(i)))"
                                                        Change="@(args => selectedFeedbackFiles = args && feedBackImages != null ? feedBackImages.Where(f=> (filterStatus == null || f.Status == filterStatus) && (string.IsNullOrWhiteSpace(filterFileName) ||  f.FileName.Contains(filterFileName, StringComparison.InvariantCultureIgnoreCase))).Skip(feedbacksGrid.CurrentPage * feedbacksGrid.PageSize).Take(feedbacksGrid.PageSize).ToList() : null)" />
                                    </HeaderTemplate>
                                    <Template Context="data">
                                        <RadzenCheckBox TriState="false" Value="@(selectedFeedbackFiles != null && selectedFeedbackFiles.Contains(data))"
                                                        TValue="bool" Change=@(args => { if(!allowRowSelectOnRowClick) { feedbacksGrid.SelectRow(data); }}) />
                                    </Template>
                                </RadzenDataGridColumn>



                                <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileName" Title="File Name" FilterValue="@filterColorRefFileName" SortOrder="SortOrder.Ascending" Resizable="true" Width="250px" OrderIndex="2">
                                    <FilterTemplate>
                                        <RadzenTextBox Class="w-100" @bind-Value="filterColorRefFileName" />
                                        @*<text @bind-Value=@filterStatus Style="width:100%;" TextProperty="EnumName" ValueProperty="EnumValue"
                                        Data="@(internalOrderItemStatusList)" AllowClear="true" />*@
                                    </FilterTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileByteString" Title="FeedBack Images" TextAlign="TextAlign.Center" Filterable="false" OrderIndex="3">
                                    <Template Context="order">
                                        <div>
                                            @*
                                            <img height="100px" width="100px" @ondblclick="(e)=>ShowImagePopup((int)order.Id)" src="@fileServer.RootFolder/@order.InternalFileInputPath?width=100">*@
                                            <img height="100px" width="100px" src="@fileServer.RootFolder/@order.FeedBackImagePath?width=100">
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>
                                @* <RadzenDataGridColumn TItem="ClientOrderItem" OrderIndex=3 Property="RejectedDate" Title="Rejected Date" Resizable="true" TextAlign="TextAlign.Center" Width="150px"></RadzenDataGridColumn>*@

                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (isOrderItemsAssignToEditorPopupVisible)
{
    //Order AssignToEditor

    <AuthorizeView Context="AssignOrderToEditor" Roles="Order.AssignNewOrderItemToEditor">
        <EditForm Model="clientOrderItem" OnValidSubmit="DistributeOrderItemToEditor">

            <div class="modal" tabindex="-1" style="display:block;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        @if (selectedFiles == null || !selectedFiles.Any())
                        {
                            <div class="modal-header">
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAssignOrderItemToEditorPopup"></button>
                            </div>
                            <div class="modal-body">
                                Select at leact One item to assign.
                            </div>
                        }
                        else
                        {
                            <div class="modal-header">
                                <h6>Assign Order to Editor</h6>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAssignOrderItemToEditorPopup"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row" style="margin-bottom:19px;">
                                    <div class="form-group">
                                        <label>Select Editor</label>
                                        <InputSelect @bind-Value="@selectedTeamMemberIdForAssignFiles" class="form-select form-control">
                                            <option value="0">- Select -</option>
                                            @foreach (var teamMember in loginUserTeamMembers)
                                            {
                                                <option value="@((int)teamMember.ContactId)">@teamMember.FirstName @teamMember.EmployeeId</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="row" style="max-height: 300px;overflow: auto;">
                                    <div class="col-lg-12">
                                        <RadzenDataGrid Data="@selectedFiles" TItem="ClientOrderItemModel"
                                                        SelectionMode="DataGridSelectionMode.Multiple">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileName" Title="FileName" TextAlign="TextAlign.Left" Width="250px" />
                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileSize" Title="Size" Width="70px">
                                                    <Template Context="orderItem">
                                                        @if (orderItem.FileSize <= 0 || orderItem.FileSize == null)
                                                        {
                                                            <span>N/A</span>
                                                        }
                                                        else
                                                        {
                                                            <span>@(orderItem.FileSize * 0.001) KB</span>
                                                        }
                                                    </Template>
                                                </RadzenDataGridColumn>
                                                @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                                {
                                                    <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="Status" Title="Status" TextAlign="TextAlign.Center">

                                                        <Template Context="order">

                                                            @if (order.Status != null)
                                                            {
                                                                <span class="badge bg-success">@((InternalOrderItemStatus)order.Status)</span>
                                                            }
                                                            else
                                                            {
                                                                <span>N/A</span>
                                                            }
                                                        </Template>

                                                    </RadzenDataGridColumn>
                                                }
                                            </Columns>
                                        </RadzenDataGrid>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary" disabled="@isAssignOrderSubmitting">Assign Images To Editor</button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </EditForm>
    </AuthorizeView>
}

@if (isNewTeamAssignToOrderVisible)
{
    <AuthorizeView Context="AssignOrderToTeam" Roles="Order.AssignNewOrderToTeam">
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAssignNewTeamForOrderPopup"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="team" OnValidSubmit="GiveAnotherTeamSupportPermissionForAOrder">
                            <label for="Teams" class="col-sm-4 col-form-label fw-bold">Teams</label>
                            <RadzenDropDown Multiple="true" Chips="true" MaxSelectedLabels="20" Data=@teams @bind-Value=@selectedCompanyDedicatedTeams
                                            Placeholder="Select Team..." TextProperty="Name" ValueProperty="Id" Class="w-100" />
                            @*	<TeamCheckBoxList teams="teams" OnAssignedTeam="OnAssignedTeam" selectedTeams="selectedCompanyDedicatedTeams"></TeamCheckBoxList>*@
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary" disabled="@isAssignOrderSubmitting">Save Changes</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </AuthorizeView>
}

@if (isAssignItemToTeamPopupVisible)
{
    <AuthorizeView Context="AssignNewOrderItemToTeam" Roles="Order.AssignNewOrderItemToTeam">
        <EditForm Model="clientOrderItem" OnValidSubmit="InsertAssingOrderItemToTeam">

            <div class="modal" tabindex="-1" style="display:block;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        @if (selectedFiles?.Count() == 0)
                        {
                            <div class="modal-header">
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAssignItemToTeamPopup"></button>
                            </div>
                            <div class="modal-body">
                                Please select at leact One order to assign
                            </div>
                        }
                        else
                        {
                            <div class="modal-header">
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAssignItemToTeamPopup"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <label for="teamName" class="col-sm-4 col-form-label fw-bold">Team Name</label>
                                    <div class="col-sm-8">
                                        <InputSelect @bind-Value="@newTeamId" class="form-select">
                                            <option value="0">- Select -</option>
                                            @foreach (var team in teams)
                                            {
                                                <option value="@((int)team.Id)">@team.Name</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="row" style="max-height: 300px;overflow: auto;">
                                    <div class="col-lg-12 mt-2">
                                        <RadzenDataGrid Data="@selectedFiles" TItem="ClientOrderItemModel"
                                                        SelectionMode="DataGridSelectionMode.Multiple">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileName" Title="FileName" TextAlign="TextAlign.Left" Width="250px" />
                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileSize" Title="Size" Width="60px">
                                                    <Template Context="orderItem">
                                                        @if (orderItem.FileSize <= 0 || orderItem.FileSize == null)
                                                        {
                                                            <span>N/A</span>
                                                        }
                                                        else
                                                        {
                                                            <span>@(orderItem.FileSize * 0.001) KB</span>
                                                        }
                                                    </Template>
                                                </RadzenDataGridColumn>

                                            </Columns>
                                        </RadzenDataGrid>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary" disabled="@isAssignOrderSubmitting">Assign Images To Team</button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </EditForm>
    </AuthorizeView>
}
@if (isReplaceInQcFilesPopupVisible)
{
    @*<AuthorizeView Context="AssignNewOrderItemToTeam" Roles="Order.AssignNewOrderItemToTeam">*@
    <EditForm Model="clientOrderItem" OnValidSubmit="UploadReplaceFiles">

        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 style="padding-left:172px">Replace In QC Files</h5>
                    </div>
                    <div class="row">
                        <div class="col-lg-8">
                            <div class="card">
                                <div class="card-body">
                                    <DataAnnotationsValidator />
                                    <div>
                                        <div class="mb-3">
                                            <input class="form-control" value="clientOrderItem" type="hidden" />
                                        </div>
                                        <div>
                                            <InputFile OnChange="@LoadMultipleFielsForReplaceByQC" />

                                        </div>
                                        @if (progressBarCurrentValue > 0)
                                        {
                                            <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Secondary" Value="progressBarCurrentValue" Max="100" />
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <div class="mb-3 mt-3">
                            <button type="submit" class="btn btn-primary me-2" disabled="@isSubmitting">Replace</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseReplacePopup">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
    @*	</AuthorizeView>*@
}
@if (isShowImagePopup)
{
    <EditForm Model="clientOrderItem">
        <div class="modal" id="preview-modal1" tabindex="-1" style="display:block;">
            <div class="modal-dialog" style="display: flex; justify-content: center; max-width:700px">

                <div class="modal-content text-center" style="width:900px;">

                    <div class="modal-header">
                        <h5 class="modal-title">
                            @clientOrderItem.FileName (@clientOrderItem.ExternalStatus)
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseImagePopup"></button>
                    </div>

                    <div class="card" style="margin-bottom:0px">
                        <div class="card-body">
                            @* <input type="hidden" value="@order.Id" id="selectedOrderId" /> *@
                            <DataAnnotationsValidator />



                            <div class="mb-2" style="max-height: 750px; overflow-y: scroll;">
                                @*  <div>
                            <span>Choose Color</span>
                            <span class="btn btn-sm btn-primary" style="float:right" onclick="fullScreen()"><i class="fa fa-expand" aria-hidden="true"></i></span>
                            <span class="btn btn-sm btn-primary" style="float:right; margin-right:10px;" onclick="clearCanvas()">Clear </span>
                            <span class="btn btn-sm btn-primary" style="float:right; margin-right:10px;" onclick="writeTextOnCanvas()">Text </span>
                            <span class="btn btn-sm btn-primary" style="float:right; margin-right:10px;" onclick="paintOnCanvas()">Paint </span>
                            <span class="btn btn-sm btn-primary" style="float:right; margin-right:10px;" onclick="undo()">Undo </span>
                            </div> *@
                                @* <canvas id="markupCanvas" width="800" height="100" style="border:1px solid;margin:0px;padding:0px; max-width:800px"></canvas> *@

                                @*  @if (IsValidFileExtensionForConvert(clientOrderItem.InternalFileInputPath, true))
                            {
                            <img src="@clientOrderItem.AttachmentFileByteStrings" style="width:100%" />
                            }
                            else
                            {
                            <img src="@fileServer.RootFolder/@clientOrderItem.InternalFileInputPath?width=600" style="width:100%" />
                            } *@

                                @if (clientOrderItem.InternalFileInputPath != null)
                                {
                                    string imageUrl = GetCachedImageUrl(clientOrderItem.InternalFileInputPath);

                                    if (!string.IsNullOrEmpty(imageUrl))
                                    {
                                        <img style="width:100%"
                                             @ondblclick="(e) => ShowImagePopup((int)clientOrderItem.Id)"
                                             src="@imageUrl">
                                    }
                                    else
                                    {
                                        <div class="image-spinner"></div>
                                    }
                                }

                            </div>
                            <div class="mt-3">
                                @if (@clientOrderItem.Status >= (byte)InternalOrderItemStatus.ReadyToDeliver)
                                {
                                    <button class="btn btn-sm btn-success btn-space" @onclick="(e)=>ShowImagePopup((int)clientOrderItem.Id)" disabled="@isRawBtnClicked"><span class="fas fa-angle-double-left"></span> Raw </button>
                                }

                                @if (authState.User.IsInRole(PermissionConstants.OrderItem_CanApprovedByQC))
                                {
                                    <button class="btn btn-sm btn-success btn-space" @onclick="(e)=>UpdateOrderItemByQc(InternalOrderItemStatus.ReadyToDeliver,(int)clientOrderItem.Id)"><span class="fas fa-solid fa-check"></span> Approve</button>
                                    <button class="btn btn-sm btn-danger btn-space" @onclick="(e)=>Reject(InternalOrderItemStatus.ReworkDistributed,(int)clientOrderItem.Id)"><span class="fas fa-ban"></span> Reject</button>
                                    <button type="button" class="btn btn-sm btn btn-secondary btn-space" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseImagePopup">Close</button>
                                }
                                else
                                {
                                    if (@clientOrderItem.Status >= (byte)InternalOrderItemStatus.ReadyToDeliver)
                                    {
                                        <button class="btn btn-sm btn-secondary btn-space" @onclick="(e)=>PreviousImageShow(clientOrderItem)"><span class="fas fa-angle-double-left"></span> Previous</button>
                                        @*<button type="button" class="btn btn-sm btn btn-secondary btn-space" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseImagePopup">Close</button>*@
                                        <button type="button" class="btn btn-sm btn btn-secondary btn-space" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="(e)=>NextImageShow(clientOrderItem)">Next <span class="fas fa-angle-double-right"></span></button>
                                        <button class="btn btn-sm btn-success btn-space" @onclick="(e)=>ShowProductionDoneImagePopup(clientOrderItem)" disabled="@isCompletedBtnClicked"><span class="fas fa-angle-double-left"></span> Completed </button>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>

}


@if (isOrderAttachmentEditPopupVisible)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 style="padding-left:172px">Add Order Attachment(s)</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAttachmentEditPopUp"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3 mt-3">
                        <label for="Name" class="fw-bold">Select Attachment(s)</label>
                        <InputFile class="form-control" OnChange="OrderAttachmentsUpload" multiple></InputFile>
                    </div>
                </div>
                @if (isProgressBar)
                {
                    @if (CurrentValueForEditOrderAttachementPregressbar > 0)
                    {
                        <div class="row">
                            <div class="col-lg-10" style="margin-left: 33px;margin-bottom: 37px">
                                <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Secondary" Value="CurrentValueForEditOrderAttachementPregressbar" Max="100" Style="margin-top:20px;background-color:aquamarine" />
                            </div>
                        </div>
                    }
                }
                @if (orderAttachmentListForView != null)
                {
                    <div class="mt-2" style="max-height:250px; overflow:auto;margin-left:11px">
                        <table class="table table-bordered table-sm">
                            @foreach (var item in orderAttachmentListForView)
                            {
                                <tr>
                                    <td>
                                        @item.FileName
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-tbl-action text-danger" @onclick="() => DeleteAttachImagesOnPreview(item)">
                                            <span class="fas fa-times"></span>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
}

@if (isOrderItemAddPopupVisible)
{
    <EditForm Model=@order>
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 style="padding-left:172px">Add Order Item(s)</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseItemAddPopUp">
                        </button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <div>

                            <div class="mb-3">
                                <label class="d-block mb-3 required-field">Select Upload Option</label>

                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" @onclick="ShowFolderUploadControlForOrderItems" type="radio" name="outer-group[0][inlineRadioOptions]" id="inlineRadio1" value="option1" disabled="@isUploadInputDisabled">
                                    <label class="form-check-label" for="inlineRadio1">Folder Upload</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" @onclick="ShowFileUploadControlForOrderItems" type="radio" name="outer-group[0][inlineRadioOptions]" id="inlineRadio2" checked="1" value="option2" disabled="@isUploadInputDisabled">
                                    <label class="form-check-label" for="inlineRadio2">File Upload</label>
                                </div>
                            </div>
                            <div>
                                <div class="fallback">
                                    @if (allowFolderUploadForOrder)
                                    {
                                        @:Folder
                                        <InputFile id="editOrderFileItem" OnChange="@LoadOrderItemFolder" webkitdirectory directory multiple disabled="@isUploadInputDisabled" />
                                    }
                                    else
                                    {
                                        @:Files
                                        <InputFile OnChange="@LoadOrderItemFile" multiple disabled="@isUploadInputDisabled" />
                                    }
                                </div>

                                @if (isProgressBar)
                                {
                                    @if (CurrentValueForEditOrderItemPregressbar > 0)
                                    {
                                        <div class="row">
                                            <div class="col-lg-10">
                                                <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Secondary" Value="CurrentValueForEditOrderItemPregressbar" Max="100" Style="margin-top:20px;background-color:aquamarine" />
                                            </div>
                                            <div class="col-lg-2 mt-3">
                                                <button type="button" class="btn btn-danger btn-sm btn-rounded" @onclick="UploadCancelOrderItem">Cancel Upload</button>
                                            </div>
                                        </div>
                                    }
                                }
                                @if (order.orderItems != null)
                                {
                                    <div class="mt-2" style="max-height:250px; overflow:auto;">
                                        <table class="table table-bordered table-sm">

                                            @foreach (var item in order.orderItems)
                                            {
                                                <tr>
                                                    <td>
                                                        @if (!string.IsNullOrEmpty(item.InternalFileInputPath))
                                                        {
                                                            string[] paths = item.InternalFileInputPath.Split(new[] { order.OrderNumber }, StringSplitOptions.None);
                                                            @paths[1].Trim('/')
                                                        }
                                                        else
                                                        {
                                                            @item.FileName
                                                        }
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-sm btn-tbl-action text-danger" @onclick="() => DeleteImagesOnPreview((int)item.Id,item.ObjectId)">
                                                            <span class="fas fa-times"></span>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </table>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@if (isOrderItemChangeLogPopupVisible)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog" style="max-width:631px !important">
            <div class="modal-content">
                <div class="modal-header">
                    <h5>Order Item Log</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseOrderItemChangeLogPopup"></button>
                </div>
                <div class="modal-body">
                    @if (orderItemStatusChangeLogs.Count > 0)
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Status</th>
                                    <th>Time Duration In Mintues</th>
                                    <th>Change By</th>
                                    @* <th>Employee Id</th>*@
                                    <th>Change Date</th>

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var orderItemStatus in orderItemStatusChangeLogs)
                                {
                                    <tr>
                                        <td>@((InternalOrderItemStatus)orderItemStatus.NewInternalStatus)</td>
                                        <td>@orderItemStatus.TimeDurationInMinutes</td>
                                        <td>@(orderItemStatus.ChangeByFullName ?? "N/A")</td>
                                        @* <td>@(orderItemStatus.EmployeeId ?? "N/A")</td>*@
                                        <td>@orderItemStatus.ChangeDate</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <p style="padding-left:147px">Total : <span style="font-weight:bold">@orderItemStatusChangeLogs.Sum(f => f.TimeDurationInMinutes) Minutes</span></p>
                    }
                    else
                    {
                        <p>No Log Available</p>
                    }
                </div>
            </div>

        </div>
    </div>
}

@if (isShowProductionDoneImagePopup)
{
    <EditForm Model="clientOrderItem">
        <div class="modal" id="preview-modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog" style="display:flex;justify-content:center; align-content:center">
                <div class="modal-content text-center" style="width:900px">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            @clientOrderItem.FileName (@((ExternalOrderItemStatus)clientOrderItem.ExternalStatus))
                        </h5>
                        <button type="button" class="btn-close" id="closeButton" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseProductionDoneImagePopup"></button>
                    </div>
                    <div class="modal-body">



                        <DataAnnotationsValidator />
                        @if (clientOrderItem.Status >= (int)InternalOrderItemStatus.ReadyToDeliver)
                        {

                            <div class="">
                                @* <img src="@fileServer.RootFolder/@clientOrderItem.InternalFileOutputPath?width=600" /> *@
                                <input type="hidden" value="@order.Id" id="selectedOrderId" />
                                <input type="hidden" value="@clientOrderItem.Id" id="selectedOrderItemId" />
                                <input type="hidden" value="@loginUser.ContactId" id="selectedContactId" />
                                <div style="margin-right:0px;">
                                    <span class="btn btn-sm btn-primary" style="float:right" onclick="fullScreen()"><i class="fa fa-expand" aria-hidden="true"></i></span>
                                    <span class="btn btn-sm btn-primary" style="float:right; margin-right:10px;" onclick="clearCanvas()">Clear </span>
                                    <span class="btn btn-sm btn-primary" style="float:right; margin-right:10px;" onclick="writeTextOnCanvas()">Text </span>
                                    <span class="btn btn-sm btn-primary" style="float:right; margin-right:10px;" onclick="paintOnCanvas()">Paint </span>
                                    <span class="btn btn-sm btn-primary" style="float:right; margin-right:10px;" onclick="undo()">Undo </span>
                                </div>

                                <div style="max-height:750px;width:100%;overflow-y:scroll;margin-top:10px">
                                    <canvas id="markupCanvas" width="800" height="100" style="margin:0px;padding:0px; max-width:700px;margin-top:10px"></canvas>
                                </div>

                                @* <img src="@fileServer.RootFolder/@clientOrderItem.InternalFileInputPath?width=600" /> *@

                            </div>

                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(clientOrderItem.ProductionDoneFilePath))
                            {
                                <div class="">
                                    <img src="@fileServer.RootFolder/@clientOrderItem.ProductionDoneFilePath?width=600" />
                                </div>
                            }
                            else
                            {
                                <div class="">
                                    <p>N/A</p>
                                </div>
                            }
                        }
                        <div class="mt-3">

                            <button class="btn btn-sm btn-success btn-space" @onclick="(e)=>ShowImagePopup((int)clientOrderItem.Id)" disabled="@isRawBtnClicked"><span class="fas fa-angle-double-left"></span> Raw</button>

                            @if (loginUser.CompanyType == (int)CompanyType.Admin)
                            {
                                <button class="btn btn-sm btn-success btn-space" @onclick="(e)=>PreviousImageShow(clientOrderItem)"><span class="fas fa-angle-double-left"></span> Previous</button>

                            }


                            @if (authState.User.IsInRole(PermissionConstants.OrderItem_CanApprovedByQC))
                            {

                                @if (clientOrderItem.Status < (int)InternalOrderItemStatus.ReadyToDeliver)
                                {
                                    <button class="btn btn-sm btn-success btn-space" @onclick="(e)=>ApprovedQCForPopupView(InternalOrderItemStatus.ReadyToDeliver,(int)clientOrderItem.Id)"><span class="fas fa-solid fa-check"></span> Approve</button>
                                    <button class="btn btn-sm btn-danger btn-space" @onclick="(e)=>RejectFromPopupView(InternalOrderItemStatus.ReworkDistributed,(int)clientOrderItem.Id)"><span class="fas fa-ban"></span> Reject</button>
                                }
                                <button type="button" class="btn btn-sm btn btn-secondary btn-space" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseProductionDoneImagePopup">Close</button>
                                <button type="button" class="btn btn-sm btn btn-secondary btn-space" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="(e)=>NextImageShow(clientOrderItem)">Next <span class="fas fa-angle-double-right"></span></button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-secondary btn-space" @onclick="(e)=>ClientPreviousImageShow(clientOrderItem)"><span class="fas fa-angle-double-left"></span> Previous</button>
                                <button class="btn btn-sm btn-success btn-space" @onclick="(e)=>ApprovedQCForPopupView(InternalOrderItemStatus.ReadyToDeliver,(int)clientOrderItem.Id)"><span class="fas fa-solid fa-check"></span> Approve</button>

                                <button type="button" class="btn btn-sm btn btn-danger btn-space" id="bntmarkandreject">Reject</button>
                                @*  <button type="button" class="btn btn-sm btn btn-secondary btn-space" id="closeButton" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseProductionDoneImagePopup">Close</button>*@
                                <button type="button" class="btn btn-sm btn btn-secondary btn-space" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="(e)=>ClientNextImageShow(clientOrderItem)">Next <span class="fas fa-angle-double-right"></span></button>
                                <button class="btn btn-sm btn-success btn-space" @onclick="(e)=>ShowProductionDoneImagePopup(clientOrderItem)" disabled="@isCompletedBtnClicked"><span class="fas fa-angle-double-left"></span> Completed</button>
                            }
                        </div>



                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@if (orderSOPTemplateUploadUpdatePopup)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 style="padding-left:172px">Add Order SOP</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAttachmentEditPopUp"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3 mt-3">
                        <label for="Name" class="fw-bold">Select Ordered SOP</label>
                        <InputFile id="OrderSOPUploadUpdatedFile" OnChange="@LoadOrderSOPFolder" webkitdirectory directory multiple disabled="@isOrderSOPUploadInputDisabled" />
                    </div>
                </div>
                @if (isProgressBar)
                {
                    @if (CurrentValueForEditOrderAttachementPregressbar > 0)
                    {
                        <div class="row">
                            <div class="col-lg-10" style="margin-left: 33px;margin-bottom: 37px">
                                <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Secondary" Value="CurrentValueForEditOrderAttachementPregressbar" Max="100" Style="margin-top:20px;background-color:aquamarine" />
                            </div>
                        </div>
                    }
                }
                @if (orderAttachmentListForView != null)
                {
                    <div class="mt-2" style="max-height:250px; overflow:auto;margin-left:11px">
                        <table class="table table-bordered table-sm">
                            @foreach (var item in orderAttachmentListForView)
                            {
                                <tr>
                                    <td>
                                        @item.FileName
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-tbl-action text-danger" @onclick="() => DeleteAttachImagesOnPreview(item)">
                                            <span class="fas fa-times"></span>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
}
@if (isOrderFileAddPopupVisible)
{
    <EditForm Model=@order>
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 style="padding-left:172px">Add Order Item(s)</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="cloaseAdditionalFileUploadModal">
                        </button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <div>
                            <div>
                                <div class="fallback">
                                    <label>Select folder with file for upoad existing order. </label>
                                    <InputFile id="editOrderFileItem" OnChange="@LoadOrderFileFolder" webkitdirectory directory multiple disabled="@isUploadInputDisabled" />
                                </div>

                                @if (isProgressBar)
                                {
                                    @if (CurrentValueForEditOrderItemPregressbar > 0)
                                    {
                                        <div class="row">
                                            <div class="col-lg-10">
                                                <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Secondary" Value="CurrentValueForEditOrderItemPregressbar" Max="100" Style="margin-top:20px;background-color:aquamarine" />
                                            </div>
                                            <div class="col-lg-2 mt-3">
                                                <button type="button" class="btn btn-danger btn-sm btn-rounded" @onclick="UploadCancelOrderItem">Cancel Upload</button>
                                            </div>
                                        </div>
                                    }
                                }
                                @if (order.orderItems != null)
                                {
                                    <div class="mt-2" style="max-height:250px; overflow:auto;">
                                        <table class="table table-bordered table-sm">

                                            @foreach (var item in order.orderItems)
                                            {
                                                <tr>
                                                    <td>
                                                        @if (!string.IsNullOrEmpty(item.InternalFileInputPath))
                                                        {
                                                            string[] paths = item.InternalFileInputPath.Split(new[] { order.OrderNumber }, StringSplitOptions.None);
                                                            @paths[1].Trim('/')
                                                        }
                                                        else
                                                        {
                                                            @item.FileName
                                                        }
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-sm btn-tbl-action text-danger" @onclick="() => DeleteImagesOnPreview((int)item.Id,item.ObjectId)">
                                                            <span class="fas fa-times"></span>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </table>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@if (isSetOrderItemTypePopupVisible)
{
    <EditForm Model="clientOrderItem" OnValidSubmit="UpdateOrderItemFileType">
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    @if (selectedFiles == null || !selectedFiles.Any())
                    {
                        <div class="modal-header">
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseSetOrderItemTypePopup"></button>
                        </div>
                        <div class="modal-body">
                            Select at leact One item to assign.
                        </div>
                    }
                    else
                    {
                        <div class="modal-header">
                            <h6>Set Order Item Type</h6>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseSetOrderItemTypePopup"></button>
                        </div>
                        <div class="modal-body">
                            <div class="row" style="margin-bottom:19px;">
                                <div class="form-group">
                                    <label>Select Order Item Type</label>
                                    <InputSelect @bind-Value="@selectedOrderItemGroup" class="form-select form-control">
                                        <option value="0">- Select -</option>
                                        @foreach (var fileGroupCustomEnum in fileGroupCustomEnumList)
                                        {
                                            <option value="@((int)@fileGroupCustomEnum.EnumValue)">@fileGroupCustomEnum.EnumName</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="row" style="max-height: 300px;overflow: auto;">
                                <div class="col-lg-12">
                                    <RadzenDataGrid Data="@selectedFiles" TItem="ClientOrderItemModel"
                                                    SelectionMode="DataGridSelectionMode.Multiple">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileName" Title="FileName" TextAlign="TextAlign.Left" Width="150px" />
                                            <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="Status" Title="Status" TextAlign="TextAlign.Center" Width="100px">

                                                <Template Context="order">

                                                    @if (order.Status != null)
                                                    {
                                                        <span class="badge bg-success">@((InternalOrderItemStatus)order.Status)</span>
                                                    }
                                                    else
                                                    {
                                                        <span>N/A</span>
                                                    }
                                                </Template>

                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileGroup" Title="File Group" FilterValue="@filterGroup" TextAlign="TextAlign.Center" Width="100px">
                                                <Template Context="orderItem">

                                                    @if (orderItem.Status != null)
                                                    {
                                                        <span class="badge bg-success">
                                                            @(
                                                                (OrderItemFileGroup)orderItem.FileGroup
                                                                )
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        <span>N/A</span>
                                                    }
                                                </Template>

                                            </RadzenDataGridColumn>
                                        </Columns>
                                    </RadzenDataGrid>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary" disabled="@isAssignOrderSubmitting">Update OrderItem FileType</button>
                        </div>
                    }

                </div>
            </div>
        </div>
    </EditForm>
}
@if (isBackSetOrderItemTypePopupVisible)
{
    <EditForm Model="clientOrderItem" OnValidSubmit="BackUpdateOrderItemFileType">
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    @if (selectedColorRefFiles == null || !selectedColorRefFiles.Any())
                    {
                        <div class="modal-header">
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseBackSetOrderItemTypePopup"></button>
                        </div>
                        <div class="modal-body">
                            Select at leact One item to assign.
                        </div>
                    }
                    else
                    {
                        <div class="modal-header">
                            <h6>Set Order Item Type</h6>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseBackSetOrderItemTypePopup"></button>
                        </div>
                        <div class="modal-body">
                            <div class="row" style="margin-bottom:19px;">
                                <div class="form-group">
                                    <label>Select Order Item Type</label>
                                    <InputSelect @bind-Value="@selectedOrderItemGroup" class="form-select form-control">
                                        <option value="0">- Select -</option>
                                        @foreach (var fileGroupCustomEnum in fileGroupCustomEnumList)
                                        {
                                            <option value="@((int)@fileGroupCustomEnum.EnumValue)">@fileGroupCustomEnum.EnumName</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="row" style="max-height: 300px;overflow: auto;">
                                <div class="col-lg-12">
                                    <RadzenDataGrid Data="@selectedColorRefFiles" TItem="ClientOrderItemModel"
                                                    SelectionMode="DataGridSelectionMode.Multiple">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileName" Title="FileName" TextAlign="TextAlign.Left" Width="150px" />
                                            <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="Status" Title="Status" TextAlign="TextAlign.Center" Width="100px">

                                                <Template Context="order">

                                                    @if (order.Status != null)
                                                    {
                                                        <span class="badge bg-success">@((InternalOrderItemStatus)order.Status)</span>
                                                    }
                                                    else
                                                    {
                                                        <span>N/A</span>
                                                    }
                                                </Template>

                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileGroup" Title="File Group" FilterValue="@filterGroup" TextAlign="TextAlign.Center" Width="100px">
                                                <Template Context="orderItem">

                                                    @if (orderItem.Status != null)
                                                    {
                                                        <span class="badge bg-success">
                                                            @(
                                                                (OrderItemFileGroup)orderItem.FileGroup
                                                                )
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        <span>N/A</span>
                                                    }
                                                </Template>

                                            </RadzenDataGridColumn>
                                        </Columns>
                                    </RadzenDataGrid>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary" disabled="@isAssignOrderSubmitting">Update OrderItem FileType</button>
                        </div>
                    }

                </div>
            </div>
        </div>
    </EditForm>
}
@if (isOrderItemAcitivityLogPopupVisible)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5>Activity Log</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseOrderItemActivityLogPopup"></button>
                </div>
                <div class="modal-body">
                    <div class="col-lg-12">
                        <div class="card">
                            <div class="card-body">
                                <h4>Activities</h4>
                                <hr />
                                @foreach (var acitivityLog in activityLogs)
                                {
                                    <p>@acitivityLog.Description</p>
                                    <hr>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
}


@if (isOrderItemExpectedDeliveryDatePopupVisible)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Update Order Item Deadline Date</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseExpectedDeliveryDatePopup"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="deadLineUpdateOrderItem">
                        <div class="row">
                            <div class="mb-2 row">
                                <label for="Host" class="col-sm-4 col-form-label fw-bold">Order Item Deadline Date</label>
                                <div class="col-sm-8">
                                    <input type="datetime-local" @bind="OrderImageExpectedDeliveryDate" />
                                    @* <ValidationMessage For="@(() => ClientOrder.DeliveryDeadlineInMinute)" />*@
                                </div>
                            </div>
                            <div class="col">
                            </div>
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-sm btn-success btn-space" type="submit" @onclick="(e)=>UpdateExpectedDeliveryDate(deadLineUpdateOrderItem)"><span class="fas fa-solid fa-check"></span> Submit</button>
                </div>
            </div>
        </div>
    </div>
}


@if (isOrderItemCategorySetUpPopupVisible)
{
    <EditForm Model="orderItemWiseCategory" OnValidSubmit="SetOrderItemCategory">
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">

                    @if (selectedFiles == null || !selectedFiles.Any())
                    {
                        <div class="modal-header">
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CancelCategorySetUpPopup"></button>
                        </div>
                        <div class="modal-body">
                            Select at least One item to Set Category.
                        </div>
                    }
                    else
                    {
                        <div class="modal-header">
                            <h6>Set Up Category For Order Item</h6>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CancelCategorySetUpPopup"></button>
                        </div>
                        <div class="modal-body">
                            <div class="modal-body">
                                <div class="row" style="margin-bottom:19px;">
                                    <div class="form-group">
                                        <label>Select Category</label>
                                        <InputSelect @bind-Value="@orderItemWiseCategory.CategoryId" class="form-select form-control">
                                            <option value="0">- Select -</option>
                                            @foreach (var commonCategory in commonCategories)
                                            {
                                                <option value="@((int)commonCategory.Id)">@commonCategory.CategoryName</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="row" style="max-height: 300px;overflow: auto;">
                                    <div class="col-lg-12">
                                        <RadzenDataGrid Data="@selectedFiles" TItem="ClientOrderItemModel"
                                                        SelectionMode="DataGridSelectionMode.Multiple">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileName" Title="FileName" TextAlign="TextAlign.Left" Width="250px" />
                                                <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="FileSize" Title="Size" Width="70px">
                                                    <Template Context="orderItem">
                                                        @if (orderItem.FileSize <= 0 || orderItem.FileSize == null)
                                                        {
                                                            <span>N/A</span>
                                                        }
                                                        else
                                                        {
                                                            <span>@(orderItem.FileSize * 0.001) KB</span>
                                                        }
                                                    </Template>
                                                </RadzenDataGridColumn>
                                                @if (loginUser.CompanyType == (int)CompanyType.Admin)
                                                {
                                                    <RadzenDataGridColumn TItem="ClientOrderItemModel" Property="Status" Title="Status" TextAlign="TextAlign.Center">

                                                        <Template Context="order">

                                                            @if (order.Status != null)
                                                            {
                                                                <span class="badge bg-success">@((InternalOrderItemStatus)order.Status)</span>
                                                            }
                                                            else
                                                            {
                                                                <span>N/A</span>
                                                            }
                                                        </Template>

                                                    </RadzenDataGridColumn>
                                                }
                                            </Columns>
                                        </RadzenDataGrid>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary" disabled="@isAssignOrderSubmitting">Set Category</button>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </EditForm>
}

@code {

    private List<long> selectedItemFromFolderStructure = new List<long>();

    public async Task OnOrderItemClick(MouseEventArgs args, long orderItemId)
    {
        if (selectedFiles == null)
        {
            selectedFiles = new List<ClientOrderItemModel>();
        }

        if (args.CtrlKey)
        {
            if (selectedItemFromFolderStructure.Contains(orderItemId))
            {
                selectedItemFromFolderStructure.Remove(orderItemId);
                var itemToRemove = selectedFiles.FirstOrDefault(orderItem => orderItem.Id == orderItemId);
                if (itemToRemove != null && selectedFiles != null)
                {
                    selectedFiles.Remove(itemToRemove);
                }
            }
            else
            {
                @if (selectedFiles != null)
                {
                    var orderItem = clientOrderItems.Where(orderItem => orderItem.Id == orderItemId).FirstOrDefault();
                    selectedFiles.Add(orderItem);
                    selectedItemFromFolderStructure.Add(orderItemId);
                }
            }
        }
        else
        {
            selectedItemFromFolderStructure.Clear();
        }

    }

    public async Task OnMouseDown(MouseEventArgs args, long orderItemId)
    {
        if (args.CtrlKey)
        {
            Console.WriteLine($"OnMouseDowns: {selectedFiles.Count}");
            await OnOrderItemClick(args, orderItemId);
        }
    }

    public async Task OnMouseMove(MouseEventArgs args, long orderItemId)
    {
        if (args.CtrlKey)
        {
            if (!selectedItemFromFolderStructure.Contains(orderItemId))
            {
                Console.WriteLine($"OnMouseMove: {selectedFiles.Count}");
                await OnOrderItemClick(args, orderItemId);
            }
        }
    }

    public void MakeOrderItemUnselected(MouseEventArgs args = null)
    {
        if (args == null || !args.CtrlKey)
        {
            selectedFiles = new List<ClientOrderItemModel>();
            selectedItemFromFolderStructure = new List<long>();
        }
    }

    //private Dictionary<string, string> imageCache = new Dictionary<string, string>();
    //private Dictionary<string, bool> loadingImages = new Dictionary<string, bool>();

    // private string GetCachedImageUrl(string internalFileInputPath)
    // {
    //     if(internalFileInputPath != null)
    //     {
    //         if (!imageCache.TryGetValue(internalFileInputPath, out var imageUrl) || string.IsNullOrEmpty(imageUrl))
    //         {
    //             if (!loadingImages.ContainsKey(internalFileInputPath))
    //             {
    //                 loadingImages[internalFileInputPath] = true;

    //                 Task.Run(() =>
    //                 {
    //                     var loadedUrl = _fileViewApiService.ConvertedFileAndGetOutputUrl(internalFileInputPath);
    //                     imageCache[internalFileInputPath] = loadedUrl;
    //                     loadingImages[internalFileInputPath] = false;
    //                     InvokeAsync(StateHasChanged);
    //                 });
    //             }
    //             return "";
    //         }

    //         return imageUrl;
    //     }

    //     return "";

    // }

    private string GetCachedImageUrl(string internalFileInputPath,int width=500,int height=500)
    {
        if (string.IsNullOrEmpty(internalFileInputPath))
            return "";

        string cacheKey = $"image_{internalFileInputPath}";

        if (_memoryCache.TryGetValue(cacheKey, out string imageUrl) && !string.IsNullOrEmpty(imageUrl))
        {
            return imageUrl;
        }

        if (!_memoryCache.TryGetValue($"loading_{internalFileInputPath}", out bool isLoading) || !isLoading)
        {
            _memoryCache.Set($"loading_{internalFileInputPath}", true);

            Task.Run(() =>
            {
                var loadedUrl = _fileViewApiService.ConvertedFileAndGetOutputUrl(internalFileInputPath, fileServer, width, height);

                var cacheEntryOptions = new MemoryCacheEntryOptions
                    {
                        AbsoluteExpirationRelativeToNow = TimeSpan.FromDays(2)
                    };

                _memoryCache.Set(cacheKey, loadedUrl, cacheEntryOptions);
                _memoryCache.Set($"loading_{internalFileInputPath}", false);
                InvokeAsync(StateHasChanged);
            });
        }

        return "";
    }


}



