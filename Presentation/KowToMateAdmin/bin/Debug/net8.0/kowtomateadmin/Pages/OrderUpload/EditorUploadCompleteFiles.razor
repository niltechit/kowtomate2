@page "/UploadCompleteFiles/{objectId}"
@using CutOutWiz.Core
@using CutOutWiz.Core.Utilities
@using CutOutWiz.Services.Managers.Common
@using CutOutWiz.Services.Models.ClientOrders
@using CutOutWiz.Services.Models.Common
@using CutOutWiz.Services.Models.OrderAndOrderItemStatusChangeLog
@using CutOutWiz.Services.Models.OrderAssignedImageEditors;
@using CutOutWiz.Services.Models.Security
@using CutOutWiz.Services.ClientOrders
@using CutOutWiz.Services.Logs;
@using CutOutWiz.Services.Models.FileUpload
@using CutOutWiz.Services.OrderItemStatusChangeLogService
@using CutOutWiz.Services.OrderAndOrderItemStatusChangeLogServices
@using CutOutWiz.Services.OrderTeamServices;
@using CutOutWiz.Services.Security
@using CutOutWiz.Services.StorageService
@using FluentFTP
@using KowToMateAdmin.Helper
@using KowToMateAdmin.Models.Security
@using KowToMateAdmin.Models;
@using KowToMateAdmin.Services;
@using static CutOutWiz.Core.Utilities.Enums

@inject IJSRuntime js
@inject IFileServerManager _fileServerService
@inject ICompanyManager _companyService
@inject IWorkContext _workContext
@inject IFtpService _ftpService
@inject IClientOrderService _orderService
@inject IClientOrderItemService _orderFileService
@inject IContactManager _contactManager
@inject IClientOrderItemService _clientOrderItemService
@inject NavigationManager UriHelper
@inject IOrderStatusChangeLogService _orderStatusChangeLogService
@inject IOrderItemStatusChangeLogService _orderItemStatusChangeLogService
@inject IFluentFtpService _fluentFtpServic
@inject ICompanyTeamManager _companyTeamService
@inject IOrderAssignedImageEditorService _orderAssignedImageEditorService
@inject ILogServices _activityLogService
@inject IAcitivityLogCommonMethodService _acitivityLogCommonMethodService
<div class="row">
	<div class="col-12">
		<div class="page-title-box d-sm-flex align-items-center justify-content-between">
			<h4 class="mb-sm-0 font-size-18">
				Order : @order.OrderNumber
				@*<span>(@filteredStandardServices.Count)</span>*@
			</h4>
			<div class="page-title-right">
				@*<ol class="breadcrumb m-0">
				<li class="breadcrumb-item"><a emailef="javascript: void(0);">Invoices</a></li>
				<li class="breadcrumb-item active">Invoice List</li><span class="fas fa-pencil-alt"></span><i class="fa-solid fa-backward"></i><i class="fa-solid fa-circle-arrow-left"></i>
				</ol>*@
				<div class="">
					<div class="row">
						<h4 class="mb-sm-0 font-size-18">File Upload Time: @timer.elapsedTime</h4>
					</div>
				</div>
				<a type="button" class="btn btn-sm btn-warning" href="/order/Details/@objectId"><span class="fas fa-angle-double-left"></span> Back</a>
			</div>
		</div>
	</div>
</div>
<!-- end page title -->
<EditForm Model=@order OnValidSubmit="@UploadCompletedFiles">
	<div class="row">
		<div class="col-lg-8">
			<div class="card">
				<div class="card-body">
					<DataAnnotationsValidator />
					<div>
						<div class="mb-3">
							<label class="d-block mb-3" style="text-align:center;font:bold;color:red;"><h4 style="color:blueviolet">Editor Uplaod Completed Files</h4></label>
						</div>
						<div class="mb-3">
							<label class="d-block mb-3">Select Upload Option</label>
							<div class="form-check form-check-inline">
								<input class="form-check-input" @onclick="ShowFolder" type="radio" name="outer-group[0][inlineRadioOptions]" id="inlineRadio1" checked="1" value="option1">
								<label class="form-check-label" for="inlineRadio1">Folder Upload</label>
							</div>
							@*<div class="form-check form-check-inline">
							<input class="form-check-input" @onclick="ShowFile" type="radio" name="outer-group[0][inlineRadioOptions]" id="inlineRadio2" value="option2">
							<label class="form-check-label" for="inlineRadio2">File Upload</label>
							</div>*@
						</div>

						<div class="fallback">
							@*<inputFile name="file" OnChange="OnInputFileChange" type="file" multiple="multiple"></inputFile>*@
							@if (AllowFolderUpload)
							{
								<InputFile id="myCompleteFileUpload" OnChange="@LoadFolder" webkitdirectory directory multiple disabled=@isUploadInputDisabled />
							}
							else
							{
								<InputFile OnChange="@LoadFiles" multiple disabled=@isUploadInputDisabled />
							}
						</div>
						@if (isProgressBar)
						{
							@if (CurrentValue > 0)
							{
								<div class="row">
									<div class="col-lg-10">
										<RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Secondary" Value="CurrentValue" Max="100" Style="margin-top:20px;background-color:aquamarine;color:black" />
									</div>
									@*<div class="col-lg-2 mt-3">
							<button type="button" class="btn btn-danger btn-sm btn-rounded" @onclick="UploadCancel">Cancel</button>
							</div>*@
									@*<div class="col-lg-2 mt-3">
							<button type="button" class="btn btn-danger btn-sm btn-rounded" @onclick="UploadItemCancel">Cancel</button>
							</div>*@
								</div>
							}
						}
						@if (order.orderItems != null)
						{
							<table class="table table-bordered table-sm">

								@foreach (var item in order.orderItems)
								{
									<tr>
										@*@if (!string.IsNullOrEmpty(item.InternalFileInputPath))
								{
								string[] paths = item.InternalFileInputPath.Split(new[] {order.OrderNumber}, StringSplitOptions.None);

								<td>
								@paths[1].Trim('/')
								</td>
								}*@

										<td>
											@item.FileName
										</td>
										<td>
											<button type="button" class="btn btn-sm btn-tbl-action text-danger" @onclick="() => DeleteImagesOnPreview(item)">
												<span class="fas fa-times"></span>
											</button>
										</td>
									</tr>
								}
							</table>
						}

						@*<div class="mb-3 mt-3">
						<button type="submit" class="btn btn-primary me-2" disabled="@isSubmitting">Upload Completed Files</button>
						</div>*@
					</div>
				</div>
			</div>
		</div>
	</div>
</EditForm>
@if (spinShow)
{
	<div class="loader">
		<Grid />
	</div>
}

@code {
	[Parameter]
	public string objectId { get; set; }
	private ClientOrderModel order = new ClientOrderModel();
	private IReadOnlyList<IBrowserFile> loadedFiles { get; set; }
	bool isSubmitting;
	private LoginUserInfoViewModel loginUser = null;
	//Progress Bar
	private double maxValue;
	private double CurrentValue = 0;
	// For Hide Control
	private bool AllowFolderUpload = true;
	private List<string> ItemPathList = new List<string>();
	ClientOrderItemModel fileExists = new ClientOrderItemModel();
	List<ClientOrderItemModel> checkListFile = new List<ClientOrderItemModel>();
	FileServerModel serverInfo = new FileServerModel();
	CompanyModel company = new CompanyModel();
	ContactModel contactInfo = new ContactModel();
	bool isProgressBar = false;
	bool uploadItemCancel = false;
	List<ClientOrderItemModel> tempOrderItemFiles = new List<ClientOrderItemModel>();
	List<ClientOrderItemModel> ftpCheckingFile = new List<ClientOrderItemModel>();
	DateTimeConfiguration _dateTime = new DateTimeConfiguration();
	bool isUploadInputDisabled = false;
	TimerService timer = new TimerService();
	bool spinShow = false;
	protected override async Task OnInitializedAsync()
	{
		loginUser = _workContext.LoginUserInfo;
		order = await _orderService.GetByObjectId(objectId);
		company = await _companyService.GetById(order.CompanyId);
		serverInfo = await _fileServerService.GetById((int)order.FileServerId);
		contactInfo = await _contactManager.GetById(loginUser.ContactId);
	}

	private async Task UploadCompletedFiles()
	{
		//if (order.orderItems.Count == 0)
		//{
		//	await js.DisplayMessage($"Upload at least one file !");
		//	return;
		//}
		//var orderInfo = await _orderService.GetByObjectId(objectId);

		//FileUploadVM modell = new FileUploadVM();
		//ClientOrderItem fileExists = new ClientOrderItem();
		//// File status changes
		//if (order.orderItems != null || !order.orderItems.Any())
		//{
		//	maxValue = order.orderItems.Count;
		//	foreach (var file in order.orderItems)
		//	{
		//		await UpdateOrderStatus(orderInfo, file);
		//	}
		//}

		//if (checkListFile.Count > 0)
		//{
		//	var text = await CreateTextFileName(checkListFile);
		//	await js.DisplayMessage($"This Image File is not for this Order {orderInfo.OrderNumber}\n{text}");
		//}
		//if (ItemPathList.Count > 0)
		//{
		//	await js.DisplayMessage($"File Uploaded Successfully");
		//	UriHelper.NavigateTo("/order/Details" + "/" + objectId);
		//}
	}
	private async void LoadFiles(InputFileChangeEventArgs args)
	{
		spinShow = true;
		timer.StartTimer();
		this.StateHasChanged();
		isProgressBar = true;
		if (isProgressBar)
		{
			spinShow = false;
			this.StateHasChanged();
			CurrentValue = 0.1;
		}
		isSubmitting = true;
		isUploadInputDisabled = true;

		await Task.Yield();
		loadedFiles = args.GetMultipleFiles(maximumFileCount: 100000000);
		maxValue = loadedFiles.Count();
		FileUploadModel fileUploadVM = new FileUploadModel();
		int count = 0;
		checkListFile = new List<ClientOrderItemModel>();
		fileExists = new ClientOrderItemModel();
		ftpCheckingFile = new List<ClientOrderItemModel>();
		var statusNotMatchFiles = new List<ClientOrderItemModel>();
		var fileServerViewModel = new FileServerViewModel()
			{
				Host = serverInfo.Host,
				UserName = serverInfo.UserName,
				Password = serverInfo.Password,
			};
		using (var ftp = await _fluentFtpServic.CreateFtpClient(fileServerViewModel))
		{
			ftp.Config.EncryptionMode = FtpEncryptionMode.Auto;
			ftp.Config.ValidateAnyCertificate = true;
			await ftp.AutoConnect();
			foreach (var file in args.GetMultipleFiles(maximumFileCount: 100000000))
			{
				try
				{
					var orderItemFile = new ClientOrderItemModel();
					orderItemFile.FileName = file.Name;
					orderItemFile.ClientOrderId = order.Id;
					orderItemFile.PartialPath = $"/{order.OrderNumber}";
					orderItemFile.CompanyId = company.Id;

					if (orderItemFile != null)
					{
						fileExists = await _orderFileService.GetByFileByOrderIdAndFileNameAndPath(orderItemFile);
						if (fileExists.Status == (byte)InternalOrderItemStatus.InProduction || fileExists.Status == (byte)InternalOrderItemStatus.ReworkInProduction)
						{
							fileExists = fileExists;
						}
						else
						{
							statusNotMatchFiles.Add(fileExists);
							fileExists = null;
						}
					}

					if (fileExists != null)
					{
						await _dateTime.DateTimeConvert(order.CreatedDate);

						fileUploadVM.ReturnPath = $"{company.Code}/{_dateTime.year}/{_dateTime.month}/{_dateTime.date}/{FileStatusWiseLocationOnFtpConstants.InProgress}/{order.OrderNumber}/{contactInfo.FirstName + contactInfo.Id}/Production Done/";

						fileUploadVM.FtpUrl = serverInfo.Host;
						fileUploadVM.userName = serverInfo.UserName;
						fileUploadVM.password = serverInfo.Password;
						fileUploadVM.SubFolder = serverInfo.SubFolder;
						fileUploadVM.OrderNumber = order.OrderNumber;
						fileUploadVM.file = file;

						var fileFtpChecking = await _fluentFtpServic.FileExists(fileUploadVM);

						if (fileFtpChecking)
						{
							fileExists.File = file;
							ftpCheckingFile.Add(fileExists);
						}
						else
						{
							if (!string.IsNullOrWhiteSpace(serverInfo.SubFolder))
							{
								await ftp.UploadStream(file.OpenReadStream(maxAllowedSize: file.Size * 1024), $"{serverInfo.SubFolder}\\{fileUploadVM.ReturnPath}\\{order.OrderNumber}\\{file.Name}", FtpRemoteExists.Overwrite, true);
							}
							else
							{
								await ftp.UploadStream(file.OpenReadStream(maxAllowedSize: file.Size * 1024), $"{fileUploadVM.ReturnPath}\\{order.OrderNumber}\\{file.Name}", FtpRemoteExists.Overwrite, true);
							}
							orderItemFile.CompanyId = company.Id;
							orderItemFile.PartialPath = fileExists.PartialPath;
							orderItemFile.ProductionDoneFilePath = $"{fileUploadVM.ReturnPath}/{fileExists.PartialPath}/{file.Name}".Replace("///", "/");

							orderItemFile.Id = fileExists.Id;
							var name = file.Name.ToString();
							orderItemFile.FileName = name;
							orderItemFile.File = file;
							orderItemFile.ObjectId = Guid.NewGuid().ToString();
							orderItemFile.CreatedByContactId = loginUser.ContactId;
							orderItemFile.FileName = file.Name;
							orderItemFile.FileType = file.ContentType;
							orderItemFile.FileSize = (byte)file.Size;

							await _clientOrderItemService.UpdateEitorItemInfo(orderItemFile);
							order.orderItems.Add(orderItemFile);
						}
					}
					tempOrderItemFiles.Add(orderItemFile);
					if (uploadItemCancel)
					{
						var result = await _clientOrderItemService.DeleteList(tempOrderItemFiles, fileServerViewModel, order);
						CurrentValue = 0;
						uploadItemCancel = false;
						StateHasChanged();
						break;
					}
					if (fileExists == null)
					{
						checkListFile.Add(orderItemFile);
					}
					count++;
					CurrentValue = Math.Round((float)((100 / maxValue) * count), 2);
					this.StateHasChanged();
				}
				catch (Exception ex)
				{
					CommonActivityLogViewModel errorLog = new CommonActivityLogViewModel()
						{
							PrimaryId = (int)order.Id,
							ActivityLogFor = (int)ActivityLogForConstants.Order,
							loginUser = loginUser,
							ErrorMessage = ex.Message,
							MethodName = "LoadFiles",
							RazorPage = "EditorUploadCompleteFiles.razor",
							Category = (int)ActivityLogCategory.EditorUploadCompletedFileError,
						};

					await _acitivityLogCommonMethodService.InsertErrorActivityLog(errorLog);
					await js.DisplayMessage($"{ex.Message}");

				}
			}
			await ftp.Disconnect();
		}
		if (CurrentValue == 100)
		{
			CurrentValue = 0;
			isProgressBar = false;
			spinShow = true;
			StateHasChanged();
		}
		if (checkListFile.Count > 0)
		{
			var text = await CreateTextFileName(checkListFile);
			await js.DisplayMessage($"This Image File is not for this Order {order.OrderNumber}\n{text}");
			isUploadInputDisabled = false;
			return;
		}
		if (ftpCheckingFile.Count > 0)
		{
			try
			{
				maxValue = ftpCheckingFile.Count();
				count = 0;
				var text = await CreateTextFileName(ftpCheckingFile);
				spinShow = false;
				StateHasChanged();
				if (await js.ReplaceConfirmation("", $"Are you want to replace this files {order.OrderNumber}\n{text}", SweetAlertTypeMessagee.question))
				{
					spinShow = true;
					isProgressBar = true;
					StateHasChanged();
					if (isProgressBar)
					{
						spinShow = false;
						this.StateHasChanged();
						CurrentValue = 0.1;
					}
					using (var ftp = await _fluentFtpServic.CreateFtpClient(fileServerViewModel))
					{
						ftp.Config.EncryptionMode = FtpEncryptionMode.Auto;
						ftp.Config.ValidateAnyCertificate = true;
						await ftp.AutoConnect();
						foreach (var file in ftpCheckingFile)
						{
							var orderItemFile = new ClientOrderItemModel();
							if (!string.IsNullOrWhiteSpace(serverInfo.SubFolder))
							{
								await ftp.UploadStream(file.File.OpenReadStream(maxAllowedSize: file.File.Size * 1024), $"{serverInfo.SubFolder}\\{fileUploadVM.ReturnPath}\\{order.OrderNumber}\\{file.File.Name}", FtpRemoteExists.Overwrite, true);
							}
							else
							{

								await ftp.UploadStream(file.File.OpenReadStream(maxAllowedSize: file.File.Size * 1024), $"{fileUploadVM.ReturnPath}\\{order.OrderNumber}\\{file.File.Name}", FtpRemoteExists.Overwrite, true);

							}
							ClientOrderItemModel orderFileItem = new ClientOrderItemModel()
								{
									CompanyId = company.Id,
									FileName = file.File.Name,
									ClientOrderId = fileExists.ClientOrderId,
									PartialPath = fileExists.PartialPath,
									ProductionDoneFilePath = $"{fileUploadVM.ReturnPath}/{fileExists.PartialPath}/{file.File.Name}".Replace("///", "/"),
								};


							orderItemFile.Id = fileExists.Id;
							var name = file.File.Name.ToString();
							orderItemFile.FileName = name;
							orderItemFile.File = file.File;
							orderItemFile.ObjectId = Guid.NewGuid().ToString();
							orderItemFile.CreatedByContactId = loginUser.ContactId;
							orderItemFile.FileName = file.File.Name;
							orderItemFile.FileType = file.File.ContentType;
							orderItemFile.FileSize = (byte)file.File.Size;
							order.orderItems.Add(orderItemFile);
							count++;
							CurrentValue = Math.Round((float)((100 / maxValue) * count), 2);

							await _clientOrderItemService.UpdateEitorItemInfo(orderFileItem);
							this.StateHasChanged();
						}
						await ftp.Disconnect();
					}
				}
				spinShow = true;
				this.StateHasChanged();
			}
			catch (Exception ex)
			{   
				CommonActivityLogViewModel errorLog = new CommonActivityLogViewModel()
					{
						PrimaryId = (int)order.Id,
						ActivityLogFor = (int)ActivityLogForConstants.Order,
						loginUser = loginUser,
						ErrorMessage = ex.Message,
						MethodName = "LoadFiles - Replace Function",
						RazorPage = "EditorUploadCompleteFiles.razor",
						Category = (int)ActivityLogCategory.EditorUploadCompletedFileError,
					};
				await _acitivityLogCommonMethodService.InsertErrorActivityLog(errorLog);
				await js.DisplayMessage($"{ex.Message}");
			}
		}
		try
		{
			if (order.orderItems.Count > 0)
			{
				foreach (var orderItem in order.orderItems)
				{
					await UpdateOrderItemStatus(order, orderItem);
				}
				this.StateHasChanged();
				spinShow = false;
				await js.DisplayMessage($"File Uploaded Successfully");
				UriHelper.NavigateTo("/order/Details" + "/" + objectId);
			}
		}
		catch (Exception ex)
		{
			await _acitivityLogCommonMethodService.InsertErrorActivityLog((int)order.Id, "LoadFiles - Function File Status Change", ex.Message, (int)ActivityLogCategory.EditorUploadCompletedFileError, loginUser);
			await js.DisplayMessage($"{ex.Message}");

		}
		isSubmitting = false;
		isUploadInputDisabled = false;
		this.StateHasChanged();
	}
	#region Folder Upload Model
	private static List<FileForUploadDetails> _CompleteselectedFileFromJs = new();
	public List<IBrowserFile> loadedFiless = new();
	private string baseFolder = "";
	public class FileForUploadDetails
	{
		public string Name { get; set; }

		public string Path { get; set; }
	}

	[JSInvokable]
	public static Task GetCompleteSelectedFileDetails(List<FileForUploadDetails> files)
	{
		_CompleteselectedFileFromJs = files;
		return Task.CompletedTask;
	}
	protected override void OnAfterRender(bool firstRender)
	{
		js.InvokeVoidAsync("completeattachFileUploadHandler");
	}
	private async Task LoadFolder(InputFileChangeEventArgs e)
	{
		spinShow = true;
		timer.StartTimer();
		isProgressBar = true;
		isSubmitting = true;
		if (isProgressBar)
		{
			spinShow = false;
			this.StateHasChanged();
			CurrentValue = 0.1;
		}
		loadedFiless = e.GetMultipleFiles(maximumFileCount: 100000000).ToList();
		maxValue = e.GetMultipleFiles(maximumFileCount: 100000000).Count;
		isSubmitting = true;
		var clientItemFile = await _orderFileService.GetByIdOrderId((int)order.Id);
		FileUploadModel fileUploadVM = new FileUploadModel();
		int count = 0;
		checkListFile = new List<ClientOrderItemModel>();
		var statusNotMatchFiles = new List<ClientOrderItemModel>();

		ftpCheckingFile = new List<ClientOrderItemModel>();
		var fileServerViewModel = new FileServerViewModel()
			{
				Host = serverInfo.Host,
				UserName = serverInfo.UserName,
				Password = serverInfo.Password,
			};
		using (var ftp = await _fluentFtpServic.CreateFtpClient(fileServerViewModel))
		{
			var clientOrder = await _orderService.GetById((int)order.Id);
			var isAllowExtraOutputFileUpload = clientOrder.AllowExtraOutputFileUpload;
			// If Folder upload without order number then check it.
			var takeFirstFileFromUploadedFiles = _CompleteselectedFileFromJs[0].Path;
			var takeOrderNumberFromUploadFilePath = takeFirstFileFromUploadedFiles.Split("/")[0];

			if (takeOrderNumberFromUploadFilePath.ToLower() == order.OrderNumber.ToLower())
			{
				for (int i = 0; i < loadedFiless.Count; i++)
				{
					fileExists = new ClientOrderItemModel();
					var completefilePath = _CompleteselectedFileFromJs[i].Path;
					var file = loadedFiless[i];

					try
					{
						var orderItemFile = new ClientOrderItemModel();
						orderItemFile.FileName = file.Name;
						orderItemFile.ClientOrderId = order.Id;
						orderItemFile.CompanyId = company.Id;
						var filepath = Path.GetDirectoryName(completefilePath);

						// Thumb File Uplaod Prevent
						if (Path.GetExtension(orderItemFile.FileName) == ".db")
						{
							count++;
							CurrentValue = Math.Round((float)((100 / maxValue) * count), 2);
							StateHasChanged();
							continue;
						}

						if (!string.IsNullOrEmpty(filepath))
						{
							var takeOrderNumberFromUploadPath = filepath.Split("\\")[0];
							if (takeOrderNumberFromUploadPath == order.OrderNumber)
							{
								var replaceString = filepath.Replace($"\\", @"/");
								orderItemFile.PartialPath = @"/" + replaceString /*+ @"/"*/;
							}
							else
							{
								var replaceString = filepath.Replace($"\\", @"/");
								orderItemFile.PartialPath = $"/{order.OrderNumber}/{replaceString}";
							}

						}
						if (!string.IsNullOrEmpty(orderItemFile.FileName) && !string.IsNullOrEmpty(orderItemFile.PartialPath))
						{
							orderItemFile.FileNameWithoutExtension = Path.GetFileNameWithoutExtension(orderItemFile.FileName);

							//Add By Rakib
							if (isAllowExtraOutputFileUpload)
							{
								fileExists = await _orderFileService.GetByFileByOrderIdAndFileNameAndPath(orderItemFile);
								if (fileExists == null)
								{
									var filesExistList = await _orderFileService.GetFileListByOrderIdAndFileName(orderItemFile);


									if (filesExistList == null || !filesExistList.Any())
									{
										var addItemResponse = await AddOrderItem(orderItemFile, file);
										if (addItemResponse.Result > 0)
										{
											fileExists = await _orderFileService.GetById(addItemResponse.Result);
										}
									}
									else
									{
										if (filesExistList.Count == 1)
										{
											fileExists = filesExistList.FirstOrDefault();
											if (fileExists.Status == (byte)InternalOrderItemStatus.ProductionDone || fileExists.Status == (byte)InternalOrderItemStatus.ReworkDone)
											{
												var lastIndexOfOrderNumber = fileExists.ProductionDoneFilePath.LastIndexOf(order.OrderNumber);
												var existingFileFolderPath = Path.GetDirectoryName("/" + fileExists.ProductionDoneFilePath.Substring(lastIndexOfOrderNumber));
												existingFileFolderPath = existingFileFolderPath.Replace("\\", "/");
												if (existingFileFolderPath != orderItemFile.PartialPath)
												{
													var addItemResponse = await AddOrderItem(orderItemFile, file);
													if (addItemResponse.Result > 0)
													{
														fileExists = await _orderFileService.GetById(addItemResponse.Result);
													}
												}
											}
										}
										else
										{
											//
											List<string> temporyProductionFolderPathList = new();
											foreach (var item in filesExistList)
											{
												var lastIndexOfOrderNumber = item.ProductionDoneFilePath.LastIndexOf(order.OrderNumber);
												var existingFileFolderPath = Path.GetDirectoryName("/" + item.ProductionDoneFilePath.Substring(lastIndexOfOrderNumber));
												existingFileFolderPath = existingFileFolderPath.Replace("\\", "/");
												temporyProductionFolderPathList.Add(existingFileFolderPath);
											}
											if (!temporyProductionFolderPathList.Contains(orderItemFile.PartialPath))
											{
												var addItemResponse = await AddOrderItem(orderItemFile, file);
												if (addItemResponse.Result > 0)
												{
													fileExists = await _orderFileService.GetById(addItemResponse.Result);
												}
											}
											else
											{
												var indexOfProductionDoneFolderMatchingPath = temporyProductionFolderPathList.IndexOf(orderItemFile.PartialPath);
												fileExists = filesExistList[indexOfProductionDoneFolderMatchingPath];
											}

										}
									}

								}
							}
							else
							{
								fileExists = await _orderFileService.GetByFileByOrderIdAndFileNameAndPath(orderItemFile);
								if (fileExists.Status == (byte)InternalOrderItemStatus.InProduction || fileExists.Status == (byte)InternalOrderItemStatus.ReworkInProduction)
								{
									fileExists = fileExists;
								}
								else
								{
									statusNotMatchFiles.Add(fileExists);
									fileExists = null;
								}
							}

							if (fileExists != null)
							{
								orderItemFile.Id = (int)fileExists.Id;
							}

						}

						if (fileExists != null)
						{
							await _dateTime.DateTimeConvert(order.CreatedDate);

							fileUploadVM.ReturnPath = $"{company.Code}/{_dateTime.year}/{_dateTime.month}/{_dateTime.date}/In Progress/{order.OrderNumber}/{contactInfo.FirstName.Trim() + contactInfo.Id}/Production Done/";

							fileUploadVM.file = file;
							fileUploadVM.OrderNumber = order.OrderNumber;
							fileUploadVM.FtpUrl = serverInfo.Host;
							fileUploadVM.userName = serverInfo.UserName;
							fileUploadVM.password = serverInfo.Password;
							fileUploadVM.SubFolder = serverInfo.SubFolder;
							fileUploadVM.FolderName = filepath;

							var fileFtpChecking = await _fluentFtpServic.FileExists(fileUploadVM);

							if (fileFtpChecking)
							{
								fileExists.File = file;
								ftpCheckingFile.Add(fileExists);
							}
							else
							{
								ftp.Config.EncryptionMode = FtpEncryptionMode.Auto;
								ftp.Config.ValidateAnyCertificate = true;
								await ftp.AutoConnect();
								if (!string.IsNullOrWhiteSpace(serverInfo.SubFolder))
								{
									await ftp.UploadStream(file.OpenReadStream(maxAllowedSize: file.Size * 1024), $"{serverInfo.SubFolder}\\{fileUploadVM.ReturnPath}\\{orderItemFile.PartialPath}\\{file.Name}", FtpRemoteExists.Overwrite, true);
								}
								else
								{
									await ftp.UploadStream(file.OpenReadStream(maxAllowedSize: file.Size * 1024), $"{fileUploadVM.ReturnPath}\\{orderItemFile.PartialPath}\\{file.Name}", FtpRemoteExists.Overwrite, true);
								}
								await ftp.Disconnect();

								//orderItemFile.PartialPath = fileExists.PartialPath;

								// Check Order Number uploaded from Upload Folder


								//orderItemFile.ProductionDoneFilePath = $"{modell.ReturnPath}/{fileExists.PartialPath}/{file.Name}".Replace("//", "/");
								orderItemFile.ProductionDoneFilePath = $"{fileUploadVM.ReturnPath}/{orderItemFile.PartialPath}/{file.Name}".Replace("//", "/");


								orderItemFile.Id = fileExists.Id;
								orderItemFile.FileName = file.Name;
								orderItemFile.File = file;
								orderItemFile.ObjectId = Guid.NewGuid().ToString();
								orderItemFile.CreatedByContactId = loginUser.ContactId;
								orderItemFile.FileName = file.Name;
								orderItemFile.FileType = file.ContentType;
								orderItemFile.FileSize = (byte)file.Size;
								orderItemFile.InternalFileOutputPath = completefilePath;

								await _clientOrderItemService.UpdateEitorItemInfo(orderItemFile);
								await UpdateOrderItemStatus(order, orderItemFile);
								order.orderItems.Add(orderItemFile);
								await InsertEditorUploadActivityLog(orderItemFile, completefilePath);
							}
						}

						if (fileExists == null)
						{
							checkListFile.Add(orderItemFile);
						}
						count++;
						CurrentValue = Math.Round((float)((100 / maxValue) * count), 2);
						this.StateHasChanged();
					}
					catch (Exception ex)
					{

						CommonActivityLogViewModel errorLog = new CommonActivityLogViewModel()
							{
								PrimaryId = (int)order.Id,
								ActivityLogFor = (int)ActivityLogForConstants.Order,
								loginUser = loginUser,
								ErrorMessage = ex.Message,
								MethodName = "LoadFolder",
								RazorPage = "EditorUploadCompleteFiles.razor",
								Category = (int)ActivityLogCategory.EditorUploadCompletedFileError,
							};


						await _acitivityLogCommonMethodService.InsertErrorActivityLog(errorLog);
						await js.DisplayMessage($"{ex.Message}");

					}
				}
			}
			else
			{
				CurrentValue = 0;
				spinShow = false;
				await js.DisplayMessage($"Please Provide With Folder Name Like Order Number {order.OrderNumber}");
				this.StateHasChanged();
			}
		}
		if (CurrentValue == 100)
		{
			CurrentValue = 0;
			isProgressBar = false;
			spinShow = true;
			StateHasChanged();
		}

		if (statusNotMatchFiles.Count > 0)
		{
			var text = await CreateTextFileName(statusNotMatchFiles);
			await js.DisplayMessage($"This Image File are not InProduction Or ReworkInProduction Status {order.OrderNumber}\n{text}");
			spinShow = false;
			this.StateHasChanged();
			return;
		}

		if (ftpCheckingFile.Count > 0)
		{
			var text = await CreateTextFileName(ftpCheckingFile);
			maxValue = ftpCheckingFile.Count();
			count = 0;
			spinShow = false;
			StateHasChanged();
			if (await js.ReplaceConfirmation("", $"Are you want to replace this files {order.OrderNumber}\n{text}", SweetAlertTypeMessagee.question))
			{
				spinShow = true;
				StateHasChanged();
				isProgressBar = true;

				if (isProgressBar)
				{
					CurrentValue = 0.1;
					spinShow = false;
					this.StateHasChanged();
				}
				try
				{
					using (var ftp = await _fluentFtpServic.CreateFtpClient(fileServerViewModel))
					{
						ftp.Config.EncryptionMode = FtpEncryptionMode.Auto;
						ftp.Config.ValidateAnyCertificate = true;

						await ftp.AutoConnect();
						foreach (var file in ftpCheckingFile)
						{
							var orderItemFile = new ClientOrderItemModel();
							if (!string.IsNullOrWhiteSpace(serverInfo.SubFolder))
							{
								await ftp.UploadStream(file.File.OpenReadStream(maxAllowedSize: file.File.Size * 1024), $"{serverInfo.SubFolder}\\{fileUploadVM.ReturnPath}\\{file.PartialPath}\\{file.File.Name}", FtpRemoteExists.Overwrite, true);
							}
							else{
								await ftp.UploadStream(file.File.OpenReadStream(maxAllowedSize: file.File.Size * 1024), $"{fileUploadVM.ReturnPath}\\{file.PartialPath}\\{file.File.Name}", FtpRemoteExists.Overwrite, true);
							}
							orderItemFile.PartialPath = file.PartialPath;

							orderItemFile.ProductionDoneFilePath = $"{fileUploadVM.ReturnPath}/{file.PartialPath}/{file.File.Name}".Replace("//", "/");


							orderItemFile.Id = file.Id;
							var name = file.File.Name.ToString();
							orderItemFile.FileName = name;
							orderItemFile.File = file.File;
							orderItemFile.ObjectId = Guid.NewGuid().ToString();
							orderItemFile.CreatedByContactId = loginUser.ContactId;
							orderItemFile.FileName = file.File.Name;
							orderItemFile.FileType = file.File.ContentType;
							orderItemFile.FileSize = (byte)file.File.Size;
							await UpdateOrderItemStatus(order, orderItemFile);
							//order.orderItems.Add(orderItemFile);
							count++;
							CurrentValue = Math.Round((float)((100 / maxValue) * count), 2);

							await _clientOrderItemService.UpdateEitorItemInfo(orderItemFile);
							this.StateHasChanged();
						}
						await ftp.Disconnect();
					}
				}
				catch (Exception ex)
				{


					CommonActivityLogViewModel errorLog = new CommonActivityLogViewModel()
						{
							PrimaryId = (int)order.Id,
							ActivityLogFor = (int)ActivityLogForConstants.Order,
							loginUser = loginUser,
							ErrorMessage = ex.Message,
							MethodName = "LoadFolder - Replace Function",
							RazorPage = "EditorUploadCompleteFiles.razor",
							Category = (int)ActivityLogCategory.EditorUploadCompletedFileError,
						};

					await _acitivityLogCommonMethodService.InsertErrorActivityLog(errorLog);
					await js.DisplayMessage($"{ex.Message}");

				}
			}
			//UriHelper.NavigateTo("/order/Details" + "/" + objectId);
		}

		if (checkListFile.Count > 0)
		{
			var text = await CreateTextFileName(checkListFile);
			await js.DisplayMessage($"This Image File is not for this Order {order.OrderNumber}\n{text}");
			spinShow = false;
			this.StateHasChanged();
			return;
		}
		

		spinShow = false;
		this.StateHasChanged();

		await js.DisplayMessage($"File Uploaded Successfully");
		UriHelper.NavigateTo("/order/Details" + "/" + objectId);
		isSubmitting = false;
		isUploadInputDisabled = false;
		spinShow = false;
		StateHasChanged();

	}
	#endregion
	private void ShowFolder()
	{
		AllowFolderUpload = true;
	}
	private void ShowFile()
	{
		AllowFolderUpload = false;
	}

	private async Task UpdateOrderItemStatus(ClientOrderModel order, ClientOrderItemModel clientOrderItem)
	{
		
		var orderItem = await _clientOrderItemService.GetById((int)clientOrderItem.Id);

		try
		{
			if (orderItem != null)
			{
				if (orderItem.Status == (byte)InternalOrderItemStatus.ReworkInProduction || orderItem.Status == (byte)InternalOrderItemStatus.ReworkDistributed)
				{
					orderItem.Status = (byte)InternalOrderItemStatus.ReworkDone;
					orderItem.ExternalStatus = (byte)EnumHelper.ExternalOrderItemStatusChange(InternalOrderItemStatus.ReworkDone);
					await _clientOrderItemService.UpdateClientOrderItemStatus(orderItem);
					await AddOrderItemStatusChangeLog(orderItem, (InternalOrderItemStatus)orderItem.Status);
					var orderAllItem = await _clientOrderItemService.GetAllOrderItemByOrderId((int)order.Id);

					UpdateOrder(order, await GetInternalOrderStatus(orderAllItem));//Todo:RakibStatus
				}
				else
				{
					orderItem.Status = (byte)InternalOrderItemStatus.ProductionDone;
					orderItem.ExternalStatus = (byte)EnumHelper.ExternalOrderItemStatusChange(InternalOrderItemStatus.ProductionDone);
					var response = await _clientOrderItemService.UpdateClientOrderItemStatus(orderItem);
					await AddOrderItemStatusChangeLog(orderItem, (InternalOrderItemStatus)orderItem.Status);
					var orderAllItem = await _clientOrderItemService.GetAllOrderItemByOrderId((int)order.Id);

					UpdateOrder(order, await GetInternalOrderStatus(orderAllItem));//Todo:RakibStatus
				}

			}
		}
		catch (Exception ex)
		{
			CommonActivityLogViewModel errorLog = new CommonActivityLogViewModel()
				{
					PrimaryId = (int)order.Id,
					ActivityLogFor = (int)ActivityLogForConstants.Order,
					loginUser = loginUser,
					ErrorMessage = ex.Message,
					MethodName = "UdateOrderItemStatus",
					RazorPage = "EditorUploadCompleteFiles.razor",
					Category = (int)ActivityLogCategory.UpdateOrderItemStatusError,
				};
			await _acitivityLogCommonMethodService.InsertErrorActivityLog(errorLog);
			await js.DisplayMessage($"{ex.Message}");
		}
	}

	private async void UpdateOrder(ClientOrderModel clientOrder, InternalOrderStatus status)
	{
		try
		{
			if (status == InternalOrderStatus.AssignedForSupport)
			{
				status = InternalOrderStatus.Assigned;
			}
			clientOrder.InternalOrderStatus = (byte)status;
			clientOrder.ExternalOrderStatus = (byte)(EnumHelper.ExternalOrderStatusChange(status));
			await _orderService.UpdateClientOrderStatus(clientOrder);

			await AddOrderStatusChangeLog(clientOrder, status);
		}
		catch (Exception ex)
		{
			CommonActivityLogViewModel errorLog = new CommonActivityLogViewModel()
				{
					PrimaryId = (int)order.Id,
					ActivityLogFor = (int)ActivityLogForConstants.Order,
					loginUser = loginUser,
					ErrorMessage = ex.Message,
					MethodName = "UpdateOrder",
					RazorPage = "EditorUploadCompleteFiles.razor",
					Category = (int)ActivityLogCategory.UpdateOrderError
				};
			await _acitivityLogCommonMethodService.InsertErrorActivityLog((int)order.Id, "UpdateOrder", ex.Message, (int)ActivityLogCategory.EditorUploadCompletedFileError, loginUser);
			await js.DisplayMessage($"{ex.Message}");

		}
	}

	private async Task<InternalOrderStatus> GetInternalOrderStatus(List<ClientOrderItemModel> clientOrderItems)
	{
		await Task.Yield();
		ClientOrderItemStatus clientOrderItemMinStatus = await _clientOrderItemService.GetOrderItemMinStatusByOrderId((int)order.Id);
		InternalOrderStatus internalOrderItemStatus = (InternalOrderStatus)clientOrderItemMinStatus.Status;
		return internalOrderItemStatus;
	}
	#region Image Byte Create
	string imageByte = "";
	private string extensionName = "default";
	public async Task ImageByteCreate(FileInfoViewModel fileInfo)
	{
		try
		{
			var name = fileInfo.browserFile.Name.ToString();
			extensionName = Path.GetExtension(fileInfo.browserFile.Name);
			var imageFileTypes = new List<string> { ".png", ".PNG", ".jpg", ".jpeg", ".avif" };
			var format = "image/png";
			if (imageFileTypes.Contains(extensionName))
			{
				var resizeImageFile = await fileInfo.browserFile.RequestImageFileAsync(fileInfo.browserFile.ContentType, 200, 200);
				var buffer = new byte[resizeImageFile.Size];
				await resizeImageFile.OpenReadStream(maxAllowedSize: 1024000000000).ReadAsync(buffer);
				var imageUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
				//fileInfo.URL.Add(imageUrl);
				imageByte = imageUrl;
			}
		}
		catch { }
	}
	private async void DeleteImagesOnPreview(ClientOrderItemModel file)
	{
		//await Task.Yield();
		order.orderItems.RemoveAll(f => f.FileName == file.FileName);
		StateHasChanged();
		await _dateTime.DateTimeConvert(order.CreatedDate);
		var result = await _clientOrderItemService.GetById((int)file.Id);

		FileUploadModel model = new FileUploadModel()
			{
				FtpUrl = serverInfo.Host,
				userName = serverInfo.UserName,
				password = serverInfo.Password,
				ReturnPath = $"{company.Code}/{_dateTime.year}/{_dateTime.month}/{_dateTime.date}/In Progress/{order.OrderNumber}/{contactInfo.FirstName + contactInfo.Id}/Production Done/{result.PartialPath}/{file.FileName}",
			};
		await _fluentFtpServic.DeleteFile(model);
	}
	#endregion

	public async Task AddOrderStatusChangeLog(ClientOrderModel clientOrder, InternalOrderStatus internalOrderStatus)
	{
		try
		{
			var previousLog = await _orderStatusChangeLogService.OrderStatusLastChangeLogByOrderId((int)clientOrder.Id);
			if (previousLog != null && previousLog.NewInternalStatus != (byte)internalOrderStatus)
			{
				OrderStatusChangeLogModel orderStatusChangeLog = new OrderStatusChangeLogModel
					{
						OrderId = (int)clientOrder.Id,
						NewInternalStatus = (byte)internalOrderStatus,
						NewExternalStatus = (byte)EnumHelper.ExternalOrderStatusChange(internalOrderStatus),
						ChangeByContactId = loginUser.ContactId,
						ChangeDate = DateTime.Now
					};

				if (previousLog != null)
				{
					orderStatusChangeLog.OldExternalStatus = previousLog.NewExternalStatus;
					orderStatusChangeLog.OldInternalStatus = previousLog.NewInternalStatus;
					orderStatusChangeLog.TimeDurationInMinutes = (int)(orderStatusChangeLog.ChangeDate.Subtract(previousLog.ChangeDate).TotalMinutes);
				}
				await _orderStatusChangeLogService.Insert(orderStatusChangeLog);
			}
		}
		catch (Exception ex)
		{
			CommonActivityLogViewModel errorLog = new CommonActivityLogViewModel()
				{
					PrimaryId = (int)order.Id,
					ActivityLogFor = (int)ActivityLogForConstants.Order,
					loginUser = loginUser,
					ErrorMessage = ex.Message,
					MethodName = "AddOrderChangeLogStatus",
					RazorPage = "EditorUploadCompleteFiles.razor",
					Category = (int)ActivityLogCategory.AddOrderItemStatusChangeLogError
				};
			await _acitivityLogCommonMethodService.InsertErrorActivityLog(errorLog);
			await js.DisplayMessage($"{ex.Message}");

		}

	}

	private async Task<string> CreateTextFileName(List<ClientOrderItemModel> files)
	{
		var text = "";
		var fileName = "";
		var filesArray = files.ToArray();
		for (int i = 0; i < filesArray.ToList().Count; i++)
		{
			fileName += $"({i}) {filesArray[i].FileName}\n";
		}
		text = $"\n{"File Names:"}\n{fileName}\n";
		return text;
	}
	public async Task AddOrderItemStatusChangeLog(ClientOrderItemModel clientOrderItem, InternalOrderItemStatus internalOrderItemStatus)
	{
		try
		{
			var previousLog = await _orderItemStatusChangeLogService.OrderItemStatusLastChangeLogByOrderFileId((int)clientOrderItem.Id);
			if (previousLog != null && previousLog.NewInternalStatus != (byte)internalOrderItemStatus)
			{
				OrderItemStatusChangeLogModel orderItemStatusChangeLog = new OrderItemStatusChangeLogModel
					{
						OrderFileId = (int)clientOrderItem.Id,
						NewInternalStatus = (byte)internalOrderItemStatus,
						NewExternalStatus = (byte)EnumHelper.ExternalOrderItemStatusChange(internalOrderItemStatus),
						ChangeByContactId = loginUser.ContactId,
						ChangeDate = DateTime.Now
					};


				if (previousLog != null)
				{
					orderItemStatusChangeLog.OldExternalStatus = previousLog.NewExternalStatus;
					orderItemStatusChangeLog.OldInternalStatus = previousLog.NewInternalStatus;
					orderItemStatusChangeLog.TimeDurationInMinutes = orderItemStatusChangeLog.ChangeDate.Subtract(previousLog.ChangeDate).Minutes;

				}
				await _orderItemStatusChangeLogService.Insert(orderItemStatusChangeLog);

			}

			else
			{
				OrderItemStatusChangeLogModel orderStatusChangeLog = new OrderItemStatusChangeLogModel
					{
						OrderFileId = (int)clientOrderItem.Id,
						NewInternalStatus = (byte)internalOrderItemStatus,
						NewExternalStatus = (byte)EnumHelper.ExternalOrderItemStatusChange(internalOrderItemStatus),
						ChangeByContactId = loginUser.ContactId,
						ChangeDate = DateTime.Now
					};
				await _orderItemStatusChangeLogService.Insert(orderStatusChangeLog);
			}
		}
		catch (Exception ex)
		{
			CommonActivityLogViewModel errorLog = new CommonActivityLogViewModel()
				{
					PrimaryId = (int)order.Id,
					ActivityLogFor = (int)ActivityLogForConstants.Order,
					loginUser = loginUser,
					ErrorMessage = ex.Message,
					MethodName = "AddOrderItemStatusChangeLog",
					RazorPage = "EditorUploadCompleteFiles.razor",
					Category = (int)ActivityLogCategory.AddOrderItemStatusChangeLogError
				};
			await _acitivityLogCommonMethodService.InsertErrorActivityLog(errorLog);
			await js.DisplayMessage($"{ex.Message}");

		}
	}
	private async Task UploadItemCancel()
	{
		uploadItemCancel = true;
	}

	private async Task<Response<long>> AddOrderItem(ClientOrderItemModel orderItem, IBrowserFile file)
	{
		Response<long> addItemResponse = null;
		try
		{
			var companyTeam = await _companyTeamService.GetTeamByCompanyId(order.CompanyId);
			var clientOrderItem = new ClientOrderItemModel
				{
					FileName = file.Name,
					FileType = file.ContentType,
					FileSize = file.Size,
					ClientOrderId = order.Id,
					CompanyId = order.CompanyId,
					PartialPath = orderItem.PartialPath,
					IsDeleted = false,
					ObjectId = Guid.NewGuid().ToString(),
					CreatedByContactId = loginUser.ContactId,
					FileGroup = (int)OrderItemFileGroup.Work,
					TeamId = companyTeam.TeamId,
					IsExtraOutPutFile = true

				};

			addItemResponse = await _clientOrderItemService.Insert(clientOrderItem, (long)order.Id);

			if (addItemResponse.IsSuccess)
			{
				clientOrderItem.Id = (long)addItemResponse.Result;
				OrderAssignedImageEditorModel assignedImage = new OrderAssignedImageEditorModel
					{
						OrderId = order.Id,
						AssignByContactId = loginUser.ContactId,
						AssignContactId = loginUser.ContactId,
						Order_ImageId = clientOrderItem.Id,
						ObjectId = Guid.NewGuid().ToString(),
						UpdatedByContactId = loginUser.ContactId
					};
				List<OrderAssignedImageEditorModel> assignedImages = new List<OrderAssignedImageEditorModel>();
				assignedImages.Add(assignedImage);//Todo Rakib
				var addResponse = await _orderAssignedImageEditorService.Insert(assignedImages);
				@*await AddOrderItemStatusChangeLog(clientOrderItem, InternalOrderItemStatus.ProductionDone);*@
			}

			return addItemResponse;
		}
		catch (Exception ex)
		{
			CommonActivityLogViewModel errorLog = new CommonActivityLogViewModel()
				{
					PrimaryId = (int)order.Id,
					ActivityLogFor = (int)ActivityLogForConstants.Order,
					loginUser = loginUser,
					ErrorMessage = ex.Message,
					MethodName = "AddOrderItem",
					RazorPage = "EditorUploadCompleteFiles.razor",
					Category = (int)ActivityLogCategory.AddOrderItemError
				};
			await _acitivityLogCommonMethodService.InsertErrorActivityLog(errorLog);
			await js.DisplayMessage($"{ex.Message}");

		}
		return addItemResponse;
	}
	private async Task InsertEditorUploadActivityLog(ClientOrderItemModel clientOrderItem, string editorFilePath)
	{
		try
		{
			ActivityLogModel activityLog = new ActivityLogModel();
			activityLog.ActivityLogFor = ActivityLogForConstants.OrderItem;
			activityLog.PrimaryId = (int)clientOrderItem.Id;
			activityLog.Description = $"File ‘{clientOrderItem.FileName}' Uploaded Path '{editorFilePath}' by {loginUser.FirstName} on {DateTime.Now}";
			activityLog.CreatedDate = DateTime.Now;
			activityLog.CreatedByContactId = loginUser.ContactId;
			activityLog.ObjectId = Guid.NewGuid().ToString();
			activityLog.CompanyObjectId = loginUser.CompanyObjectId;
			activityLog.ContactObjectId = loginUser.UserObjectId;

			await _activityLogService.Insert(activityLog);
		}
		catch(Exception ex)
		{
			await js.DisplayMessage(ex.Message);
		}
	}
}
