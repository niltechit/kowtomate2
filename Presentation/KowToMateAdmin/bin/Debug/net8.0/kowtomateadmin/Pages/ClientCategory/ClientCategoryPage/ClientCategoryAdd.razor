@using static CutOutWiz.Core.Utilities.Enums
@using CutOutWiz.Core.Utilities
@using CutOutWiz.Services.Models.ClientCategoryServices
@using CutOutWiz.Services.Models.Common;
@using CutOutWiz.Services.ClientCommonCategoryService.ClientCategoryServices
@using CutOutWiz.Services.EncryptedMethodServices

@inject IClientCategoryServiceService _clientCategoryServiceService
@inject IEncryptedMethodService _encryptedMethodServices

@* <div class="mb-2 row">
    <label for="ParentId" class="col-sm-4 col-form-label fw-bold">Select Company</label>
    <div class="col-sm-8">
        <InputSelect @bind-Value="clientCagtegory.ClientCompanyId" class="form-select">
            <option value="0">- Select -</option>
            @foreach (var type in companies)
            {
                <option value="@(type.Id)">@type.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => clientCagtegory.ClientCompanyId)" />
    </div>
</div> *@
<div class="mb-2 row">
    <label for="Permissions" class="col-sm-4 col-form-label fw-bold">Company</label>
    <div class="col-sm-8">
        <RadzenDropDown AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        @bind-Value="@clientCagtegory.ClientCompanyId" Placeholder="Select..." Data="@companies"
                        TextProperty="Name" ValueProperty="Id" Class="w-100" Change="@OnSelectedCompany" />
    </div>
</div>

@* <div class="mb-2 row">
    <label for="ParentId" class="col-sm-4 col-form-label fw-bold">Select Category</label>
    <div class="col-sm-8">
        <InputSelect @bind-Value="clientCagtegory.CommonCategoryId" class="form-select" @onclick="OnCategorySelected">
            <option value="0">- Select -</option>
            @foreach (var type in commonCategories)
            {
                <option value="@type.Id">@type.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => clientCagtegory.CommonCategoryId)" />
    </div>
</div> *@

@* <div class="mb-2 row">
    <label for="Permissions" class="col-sm-4 col-form-label fw-bold">Select Category</label>
    <div class="col-sm-8">
        <RadzenDropDown AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        @bind-Value="@selectedCategoriesIds" Multiple="true" Placeholder="Select..." Data="@commonCategories"
                        TextProperty="Name" ValueProperty="Id" Class="w-100" Change="@OnSelectedCategoriesList" />
    </div>
</div> *@
<div class="mb-2 row">
    <label for="Permissions" class="col-sm-4 col-form-label fw-bold">Category</label>
    <div class="col-sm-8">
        <RadzenDropDown AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        @bind-Value="@clientCagtegory.CommonCategoryId" Placeholder="Select..." Data="@commonCategories"
                        TextProperty="Name" ValueProperty="Id" Class="w-100" Change="@OnSelectedCategoriesList" />
    </div>
</div>


@if (SelectedCategoryCommonServices!=null && SelectedCategoryCommonServices.Any() && SelectedCategoryCommonServices.Count > 0)
{
    <div class="row mb-2">
        <div class="col-lg-12">
            <RadzenDataGrid @ref="grid" Data="@SelectedCategoryCommonServices" IsLoading="@isLoading" TItem="CommonServiceModel"
                            AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false"
                            FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            AllowSorting="true" AllowPaging="true" PageSize="20"
                            PagerHorizontalAlign="HorizontalAlign.Center"
                            ShowPagingSummary="true" AllowColumnReorder="true">
                <Columns>
                    <RadzenDataGridColumn TItem="CommonServiceModel" Property="Name" Title="Service Name">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="CommonServiceModel" Property="TimeIn" Title="Time In Minutes" TextAlign="TextAlign.Center" Filterable="false">
                        <Template Context="order">
                            <RadzenNumeric @bind-Value="order.TimeInMinutes"  Name="TimeInMinutes" aria-label="Time" />
                            <RadzenRequiredValidator Text="TimeInMinutes is required" Component="TimeInMinutes" Popup="true" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="CommonServiceModel" Property="Id" Title="Actions" Filterable="false" Sortable="false" Pickable="false" TextAlign="TextAlign.Center" MinWidth="350px">
                        <Template Context="order">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => OnDeleteRow.InvokeAsync(order))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="order">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => OnDeleteRow.InvokeAsync(order))" aria-label="Delete">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <h4 class="mb-sm-0 font-size-18">
                   
                </h4>
                <div class="page-title-right">
                    <button type="button" class="btn btn-sm btn-primary" @onclick="@(args => AddNew.InvokeAsync())" title="Add New CommonCategory"><span class="fas fa-plus"></span> Add Service</button>
                </div>

            </div>
        </div>
    </div>

}

<div class="mb-2 row">
    <label for="Code" class="col-sm-4 col-form-label fw-bold required-field">Time In Minute</label>
    <div class="col-sm-8">
        <InputNumber class="form-control" disabled="true" placeholder="Time In Minute" @bind-Value="clientCagtegory.TimeInMinutes"></InputNumber>
        <ValidationMessage For="@(() => clientCagtegory.TimeInMinutes)" />
    </div>
</div>
<AuthorizeView Roles=@PermissionConstants.Category_CanAddCategoryPrice>
<div class="mb-2 row">
    <label for="Code" class="col-sm-4 col-form-label fw-bold required-field">Price In USD</label>
    <div class="col-sm-8">
        <InputText class="form-control" placeholder="Price In USD" @bind-Value="clientCagtegory.PriceInUSD"></InputText>
        <ValidationMessage For="@(() => clientCagtegory.PriceInUSD)" />
    </div>
</div>
</AuthorizeView>
<div class="mb-2 row">
    <label class="col-sm-4 col-form-label fw-bold">Is Active</label>
    <div class="col-sm-8">
        
        <label class="form-check-label" for="IsActive">
            <InputCheckbox @bind-Value="clientCagtegory.IsActive" id="IsActive" class="form-check-input"></InputCheckbox>
        </label>
        <ValidationMessage For="@(() => clientCagtegory.IsActive)" />
    </div>
</div>

@code {
    [Parameter]
    public ClientCategoryRequestViewModel clientCagtegory { get; set; }
    [Parameter]
    public List<CompanyModel> companies { get; set; }
    [Parameter]
    public List<CommonCategoryModel> commonCategories { get; set; }
    [Parameter]
    public List<CommonServiceModel> SelectedCategoryCommonServices { get; set; }
    RadzenDataGrid<CommonServiceModel> grid;
    bool isLoading = false;


    [Parameter] public EventCallback<CommonServiceModel> OnDeleteRow { get; set; }
    [Parameter] public EventCallback<CommonServiceModel> AddNew { get; set; }
    [Parameter] public EventCallback<int> GetCommonService { get; set; }
    [Parameter] public EventCallback<IEnumerable<int>> SelectedServiceList { get; set; }
    [Parameter] public EventCallback<IEnumerable<int>> SelectedCategoriesList { get; set; }
    [Parameter] public EventCallback<int> SelectedCategories { get; set; }

    [Parameter]
    public List<int> selectedServiceIds { get; set; }
    [Parameter]
    public List<int> selectedCategoriesIds { get; set; }
    [Parameter]
    public int selectedCategoriesId { get; set; } = new int();

    protected override async Task OnInitializedAsync()
    {
        //commonServices = new List<CommonService>();
        if (SelectedCategoryCommonServices != null && SelectedCategoryCommonServices.Count > 0)
        {
            await InvokeAsync(StateHasChanged); // Ensure the state is updated correctly
        }
        isLoading = false;
    }
    private async Task OnCategorySelected()
    {
        await GetCommonService.InvokeAsync(clientCagtegory.CommonCategoryId);
    }
    private async Task OnSelectedServiceList(object value)
    {
        selectedServiceIds = ((IEnumerable<int>)value).ToList();
        await SelectedServiceList.InvokeAsync(selectedServiceIds);
    }
    private async Task OnSelectedCategoriesList(object value)
    {
        #region Multiple Category add
        // // selectedCategoriesIds = ((IEnumerable<int>)value).ToList();
        // // await SelectedCategoriesList.InvokeAsync(selectedCategoriesIds);


        // // Check if the value is already a collection
        // if (value is IEnumerable<int> enumerable)
        // {
        //     selectedCategoriesIds = enumerable.ToList();
        // }
        // else if (value is int singleValue)
        // {
        //     // If the value is a single integer, wrap it in a list
        //     selectedCategoriesIds = new List<int> { singleValue };
        // }
        // else
        // {
        //     // Handle the error if the value is neither an int nor an IEnumerable<int>
        //     throw new InvalidCastException("The selected value is neither an integer nor an enumerable collection of integers.");
        // }
        // // Here only one category taken : Note : Further update need
        // clientCagtegory.CommonCategoryId = selectedCategoriesIds.Where(x=>x > 0).First();

        // //await GetCommonService.InvokeAsync(clientCagtegory.CommonCategoryId);
        // // Invoke the event with the selected company IDs
        // await SelectedCategoriesList.InvokeAsync(selectedCategoriesIds);

        #endregion Multiple Category Add

        clientCagtegory.CommonCategoryId = 0;

        if (value is int singleValue)
        {
            clientCagtegory.CommonCategoryId = singleValue;
        }
        await SelectedCategories.InvokeAsync(selectedCategoriesId);
        await GetCommonService.InvokeAsync(clientCagtegory.CommonCategoryId);
        StateHasChanged();
    }

    private async Task OnSelectedCompany(object value)
    {
        clientCagtegory.ClientCompanyId = 0;
        if (value is int singleValue)
        {
            clientCagtegory.ClientCompanyId = singleValue;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (SelectedCategoryCommonServices != null && SelectedCategoryCommonServices.Count > 0)
        {
            clientCagtegory.TimeInMinutes = SelectedCategoryCommonServices.Sum(x => x.TimeInMinutes);
            await ReloadGridAsync();
        }
    }

    private async Task ReloadGridAsync()
    {
        if (grid != null)
        {
            await grid.Reload();
            await InvokeAsync(StateHasChanged);
        }
    }
}
