@page "/management/team-members/"
@attribute [Authorize(Roles = "Management.ManageTeamMembers")]

@using CutOutWiz.Core.Utilities
@using CutOutWiz.Core.Management
@using CutOutWiz.Services.Models.Security
@using CutOutWiz.Services.Management
@using CutOutWiz.Services.Models.Security
@using CutOutWiz.Services.Security
@using KowToMateAdmin.Models.Security
@using KowToMateAdmin.Pages.Shared
@using static CutOutWiz.Core.Utilities.Enums

@inject IWorkContext _workContext
@inject ITeamMemberService _teamMemberService
@inject ITeamRoleService _teamRoleService
@inject IContactManager _contactManager
@inject ITeamService _teamService
@inject AuthenticationStateProvider _authenticationStateProvider
<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <h4 class="mb-sm-0 font-size-18">Team Members  
                <span>(@filteredTeamMembers.Count)</span>
            </h4>

            <div class="page-title-right">
                @*<ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a emailef="javascript: void(0);">Invoices</a></li>
                    <li class="breadcrumb-item active">Invoice List</li>
                </ol>*@
                <button type="button" class="btn btn-sm btn-primary" @onclick="AddNew" title="Add New TeamMember"><span class="fas fa-plus"></span> Add New</button>
            </div>

        </div>
    </div>
</div>
<!-- end page title -->

<div class="row">
    <div class="col-lg-12">

        <RadzenDataGrid Data="@teamMembers" IsLoading="isLoading" TItem="TeamMemberListModel"
                        AllowFiltering="true" AllowColumnResize="true"
                        FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowSorting="true" AllowPaging="true" PageSize="20"
                        SelectionMode="DataGridSelectionMode.Multiple"
                        PagerHorizontalAlign="HorizontalAlign.Center"
                        ShowPagingSummary="true" PageSizeOptions="@pageSizeOptions"
                        RowDoubleClick="(async (arg)=> await RowDoubleClick(arg))">
            <Columns>
                <RadzenDataGridColumn TItem="TeamMemberListModel" Property="EmployeeId" Title="Employee Id" SortOrder="SortOrder.Ascending" />
                <RadzenDataGridColumn TItem="TeamMemberListModel" Property="FullName" Title="Name" SortOrder="SortOrder.Ascending" />
                <RadzenDataGridColumn TItem="TeamMemberListModel" Property="Phone" Title="Phone" SortOrder="SortOrder.Ascending" />
                <RadzenDataGridColumn TItem="TeamMemberListModel" Property="TeamName" Title="Team Name" TextAlign="TextAlign.Center" Filterable="false" />
                <RadzenDataGridColumn TItem="TeamMemberListModel" Property="TeamRoleName" Title="Role On Team" TextAlign="TextAlign.Center" Filterable="false" />
                <RadzenDataGridColumn TItem="TeamMemberListModel" Property="CreatedDate" Title="Created Date" TextAlign="TextAlign.Center" Filterable="false" />
                <RadzenDataGridColumn Width="120px" TItem="TeamMemberListModel" Property="Id" Title="Actions" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                    <Template Context="teamMember">
                            <button type="button" title="Edit Team" class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="(async () => await Edit(teamMember.ObjectId))">
                                <span class="fas fa-pencil-alt"></span>
                            </button>
                        <a href="/management/team-members/@teamMember.Id" title="Edit Team" class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="(async () => Delete(teamMember))">
                            <span class="fas fa-eye"></span>
                        </a>

                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@if (isPopupVisible)
{
   <EditForm Model=@teamMember OnValidSubmit="@InsertUpdateTeamMember" >
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Team Member</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAddEditPopup"></button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <TeamMemberAddEdit teamMember="@teamMember" teamRoles="@teamRoles" contacts="@contacts" Name="@Name"  teams = "@teams" />
                            <div class="col">
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Save Changes</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseAddEditPopup">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

<ModalNotification @ref="ModalNotification" ConfirmationChanged="ConfirmDelete_Click">
</ModalNotification>

@code {
    [Parameter]
    public int teamId { get; set; }

    protected ModalNotification ModalNotification { get; set; }

    bool isSubmitting;
    private List<TeamMemberListModel> teamMembers = new List<TeamMemberListModel>();

    private TeamMember teamMember = null;


    bool isPopupVisible = false;
    private LoginUserInfoViewModel loginUser = null;
    private string searchText = "";
    private string selectedObjectId = "";
    private string Name;
    private List<TeamRoleModel> teamRoles;
    private List<ContactModel> contacts;
    private List<TeamModel> teams;
    bool isLoading = false;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 50, 100, 500 };

    protected override async Task OnInitializedAsync()
    {
        loginUser = _workContext.LoginUserInfo;
        await LoadTeamMembers();
        await LoadTeamRoles();
        await LoadContacts();
        await LoadTeams();
    }

    private async Task LoadTeamMembers()
    {
        //Todo:Rakib
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.IsInRole(PermissionConstants.CanViewAllTeamMembers))
        {
            teamMembers = await _teamMemberService.GetAll();
        }
        else
        {
            teamMembers = await _teamMemberService.GetTeamMembersByContactId(loginUser.ContactId);   
        }
        //Todo:Rakib
    }

    private async Task LoadTeamRoles()
    {
        teamRoles = await _teamRoleService.GetAll();
    }

    private async Task LoadContacts()
    {
        contacts = await _contactManager.GetAllEmployee();
    }
    private async Task LoadTeams()
    {
        teams = await _teamService.GetAll();
    }
    private async Task RowDoubleClick(DataGridRowMouseEventArgs<TeamMemberListModel> args)
    {
        await Edit(args.Data.ObjectId);
    }
    private async Task InsertUpdateTeamMember()
    {
        isSubmitting = true;



        if (teamMember.Id == 0)
        {
            teamMember.CreatedByContactId = loginUser.ContactId;
            teamMember.ObjectId = Guid.NewGuid().ToString();


            //GetContactId By Employee Id
            teamMember.ContactId=contacts.Where(c => c.EmployeeId == teamMember.EmployeeId).ToList().FirstOrDefault().Id;

            // Check U

            var addResponse = await _teamMemberService.Insert(teamMember);

            if (!addResponse.IsSuccess)
            {
                ModalNotification.ShowMessage("Error",addResponse.Message);
                isSubmitting = false;
                return;
            }
        }
        else
        {
            teamMember.UpdatedByContactId = loginUser.ContactId;
            var updateResponse = await _teamMemberService.Update(teamMember);

            if (!updateResponse.IsSuccess)
            {
                ModalNotification.ShowMessage("Error",updateResponse.Message);
                isSubmitting = false;
                return;
            }
        }

        teamMember = new TeamMember { TeamId = teamId };
        isSubmitting = false;

        await LoadTeamMembers();
        CloseAddEditPopup();
    }

    string StatusText()
    {
        /*
        if (teamMember.Status == (int)GeneralStatus.Active)
            {
            return "<span class='badge bg-success'>Active</span>";
        }
        */
        return  "<span class='badge bg-info text-dark'>Inactive</span>";
    }

    void AddNew()
    {
        teamMember = new TeamMember { TeamId = teamId };
        Name = string.Empty;

        isSubmitting = false;
        ShowAddEditPopup();
    }

    void ShowAddEditPopup()
    {
        isPopupVisible = true;
    }

    void CloseAddEditPopup()
    {
        isPopupVisible = false;
    }

    protected void Delete(TeamMemberListModel teamMember)
    {
        selectedObjectId = teamMember.ObjectId;
        var msg = $"Are you sure you want to delete the teamMember \"{teamMember.FullName}\"?";
        ModalNotification.ShowConfirmation("Confirm Delete",msg);
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var deleteResponse = await _teamMemberService.Delete(selectedObjectId);

            if (deleteResponse.IsSuccess)
            {
                await LoadTeamMembers();
                teamMember = new TeamMember();
                CloseAddEditPopup();
            }
            else
            {
                ModalNotification.ShowMessage("Error",deleteResponse.Message);
            }
        }

        isSubmitting = false;
    }

    private async Task Edit(string objectId)
    {
        teamMember = await _teamMemberService.GetByObjectId(objectId);
        ShowAddEditPopup();
    }

    List<TeamMemberListModel> filteredTeamMembers => teamMembers
                                              .Where(i => 
                                               i.FirstName.ToLower().Contains(searchText.ToLower()) ||
                                               i.LastName.ToLower().Contains(searchText.ToLower())
                                        ).ToList();
}
