@page "/accounting/overheadcost"

@attribute [Authorize(Roles = PermissionConstants.Accouting_ViewAllOverheadCost)]

@using CutOutWiz.Core.Utilities
@using CutOutWiz.Core
@using CutOutWiz.Services.Managers.Common
@using CutOutWiz.Services.Models.Accounting
@using CutOutWiz.Services.Models.Common
@using CutOutWiz.Core.Models.Accounting
@using CutOutWiz.Services.Managers.Accounting
@using CutOutWiz.Services.ClientCommonCategoryService.CommonCategories;
@using CutOutWiz.Services.EncryptedMethodServices;
@using CutOutWiz.Services.Security;
@using KowToMateAdmin.Models.Security
@using KowToMateAdmin.Pages.Shared
@using static CutOutWiz.Core.Utilities.Enums
@using CutOutWiz.Services.Models.ClientCategoryServices

@inject IWorkContext _workContext
@inject ICompanyManager _companyService
@inject IOverheadCostManager _overheadcostService

<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <h4 class="mb-sm-0 font-size-18">
                Overhead Cost
            </h4>
            <AuthorizeView Roles="@PermissionConstants.Accouting_CanAddNewOverheadCost">
            <div class="page-title-right">
                <button type="button" class="btn btn-sm btn-primary" @onclick="AddNew" title="Add New OverheadCost"><span class="fas fa-plus"></span> Add New</button>
            </div>
            </AuthorizeView>

        </div>
    </div>
</div>
<!-- end page title -->

<div class="row">
    <div class="col-lg-12">

        <RadzenDataGrid Data="@overheadcostings" IsLoading="isLoading" TItem="OverheadCostingListViewModel"
                        AllowFiltering="true" AllowColumnResize="true"
                        FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowSorting="true" AllowPaging="true" PageSize="20"
                        PagerHorizontalAlign="HorizontalAlign.Center"
                        ShowPagingSummary="true" PageSizeOptions="@pageSizeOptions"
                        RowDoubleClick="(async (arg)=> await RowDoubleClick(arg))">
            <Columns>

                <RadzenDataGridColumn TItem="OverheadCostingListViewModel" Property="Month" Title="Month" TextAlign="TextAlign.Center" Filterable="true" />

                <RadzenDataGridColumn TItem="OverheadCostingListViewModel" Property="Year" Title="Year" SortOrder="SortOrder.Ascending" Filterable="true" />
                
                <RadzenDataGridColumn TItem="OverheadCostingListViewModel" Property="Amount" Title="Amount" TextAlign="TextAlign.Center" Filterable="false" />
                <RadzenDataGridColumn TItem="OverheadCostingListViewModel" Property="CreatedByUsername" Title="Created By" TextAlign="TextAlign.Center" Filterable="false" />
                <RadzenDataGridColumn TItem="OverheadCostingListViewModel" Property="CreatedDate" Title="Created Date" TextAlign="TextAlign.Center" Filterable="false" />
                <RadzenDataGridColumn Width="120px" TItem="OverheadCostingListViewModel" Property="Id" Title="Actions" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <button type="button" class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="(async () => await Edit(data.Id))">
                            <span class="fas fa-pencil-alt"></span>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger btn-tbl-action" @onclick="() => Delete(data.Id)">
                            <span class="fas fa-times"></span>
                        </button>
                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@if (isPopupVisible)
{
    <EditForm Model=@overheadCosting OnValidSubmit="@InsertUpdateOverheadCost">
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Common Category</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAddEditPopup"></button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <OverheadcostAddOrEdit overheadCost="overheadCosting" />
                            <div class="col">
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Save Changes</button>
                        @if (overheadCosting.Id > 0)
                        {
                            <button type="button" class="btn btn-danger" disabled="@isSubmitting" @onclick="() => Delete(overheadCosting.Id)">Delete</button>
                        }
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseAddEditPopup">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

<ModalNotification @ref="ModalNotification" ConfirmationChanged="ConfirmDelete_Click">
</ModalNotification>

@code {
    protected ModalNotification ModalNotification { get; set; }

    bool isSubmitting;
    //private List<OverheadCosting> overheadcostings;
    private List<OverheadCostingListViewModel> overheadcostings;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 50, 100, 500 };
    bool isLoading = false;
    private OverheadCostingModel overheadCosting = new OverheadCostingModel();
    bool isPopupVisible = false;
    private LoginUserInfoViewModel loginUser = null;
    private int selectedObjectId = 0;

    // List<CustomEnumTypes> statuses = new List<CustomEnumTypes>();
    // private byte? filterStatus;

    // List<CustomEnumTypes> filterTypes = new List<CustomEnumTypes>();
    // private byte? filterTypeStatus;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        loginUser = _workContext.LoginUserInfo;
        await LoadOverheadcostingList();
        isLoading = false;
    }

    private async Task LoadOverheadcostingList()
    {
        overheadcostings = await _overheadcostService.GetAll();
    }
    private async Task RowDoubleClick(DataGridRowMouseEventArgs<OverheadCostingListViewModel> args)
    {
        await Edit(args.Data.Id);
    }

    private async Task InsertUpdateOverheadCost()
    {
        isSubmitting = true;

        if (overheadCosting.Id == 0)
        {
            overheadCosting.CreatedByContactId = loginUser.ContactId;
            //CommonCategory.ObjectId = Guid.NewGuid().ToString();
            overheadCosting.CreatedDate = DateTime.Now;
            var addResponse = await _overheadcostService.Insert(overheadCosting);

            if (!addResponse.IsSuccess)
            {
                ModalNotification.ShowMessage("Error", addResponse.Message);
                isSubmitting = false;
                return;
            }
        }
        else
        {
            overheadCosting.UpdatedByContactId = loginUser.ContactId;
            overheadCosting.UpdatedDate = DateTime.Now;
            var updateResponse = await _overheadcostService.Update(overheadCosting);

            if (!updateResponse.IsSuccess)
            {
                ModalNotification.ShowMessage("Error", updateResponse.Message);
                isSubmitting = false;
                return;
            }
        }

        overheadCosting = new OverheadCostingModel();
        isSubmitting = false;

        await LoadOverheadcostingList();
        CloseAddEditPopup();
    }

    void AddNew()
    {
        overheadCosting = new OverheadCostingModel {  };

        isSubmitting = false;
        ShowAddEditPopup();
    }

    private async Task Edit(int id)
    {
        overheadCosting = await _overheadcostService.GetById(id);
        ShowAddEditPopup();
    }

    void ShowAddEditPopup()
    {
        isPopupVisible = true;
    }

    void CloseAddEditPopup()
    {
        isPopupVisible = false;
    }

    protected void Delete(int objectId)
    {
        selectedObjectId = objectId;
        var msg = $"Are you sure you want to delete the Overhead Cost?";
        ModalNotification.ShowConfirmation("Confirm Delete", msg);
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var deleteResponse = await _overheadcostService.Delete(selectedObjectId);

            if (deleteResponse.IsSuccess)
            {
                await LoadOverheadcostingList();
                overheadCosting = new OverheadCostingModel();
                CloseAddEditPopup();
            }
            else
            {
                ModalNotification.ShowMessage("Error", deleteResponse.Message);
            }
        }

        isSubmitting = false;
    }
}