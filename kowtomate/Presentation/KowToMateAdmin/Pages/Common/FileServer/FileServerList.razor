@page "/common/file-servers"

@attribute [Authorize(Roles = "Common.ManageFileServers")]

@using CutOutWiz.Core.Utilities
@using CutOutWiz.Core
@using CutOutWiz.Services.Managers.Common
@using CutOutWiz.Services.Models.Common
@using KowToMateAdmin.Models.Security
@using KowToMateAdmin.Pages.Shared
@using static CutOutWiz.Core.Utilities.Enums

@inject IWorkContext _workContext
@inject IFileServerManager _fileServerService

<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <h4 class="mb-sm-0 font-size-18">
                File Servers
            </h4>
            <div class="page-title-right">
                <button type="button" class="btn btn-sm btn-primary" @onclick="AddNew" title="Add New FileServer"><span class="fas fa-plus"></span> Add New</button>
            </div>

        </div>
    </div>
</div>
<!-- end page title -->

<div class="row">
    <div class="col-lg-12">

        <RadzenDataGrid Data="@fileServers" IsLoading="isLoading" TItem="FileServerModel"
                        AllowFiltering="true" AllowColumnResize="true"
                        FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowSorting="true" AllowPaging="true" PageSize="20"
                        PagerHorizontalAlign="HorizontalAlign.Center"
                        ShowPagingSummary="true" PageSizeOptions="@pageSizeOptions"
                        RowDoubleClick="(async (arg)=> await RowDoubleClick(arg))">
            <Columns>
                <RadzenDataGridColumn TItem="FileServerModel" Property="Name" Title="Server Name" SortOrder="SortOrder.Ascending" />
                <RadzenDataGridColumn TItem="FileServerModel" Property="FileServerType" Title="Server Type" FilterValue="@filterTypeStatus" TextAlign="TextAlign.Center">
                    <FilterTemplate>
                        <RadzenDropDown @bind-Value=@filterTypeStatus Style="width:100%;" TextProperty="EnumName" ValueProperty="EnumValue"
                                        Data="@(filterTypes)" AllowClear="true" />
                    </FilterTemplate>
                    <Template Context="data">
                        @((FileServerType)data.FileServerType)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="FileServerModel" Property="IsDefault" Title="Is Default" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="FileServerModel" Property="SubFolder" Title="SubFolder" TextAlign="TextAlign.Center" Filterable="false" />
                <RadzenDataGridColumn TItem="FileServerModel" Property="Status" Title="Status" FilterValue="@filterStatus" TextAlign="TextAlign.Center">
                    <FilterTemplate>
                        <RadzenDropDown @bind-Value=@filterStatus Style="width:100%;" TextProperty="EnumName" ValueProperty="EnumValue"
                                        Data="@(statuses)" AllowClear="true" />
                    </FilterTemplate>
                    <Template Context="role">
                        @if (role.Status == (int)GeneralStatus.Active)
                        {
                            <span class="badge bg-success">Active</span>
                        }
                        else
                        {
                            <span class="badge bg-warning text-dark">Inactive</span>
                        }
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="FileServerModel" Property="CreatedDate" Title="Created Date" TextAlign="TextAlign.Center" Filterable="false" />
                <RadzenDataGridColumn Width="120px" TItem="FileServerModel" Property="Id" Title="Actions" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <button type="button" class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="(async () => await Edit(data.ObjectId))">
                            <span class="fas fa-pencil-alt"></span>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger btn-tbl-action" @onclick="() => Delete(data.ObjectId,data.Name)">
                            <span class="fas fa-times"></span>
                        </button>
                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@if (isPopupVisible)
{
    <EditForm Model=@fileServer OnValidSubmit="@InsertUpdateFileServer">
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">File Server</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAddEditPopup"></button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <FileServerAddEdit fileServer="fileServer" />
                            <div class="col">
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Save Changes</button>
                        @if (!string.IsNullOrWhiteSpace(fileServer.ObjectId))
                        {
                            <button type="button" class="btn btn-danger" disabled="@isSubmitting" @onclick="() => Delete(fileServer.ObjectId,fileServer.Name)">Delete</button>
                        }
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseAddEditPopup">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

<ModalNotification @ref="ModalNotification" ConfirmationChanged="ConfirmDelete_Click">
</ModalNotification>

@code {
    protected ModalNotification ModalNotification { get; set; }

    bool isSubmitting;
    private List<FileServerModel> fileServers;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 50, 100, 500 };
    bool isLoading = false;
    private FileServerModel fileServer = null;
    bool isPopupVisible = false;
    private LoginUserInfoViewModel loginUser = null;
    private string selectedObjectId = "";

    List<CustomEnumTypes> statuses = new List<CustomEnumTypes>();
    private byte? filterStatus;

    List<CustomEnumTypes> filterTypes = new List<CustomEnumTypes>();
    private byte? filterTypeStatus;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        loginUser = _workContext.LoginUserInfo;
        await LoadFileServers();

        //Populate Status
        foreach (GeneralStatus item in Enum.GetValues(typeof(GeneralStatus)))
        {
            statuses.Add(new CustomEnumTypes { EnumName = item.ToString(), EnumValue = Convert.ToByte((int)item) });
        }
        //Populate Filter Types
        foreach (FileServerType item in Enum.GetValues(typeof(FileServerType)))
        {
            filterTypes.Add(new CustomEnumTypes { EnumName = item.ToString(), EnumValue = Convert.ToByte((int)item) });
        }

        isLoading = false;
    }

    private async Task LoadFileServers()
    {
        fileServers = await _fileServerService.GetAll();
    }
    private async Task RowDoubleClick(DataGridRowMouseEventArgs<FileServerModel> args)
    {
        await Edit(args.Data.ObjectId);
    }

    private async Task InsertUpdateFileServer()
    {
        isSubmitting = true;

        if (fileServer.Id == 0)
        {
            fileServer.CreatedByContactId = loginUser.ContactId;
            fileServer.ObjectId = Guid.NewGuid().ToString();

            var addResponse = await _fileServerService.Insert(fileServer);

            if (!addResponse.IsSuccess)
            {
                ModalNotification.ShowMessage("Error", addResponse.Message);
                isSubmitting = false;
                return;
            }
        }
        else
        {
            fileServer.UpdatedByContactId = loginUser.ContactId;
            var updateResponse = await _fileServerService.Update(fileServer);

            if (!updateResponse.IsSuccess)
            {
                ModalNotification.ShowMessage("Error", updateResponse.Message);
                isSubmitting = false;
                return;
            }
        }

        fileServer = new FileServerModel();
        isSubmitting = false;

        await LoadFileServers();
        CloseAddEditPopup();
    }

    void AddNew()
    {
        fileServer = new FileServerModel { Status = (int)GeneralStatus.Active };

        isSubmitting = false;
        ShowAddEditPopup();
    }

    private async Task Edit(string objectId)
    {
        fileServer = await _fileServerService.GetByObjectId(objectId);
        ShowAddEditPopup();
    }

    void ShowAddEditPopup()
    {
        isPopupVisible = true;
    }

    void CloseAddEditPopup()
    {
        isPopupVisible = false;
    }

    protected void Delete(string objectId, string name)
    {
        selectedObjectId = objectId;
        var msg = $"Are you sure you want to delete the fileServer \"{name}\"?";
        ModalNotification.ShowConfirmation("Confirm Delete", msg);
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var deleteResponse = await _fileServerService.Delete(selectedObjectId);

            if (deleteResponse.IsSuccess)
            {
                await LoadFileServers();
                fileServer = new FileServerModel();
                CloseAddEditPopup();
            }
            else
            {
                ModalNotification.ShowMessage("Error", deleteResponse.Message);
            }
        }

        isSubmitting = false;
    }
}