@page "/security/roles"
@page "/security/roles/{paramCompanyObjectId}"

@attribute [Authorize(Roles = "Role.ViewList")]

@using CutOutWiz.Core.Utilities
@using CutOutWiz.Services.Managers.Common
@using CutOutWiz.Services.MapperHelper
@using CutOutWiz.Services.Models.Security
@using CutOutWiz.Services.Security
@using KowToMateAdmin.Models.Security
@using KowToMateAdmin.Pages.Shared
@using static CutOutWiz.Core.Utilities.Enums

@inject IWorkContext _workContext
@inject IRoleManager _roleManager
@inject IPermissionService _permissionService
@inject NavigationManager NavigationManager
@inject ICompanyManager _companyService
@inject IMapperHelperService _mapperHelperService

<!-- start page title -->
<div class="row">
	<div class="col-12">
		<div class="page-title-box d-sm-flex align-items-center justify-content-between">
			<h4 class="mb-sm-0 font-size-18">
				Roles
			</h4>
			<div class="page-title-right">
				<AuthorizeView Roles="RoleViewModel.Add">
					<button type="button" class="btn btn-sm btn-primary" @onclick="AddNew" title="Add New RoleViewModel"><span class="fas fa-plus"></span> Add New</button>
				</AuthorizeView>
			</div>
		</div>
	</div>
</div>
<!-- end page title -->
<div class="row">
	<div class="col-lg-12">
		<RadzenDataGrid Data="@roles" IsLoading="isLoading" TItem="RoleViewModel"
						AllowFiltering="true" AllowColumnResize="true"
						FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
						AllowSorting="true" AllowPaging="true" PageSize="20"
						PagerHorizontalAlign="HorizontalAlign.Center"
						ShowPagingSummary="true" PageSizeOptions="@pageSizeOptions"
						RowDoubleClick="(async (arg)=> await RowDoubleClick(arg))">
			<Columns>
				<RadzenDataGridColumn TItem="RoleViewModel" Property="Name" Title="RoleViewModel Name" SortOrder="SortOrder.Ascending" />
				<RadzenDataGridColumn TItem="RoleViewModel" Property="Status" Title="Status" FilterValue="@filterStatus" TextAlign="TextAlign.Center">
					<FilterTemplate>
						<RadzenDropDown @bind-Value=@filterStatus Style="width:100%;" TextProperty="EnumName" ValueProperty="EnumValue"
										Data="@(statuses)" AllowClear="true" />
					</FilterTemplate>
					<Template Context="role">
						@if (role.Status == (int)GeneralStatus.Active)
						{
							<span class="badge bg-success">Active</span>
						}
						else
						{
							<span class="badge bg-warning text-dark">Inactive</span>
						}
					</Template>
				</RadzenDataGridColumn>
				<RadzenDataGridColumn TItem="RoleViewModel" Property="CreatedDate" Title="Created Date" TextAlign="TextAlign.Center" Filterable="false" />
				<RadzenDataGridColumn Width="120px" TItem="RoleViewModel" Property="Id" Title="Actions" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">

					<Template Context="data">

							<AuthorizeView Roles="Role.Edit">
							<button type="button" class="btn btn-sm btn-outline-primary btn-tbl-action mr-3" @onclick="(async () => GoToManagePermissions(data.ObjectId))">
									<span class="fas fa-cog"></span>
								</button>
							</AuthorizeView>
						@if (data.IsFixed != true)
						{
							<AuthorizeView Roles="Role.Edit">
								<button type="button" class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="(async () => await Edit(data.ObjectId))">
									<span class="fas fa-pencil-alt"></span>
								</button>
							</AuthorizeView>
							<AuthorizeView Roles="Role.Delete">
								<button type="button" class="btn btn-sm btn-outline-danger btn-tbl-action" @onclick="() => Delete(data.ObjectId,data.Name)">
									<span class="fas fa-times"></span>
								</button>
							</AuthorizeView>
						}
					</Template>
				</RadzenDataGridColumn>
			</Columns>
		</RadzenDataGrid>

	</div>
</div>

@if (isPopupVisible)
{
	<EditForm Model=@role OnValidSubmit="@InsertUpdateRole">
		<div class="modal" tabindex="-1" style="display:block;">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">RoleViewModel</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAddEditPopup"></button>
					</div>
					<div class="modal-body">
						<DataAnnotationsValidator />
						<div class="row">
							<RoleAddEdit role="role" />
							<div class="col">
							</div>
						</div>
					</div>
					<div class="modal-footer">
						<button type="submit" class="btn btn-primary" disabled="@isSubmitting">Save Changes</button>
						@if (!string.IsNullOrWhiteSpace(role.ObjectId))
						{
							<button type="button" class="btn btn-danger" disabled="@isSubmitting" @onclick="() => Delete(role.ObjectId,role.Name)">Delete</button>
						}
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseAddEditPopup">Close</button>
					</div>
				</div>
			</div>
		</div>
	</EditForm>
}

<ModalNotification @ref="ModalNotification" ConfirmationChanged="ConfirmDelete_Click">
</ModalNotification>

@code {
	[Parameter]
	public string paramCompanyObjectId { get; set; }

	protected ModalNotification ModalNotification { get; set; }
	IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 50, 100, 500 };
	bool isLoading = false;
	bool isSubmitting = false;
	private List<RoleViewModel> roles = new List<RoleViewModel>();

	private RoleViewModel role = null;
	bool isPopupVisible = false;
	private LoginUserInfoViewModel loginUser = null;
	private string selectedObjectId = "";

	List<CustomEnumTypes> statuses = new List<CustomEnumTypes>();
	private byte? filterStatus;

	protected override async Task OnInitializedAsync()
	{
		isLoading = true;
		loginUser = _workContext.LoginUserInfo;
		await LoadRoles();

		//Populate Status
		foreach (GeneralStatus item in Enum.GetValues(typeof(GeneralStatus)))
		{
			statuses.Add(new CustomEnumTypes { EnumName = item.ToString(), EnumValue = Convert.ToByte((int)item) });
		}

		isLoading = false;
	}

	private async Task LoadRoles()
	{
		if (!string.IsNullOrWhiteSpace(paramCompanyObjectId))
		{
			var roleModels = await _roleManager.GetAll(paramCompanyObjectId);
			roles = await _mapperHelperService.MapToListAsync<RoleModel, RoleViewModel>(roleModels);
		}
		else
		{
			var roleModels = await _roleManager.GetAll(loginUser.CompanyObjectId);
			roles = await _mapperHelperService.MapToListAsync<RoleModel, RoleViewModel>(roleModels);
		}
	}

	private async Task RowDoubleClick(DataGridRowMouseEventArgs<RoleViewModel> args)
	{
		await Edit(args.Data.ObjectId);
	}

	private async Task InsertUpdateRole()
	{
		isSubmitting = true;

		if (role.Id == 0)
		{
			role.CreatedByContactId = loginUser.ContactId;
			role.ObjectId = Guid.NewGuid().ToString();

			var roleModel = await _mapperHelperService.MapToSingleAsync<RoleViewModel, RoleModel>(role);
			var addResponse = await _roleManager.Insert(roleModel);

			if (!addResponse.IsSuccess)
			{
				ModalNotification.ShowMessage("Error", addResponse.Message);
				isSubmitting = false;
				return;
			}
		}
		else
		{
			role.UpdatedByContactId = loginUser.ContactId;

			var roleModel = await _mapperHelperService.MapToSingleAsync<RoleViewModel, RoleModel>(role);
			var updateResponse = await _roleManager.Update(roleModel);

			if (!updateResponse.IsSuccess)
			{
				ModalNotification.ShowMessage("Error", updateResponse.Message);
				isSubmitting = false;
				return;
			}
		}

		role = new RoleViewModel();
		isSubmitting = false;

		await LoadRoles();
		CloseAddEditPopup();
	}

	string StatusText()
	{
		if (role.Status == (int)GeneralStatus.Active)
		{
			return "<span class='badge bg-success'>Active</span>";
		}

		return "<span class='badge bg-info text-dark'>Inactive</span>";
	}

	void AddNew()
	{
		role = new RoleViewModel { Status = (int)GeneralStatus.Active };

		if (!string.IsNullOrWhiteSpace(paramCompanyObjectId))
		{
			role.CompanyObjectId = paramCompanyObjectId;
		}
		else
		{
			role.CompanyObjectId = loginUser.CompanyObjectId;
		}

		isSubmitting = false;
		ShowAddEditPopup();
	}

	private async Task Edit(string objectId)
	{
		var roleModel = await _roleManager.GetByObjectId(objectId);
		role = await _mapperHelperService.MapToSingleAsync<RoleModel, RoleViewModel>(roleModel);
		ShowAddEditPopup();
	}

	void ShowAddEditPopup()
	{
		isPopupVisible = true;
	}

	void CloseAddEditPopup()
	{
		isPopupVisible = false;
	}

	protected void Delete(string objectId, string name)
	{
		selectedObjectId = objectId;
		var msg = $"Are you sure you want to delete the role \"{name}\"?";
		ModalNotification.ShowConfirmation("Confirm Delete", msg);
	}

	protected async Task ConfirmDelete_Click(bool deleteConfirmed)
	{
		if (deleteConfirmed)
		{
			var deleteResponse = await _roleManager.Delete(selectedObjectId);

			if (deleteResponse.IsSuccess)
			{
				await LoadRoles();
				role = new RoleViewModel();
				CloseAddEditPopup();
			}
			else
			{
				ModalNotification.ShowMessage("Error", deleteResponse.Message);
			}
		}

		isSubmitting = false;
	}

	protected void GoToManagePermissions(string objectId)
	{
		if (string.IsNullOrWhiteSpace(paramCompanyObjectId))
		{
			NavigationManager.NavigateTo($"/security/role/assignpermissions/{objectId}", true);
		}
		else
		{
			NavigationManager.NavigateTo($"/security/role/assignpermissions/{objectId}/cd", true);
		}
	}
}
