@page "/common/lnlsdfdsfsdfsadlfsd"

@attribute [Authorize(Roles = "Category.CanViewClientCategoryList")]

@using CutOutWiz.Core.Utilities
@using CutOutWiz.Core
@using CutOutWiz.Services.Models.Common
@using CutOutWiz.Services.ClientCommonCategoryService.ClientCategoryServices
@using CutOutWiz.Services.ClientCommonCategoryService.ClientCategorys
@using CutOutWiz.Services.ClientCommonCategoryService.CommonCategories;
@using CutOutWiz.Services.ClientCommonCategoryService.CommonCategoryServices
@using CutOutWiz.Services.EncryptedMethodServices;
@using CutOutWiz.Services.Security;
@using KowToMateAdmin.Helper
@using KowToMateAdmin.Models.Security
@using KowToMateAdmin.Pages.Shared
@using static CutOutWiz.Core.Utilities.Enums
@using CutOutWiz.Services.Managers.Common
@using CutOutWiz.Services.Models.ClientCategoryServices


@inject IWorkContext _workContext
@inject ICompanyManager _companyService

@inject ICommonServiceService _commonServiceService
@inject ICommonCategoryService _commonCategoryService
@inject ICommonCategoryServiceService _commonCategoryServiceService
@inject IClientCategoryService _clientCategoryService
@inject IClientCategoryServiceService _clientCategoryServiceService
@inject IEncryptedMethodService _encryptedMethodServices
@inject IContactManager _contactManager
@inject IJSRuntime js



<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <h4 class="mb-sm-0 font-size-18">
                Client Categories
            </h4>
            <div class="page-title-right">
                <button type="button" class="btn btn-sm btn-primary" @onclick="AddNew" title="Add New CommonCategory"><span class="fas fa-plus"></span> Add New</button>
            </div>

        </div>
    </div>
</div>
<!-- end page title -->

<div class="row">
    <div class="col-lg-12">

        <RadzenDataGrid Data="@clientCategories" IsLoading="isLoading" TItem="ClientCategoryModel"
                        AllowFiltering="true" AllowColumnResize="true"
                        FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowSorting="true" AllowPaging="true" PageSize="20"
                        PagerHorizontalAlign="HorizontalAlign.Center"
                        ShowPagingSummary="true" PageSizeOptions="@pageSizeOptions"
                        RowDoubleClick="(async (arg)=> await RowDoubleClick(arg))">
            <Columns>

                <AuthorizeView Roles=@PermissionConstants.Category_CanViewClientCategoryPrice>
                    <RadzenDataGridColumn TItem="ClientCategoryModel" Property="PriceInUSD" Title="Price In USD" TextAlign="TextAlign.Center" Filterable="false">
                        <Template Context="order">
                            <p title="Price In USD">@_encryptedMethodServices.DecryptData(order.PriceInUSD)</p>
                        </Template>
                    </RadzenDataGridColumn>
                </AuthorizeView>
                <RadzenDataGridColumn TItem="ClientCategoryModel" Property="CompanyName" Title="Company Name" SortOrder="SortOrder.Ascending" />
                <RadzenDataGridColumn TItem="ClientCategoryModel" Property="CategoryName" Title="Category Name" SortOrder="SortOrder.Ascending" />
                <RadzenDataGridColumn TItem="ClientCategoryModel" Property="TimeInMinutes" Title="Time In Minutes" TextAlign="TextAlign.Center" Filterable="false" />


                <RadzenDataGridColumn TItem="ClientCategoryModel" Property="IsActive" Title="Is Active" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="ClientCategoryModel" Property="CreatedByUsername" Title="Created By" TextAlign="TextAlign.Center" Filterable="false" />
                @*
                <RadzenDataGridColumn TItem="ClientCategory" Property="CreatedByUsername" Title="Created By" SortOrder="SortOrder.Ascending">
                <Template Context="order">
                @if (!string.IsNullOrEmpty(order.CreatedByUsername))
                {
                <p title="Price In USD">@_contactManager.GetByObjectId(order.CreatedByUsername).Result.FirstName</p>
                }
                </Template>
                </RadzenDataGridColumn> *@

                <RadzenDataGridColumn TItem="ClientCategoryModel" Property="CreatedDate" Title="Created Date" TextAlign="TextAlign.Center" Filterable="false" />
                <RadzenDataGridColumn Width="120px" TItem="ClientCategoryModel" Property="Id" Title="Actions" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <button type="button" class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="(async () => await Edit(data.Id))">
                            <span class="fas fa-pencil-alt"></span>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger btn-tbl-action" @onclick="() => Delete(data.Id,data.Id.ToString())">
                            <span class="fas fa-times"></span>
                        </button>
                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@if (isPopupVisible)
{
    <EditForm Model=@clientCategory OnValidSubmit="@InsertUpdateClientCategory">
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Client Category</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAddEditPopup"></button>
                    </div>
                    <div class="modal-body">
                        @* <DataAnnotationsValidator /> *@
                        <div class="row">
                            @* <ClientCategoryAddOrEdit clientCagtegory="clientCategory" companies="companies" commonCategories="commonCategories" commonServices="commonServices" /> *@
                            <ClientCategoryAdd clientCagtegory="clientCategory" companies="companies" commonCategories="commonCategories" OnDeleteRow="DeleteRow" SelectedServiceList="OnSelectedServiceList" AddNew="AddNewService" SelectedCategoryCommonServices="selectedCategoryCommonServices" GetCommonService="GetCommonService" />
                            <div class="col">
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Save Changes</button>
                        @if (clientCategory.Id > 0)
                        {
                            <button type="button" class="btn btn-danger" disabled="@isSubmitting" @onclick="() => Delete(clientCategory.Id,clientCategory.Id.ToString())">Delete</button>
                        }
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseAddEditPopup">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}


@if (isServicePopup)
{
    <div class="row">
        <div class="col-lg-12">
            <div class="col-lg-8">
            </div>
            <div class="col-lg-4">
                <div class="modal" tabindex="-1" style="display:block;">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Add Service</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseNewService"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-2 row">
                                    <label for="Permissions" class="col-sm-4 col-form-label fw-bold">Select Services</label>
                                    <div class="col-sm-8">
                                        <RadzenDropDown AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                        @bind-Value="@selectedServiceIds" Multiple="true" Placeholder="Select..." Data="@commonServices"
                                                        TextProperty="Name" ValueProperty="Id" Class="w-100" Change="@SelectedServiceAdd" />
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary" disabled="@isSubmitting" @onclick="SaveService">Save Changes</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseNewService">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@*
 @if (isPopupVisible)
{
    <EditForm Model=@clientCategory OnValidSubmit="@InsertUpdateClientCategory">
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Client Category</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAddEditPopup"></button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <ClientCategoryAddPage clientCagtegory="clientCategory" companies="companies" commonCategories="commonCategories"/>
                            <div class="col">
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Save Changes</button>
                        @if (clientCategory.Id > 0)
                        {
                            <button type="button" class="btn btn-danger" disabled="@isSubmitting" @onclick="() => Delete(clientCategory.Id,clientCategory.Id.ToString())">Delete</button>
                        }
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseAddEditPopup">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}  *@
<ModalNotification @ref="ModalNotification" ConfirmationChanged="ConfirmDelete_Click">
</ModalNotification>

@code {
    protected ModalNotification ModalNotification { get; set; }

    bool isSubmitting;
    private List<ClientCategoryModel> clientCategories;
    private List<CompanyModel> companies;
    private List<CommonCategoryModel> commonCategories;
    private List<CommonServiceModel> commonServices;
    private List<CommonServiceModel> selectedCategoryCommonServices;

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 50, 100, 500 };
    bool isLoading = false;
    private ClientCategoryModel clientCategor = new ClientCategoryModel();
    private ClientCategoryRequestViewModel clientCategory = new ClientCategoryRequestViewModel();
    bool isPopupVisible = false;
    private LoginUserInfoViewModel loginUser = null;
    private int selectedObjectId = 0;

    List<CustomEnumTypes> statuses = new List<CustomEnumTypes>();
    private byte? filterStatus;

    List<CustomEnumTypes> filterTypes = new List<CustomEnumTypes>();
    private byte? filterTypeStatus;
    bool isServicePopup = false;
    public List<int> selectedServiceIds { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        loginUser = _workContext.LoginUserInfo;
        await LoadCommonCategorys();
        //Populate Status
        foreach (GeneralStatus item in Enum.GetValues(typeof(GeneralStatus)))
        {
            statuses.Add(new CustomEnumTypes { EnumName = item.ToString(), EnumValue = Convert.ToByte((int)item) });
        }
        //Populate Filter Types
        // foreach (CommonCategoryType item in Enum.GetValues(typeof(CommonCategoryType)))
        // {
        //     filterTypes.Add(new CustomEnumTypes { EnumName = item.ToString(), EnumValue = Convert.ToByte((int)item) });
        // }

        isLoading = false;
    }

    private async Task LoadCommonCategorys()
    {
        clientCategories = await _clientCategoryService.GetAll();
        companies = await _companyService.GetAll();
        commonCategories = await _commonCategoryService.GetAll();
        commonServices = await _commonServiceService.GetAll();
    }
    private async Task RowDoubleClick(DataGridRowMouseEventArgs<ClientCategoryModel> args)
    {
        await Edit(args.Data.Id);
    }

    private async Task InsertUpdateClientCategory()
    {
        isSubmitting = true;

        if (clientCategory.Id == 0)
        {
            clientCategory.CreatedByUsername = loginUser.UserObjectId;
            //CommonCategory.ObjectId = Guid.NewGuid().ToString();

            var encryptedPrice = "";

            if (clientCategory.PriceInUSD != null)
            {
                encryptedPrice = _encryptedMethodServices.EncryptData(clientCategory.PriceInUSD);
            }

            // Firstly Common Services Save


            // Secoundly Common Category Save

            var commonCategory = new CommonCategoryModel
                {
                    Name = clientCategory.CategoryName,
                    PriceInUSD = encryptedPrice.ToString(),
                    TimeInMinutes = clientCategory.TimeInMinutes,
                    IsActive = clientCategory.IsActive,
                    CreatedByUsername = clientCategory.CreatedByUsername,
                };

            var categoryInsertResponse = await _commonCategoryService.Insert(commonCategory);

            // Thirdly Common Category Services Save

            foreach (var commonsSrviceId in clientCategory.CommonServiceId)
            {
                var commonCategoryService = new CommonCategoryServiceModel
                    {
                        CommonCategoryId = categoryInsertResponse.Result,
                        CommonServiceId = Convert.ToInt32(commonsSrviceId),
                        IsActive = clientCategory.IsActive,

                    };

                var commonCategoryServiceResponse = await _commonCategoryServiceService.Insert(commonCategoryService);
            }

            // Fourthly Client Category Save

            var clientcategory = new ClientCategoryModel
                {
                    ClientCompanyId = clientCategory.ClientCompanyId,
                    CommonCategoryId = categoryInsertResponse.Result,
                    TimeInMinutes = clientCategory.TimeInMinutes,
                    PriceInUSD = encryptedPrice,
                    IsActive = clientCategory.IsActive,
                    CreatedByUsername = clientCategory.CreatedByUsername
                };

            var clientcategoryResponse = await _clientCategoryService.Insert(clientcategory);


            // Fively Client Category Service Save

            foreach (var servicId in clientCategory.CommonServiceId)
            {
                var getCommonService = commonServices.Where(x => x.Id == Convert.ToInt32(servicId)).FirstOrDefault();

                var clientcategoryService = new ClientCategoryServiceModel
                    {
                        ClientCategoryId = clientcategoryResponse.Result,
                        CommonServiceId = Convert.ToInt32(servicId),
                        IsActive = clientCategory.IsActive,
                        CreatedByUsername = clientCategory.CreatedByUsername,
                        PriceInUSD = getCommonService.PriceInUSD,
                    };

                var addResponse = await _clientCategoryServiceService.Insert(clientcategoryService);
            }


            // if (!addResponse.IsSuccess)
            // {
            //     ModalNotification.ShowMessage("Error", addResponse.Message);
            //     isSubmitting = false;
            //     return;
            // }
        }
        else
        {
            clientCategory.UpdatedByUsername = loginUser.UserObjectId;

            var encryptedPrice = "";

            if (clientCategory.PriceInUSD != null)
            {
                encryptedPrice = _encryptedMethodServices.EncryptData(clientCategory.PriceInUSD);
            }

            var category = clientCategory;
            // Firstly Common Services Save


            // Secoundly Common Category update

            var commonCategory = new CommonCategoryModel
                {
                    Id = clientCategory.CommonCategoryId,
                    Name = clientCategory.CategoryName,
                    PriceInUSD = encryptedPrice.ToString(),
                    TimeInMinutes = clientCategory.TimeInMinutes,
                    IsActive = clientCategory.IsActive,
                    UpdatedByUsername = clientCategory.CreatedByUsername,
                };

            var categoryInsertResponse = await _commonCategoryService.Update(commonCategory);

            // Thirdly Common Category Services update
            var commonCategoryServices = await _commonCategoryServiceService.GetAll();
            var commonCategoryServiceIds = commonCategoryServices.Where(x => x.CommonCategoryId == clientCategory.CommonCategoryId && (x.IsActive == true && x.IsDeleted == false)).Select(x => x.CommonServiceId.ToString()).ToList();

            // Delete Common Service from Client Category
            var getDeletedServiceIds = clientCategory.PreviousSelectedServiceIds.Except(clientCategory.CommonServiceId).ToList();

            foreach (var service in getDeletedServiceIds)
            {
                var getCommonCategoryServices = await _commonCategoryServiceService.GetAll();
                var getCommonCategoryService = getCommonCategoryServices.Where(x => x.CommonServiceId == Convert.ToInt32(service) && x.CommonCategoryId == clientCategory.CommonCategoryId).FirstOrDefault();
                await _commonCategoryServiceService.Delete(Convert.ToInt32(getCommonCategoryService.Id));
            }

            foreach (var commonService in clientCategory.CommonServiceId)
            {
                if (!string.IsNullOrWhiteSpace(commonService.ToString()))
                {
                    var checkServiceAvailable = commonCategoryServiceIds.Any(s => s == commonService.ToString());

                    if (checkServiceAvailable)
                    {

                        continue;
                    }

                    else
                    {
                        //var haveService = commonCategoryServices.Where(x => x.CommonServiceId == Convert.ToInt32(commonService) && x.CommonCategoryId == clientCategory.CommonCategoryId).FirstOrDefault();
                        var haveService = await _commonCategoryServiceService.GetByServiceIdAndCategoryId(Convert.ToInt32(commonService), clientCategory.CommonCategoryId);

                        if (haveService != null)
                        {
                            var commonCategoryService = new CommonCategoryServiceModel
                                {
                                    Id = haveService.Id,
                                    CommonCategoryId = clientCategory.CommonCategoryId,
                                    CommonServiceId = Convert.ToInt32(commonService),
                                    IsActive = true,
                                    IsDeleted = false,
                                };

                            var commonCategoryServiceResponse = await _commonCategoryServiceService.Update(commonCategoryService);
                        }
                        else
                        {

                            var commonCategoryService = new CommonCategoryServiceModel
                                {
                                    CommonCategoryId = clientCategory.CommonCategoryId,
                                    CommonServiceId = Convert.ToInt32(commonService),
                                    IsActive = clientCategory.IsActive,
                                };

                            var commonCategoryServiceResponse = await _commonCategoryServiceService.Insert(commonCategoryService);
                        }
                    }
                }

                continue;
            }

            // Fourthly Client Category update

            var clientcategory = new ClientCategoryModel
                {
                    Id = clientCategory.Id,
                    ClientCompanyId = clientCategory.ClientCompanyId,
                    CommonCategoryId = clientCategory.CommonCategoryId,
                    TimeInMinutes = clientCategory.TimeInMinutes,
                    PriceInUSD = encryptedPrice,
                    IsActive = clientCategory.IsActive,
                    CreatedByUsername = clientCategory.CreatedByUsername,
                    IsDeleted = false,
                };

            var clientcategoryResponse = await _clientCategoryService.Update(clientcategory);


            // Fively Client Category Service update



            foreach (var servicId in clientCategory.CommonServiceId)
            {
                var checkClientCategoryServiceAvailable = await _clientCategoryServiceService.GetByClientCategoryIdAndServiceId(Convert.ToInt32(servicId), clientCategory.Id);
                if (checkClientCategoryServiceAvailable != null)
                {
                    var clientcategoryService = new ClientCategoryServiceModel
                        {
                            Id = checkClientCategoryServiceAvailable.Id,
                            ClientCategoryId = clientCategory.Id,
                            CommonServiceId = Convert.ToInt32(servicId),
                            IsActive = clientCategory.IsActive,
                            CreatedByUsername = clientCategory.CreatedByUsername,
                            PriceInUSD = checkClientCategoryServiceAvailable.PriceInUSD,
                        };

                    var addResponse = await _clientCategoryServiceService.Update(clientcategoryService);
                }
                else
                {
                    var getCommonService = commonServices.Where(x => x.Id == Convert.ToInt32(servicId)).FirstOrDefault();

                    var clientcategoryService = new ClientCategoryServiceModel
                        {
                            ClientCategoryId = clientcategory.Id,
                            CommonServiceId = Convert.ToInt32(servicId),
                            IsActive = clientCategory.IsActive,
                            CreatedByUsername = clientCategory.CreatedByUsername,
                            PriceInUSD = getCommonService.PriceInUSD,
                        };

                    var addResponse = await _clientCategoryServiceService.Insert(clientcategoryService);
                }

            }
        }

        clientCategory = new ClientCategoryRequestViewModel();
        isSubmitting = false;

        await LoadCommonCategorys();
        CloseAddEditPopup();
    }

    void AddNew()
    {

        isSubmitting = false;
        ShowAddEditPopup();
    }
    void AddNewService()
    {

        isSubmitting = false;
        isServicePopup = true;
        StateHasChanged();
    }
    void CloseNewService()
    {

        isServicePopup = false;
        StateHasChanged();
    }


    private async Task Edit(int id)
    {
        clientCategor = await _clientCategoryService.GetById(id);

        var categoryName = await _commonCategoryService.GetById(clientCategor.CommonCategoryId);
        var categoryServiceList = await _commonCategoryServiceService.GetAll();
        List<string> serviceIds = new List<string>();
        if (categoryServiceList != null && categoryServiceList.Any())
        {
            var categoryServices = categoryServiceList.Where(x => x.CommonCategoryId == categoryName.Id).ToList();
            if (categoryServices != null && categoryServices.Any())
            {
                serviceIds = categoryServices
                            .Select(x => x.CommonServiceId.ToString()) // Convert each ServiceId to a string
                            .ToList();
            }
        }

        clientCategory = new ClientCategoryRequestViewModel
            {
                Id = clientCategor.Id,
                CategoryName = categoryName.Name,
                TimeInMinutes = clientCategor.TimeInMinutes,
                PriceInUSD = _encryptedMethodServices.DecryptData(clientCategor.PriceInUSD),
                IsActive = clientCategor.IsActive,
                ClientCompanyId = clientCategor.ClientCompanyId,
                CommonServiceId = serviceIds,
                CommonCategoryId = clientCategor.CommonCategoryId,
                CompanyName = clientCategor.CompanyName,
                PreviousSelectedServiceIds = serviceIds,
            };

        ShowAddEditPopup();
    }

    void ShowAddEditPopup()
    {
        isPopupVisible = true;
    }

    void CloseAddEditPopup()
    {
        isPopupVisible = false;
    }

    protected void Delete(int objectId, string name)
    {
        selectedObjectId = objectId;
        var msg = $"Are you sure you want to delete the CommonCategory \"{name}\"?";
        ModalNotification.ShowConfirmation("Confirm Delete", msg);
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var deleteResponse = await _clientCategoryService.Delete(selectedObjectId);

            if (deleteResponse.IsSuccess)
            {
                await LoadCommonCategorys();
                clientCategory = new ClientCategoryRequestViewModel();
                CloseAddEditPopup();
            }
            else
            {
                ModalNotification.ShowMessage("Error", deleteResponse.Message);
            }
        }

        isSubmitting = false;
    }
    #region Component

    async Task DeleteRow(CommonServiceModel order)
    {
        var selectedServiceids = selectedServiceIds;
        var service = commonServices;
        if (await js.Confirm("", $"Are you want to delete the {order.Name} service from this Category ?", SweetAlertTypeMessagee.question))
        {
            selectedCategoryCommonServices.Remove(order);
            //selectedServiceIds.Remove(order.Id);
            var serviceList = selectedCategoryCommonServices;
            selectedCategoryCommonServices = new List<CommonServiceModel>();
            selectedCategoryCommonServices = serviceList;
            commonServices.Add(order);
            var commonServic = commonServices.ToList();
            commonServices = new List<CommonServiceModel>();
            this.StateHasChanged();
            commonServices = commonServic;
            selectedServiceIds.Add(order.Id);
            //await LoadCommonServices(selectedServiceIds);
            //selectedCategoryCommonServices.TimeInMinutes = selectedCategoryCommonServices.Sum(x => x.TimeInMinutes);
            await OnSelectedServiceList(order.Id);
            this.StateHasChanged();
        }
    }

    private async Task OnSelectedServiceList(object value)
    {
        this.StateHasChanged();
    }
    private async Task SelectedServiceAdd(object value)
    {
        this.StateHasChanged();
    }
    private bool isFirstRequest = true;

    private async Task GetCommonService()
    {
        if (isFirstRequest)
        {
            isFirstRequest = false;
            return;
        }
        if (selectedCategoryCommonServices != null && selectedCategoryCommonServices.Any())
        {
            if (await js.Confirmation("", "Are you want to select another category, Then clear previous set values?", SweetAlertTypeMessagee.question))
            {
                selectedCategoryCommonServices = await commonServiceList(clientCategory.CommonCategoryId);
                isFirstRequest = true;
            }
            isFirstRequest = true;
        }
        else
        {
            selectedCategoryCommonServices = await commonServiceList(clientCategory.CommonCategoryId);
            isFirstRequest = true;
        }
        StateHasChanged(); // Notify Blazor to re-render the component
    }
    private async Task<List<CommonServiceModel>> commonServiceList(int categoryId)
    {
        var services = await _clientCategoryServiceService.GetCommonServiceByClientCategoryId(categoryId);
        return services;
    }
    private async Task SaveService()
    {
        List<CommonServiceModel> services = new List<CommonServiceModel>();

        foreach (var id in selectedServiceIds)
        {
            var service = await _commonServiceService.GetById(id);
            service.TimeIn = service.TimeInMinutes.ToString();
            selectedCategoryCommonServices.Add(service);
            commonServices.RemoveAll(f => selectedCategoryCommonServices.Any(x => x.Id == f.Id));
        }
        isServicePopup = false;
        StateHasChanged();
    }

    #endregion

}