@page "/security/role/assignpermissions/{roleObjectId}"
@using System.Linq
@*@attribute [Authorize(Roles = "Security.Role.AssignPermissions")]
*@
@using CutOutWiz.Data.Security
@using CutOutWiz.Services.Security
@using KowToMateAdmin.Models.Security
@using KowToMateAdmin.Pages.Shared
@using static CutOutWiz.Core.Utilities.Enums

@inject IWorkContext _workContext
@inject IRoleService _roleService
@inject IPermissionService _permissionService
@inject IModuleService _moduleService
@inject NavigationManager NavigationManager

<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <h4 class="mb-sm-0 font-size-18">Assign Permissions to Role : @role.Name
               @* <span>(@filteredRoles.Count)</span>*@
            </h4>

            <div class="page-title-right">
                @*<ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="javascript: void(0);">Invoices</a></li>
                    <li class="breadcrumb-item active">Invoice List</li>
                </ol>*@  
                <button type="button" class="btn btn-sm btn-secondary" @onclick="backtoRoles" title="Add New Role"><span class="fas fa-list"></span> Back to Roles</button>
               
            </div>
        </div>
    </div>
</div>
<!-- end page title -->
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                @if (nodes is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                   @* <div class="row gy-2 gx-3 align-items-center mb-3">                                           
                        <div class="col-sm-auto">                  
                            <div class="input-group">
                                <div class="input-group-text"> <i class="fas fa-search"></i></div>
                                 <input type="text" class="form-control" @bind-value="searchText" @bind-value:event="oninput" id="txtsearchbox" placeholder="Search..">
                            </div>
                        </div>                      
                    </div>*@
                     <RadzenCard>
                        <RadzenTree AllowCheckBoxes="true"  @bind-CheckedValues=@CheckedValues Style="width: 100%;" Data=@nodes>
                            <RadzenTreeLevel Expanded="@(treeNode => true)"  TextProperty="Name" ChildrenProperty="ChildNodes" />
                            <RadzenTreeLevel TextProperty="Name" HasChildren=@(treeNode => false) />
                        </RadzenTree>
                    </RadzenCard>

                }

                
                <button type="button" class="btn btn-danger" disabled="@isSubmitting" @onclick="() => SaveRolePermissions()">Save Changes</button>   
            </div>
        </div>
    </div>
</div>

<ModalNotification @ref="ModalNotification">
</ModalNotification>

@code {
    protected ModalNotification ModalNotification { get; set; }

    [Parameter]
    public string roleObjectId { get; set; }

    public Role role = new Role();

    bool isSubmitting;
    IEnumerable<TreeNode> nodes;
    bool isPopupVisible = false;
    private LoginUserInfoViewModel loginUser = null;

    protected override async Task OnInitializedAsync()
    {
        loginUser = _workContext.LoginUserInfo;
        role = await _roleService.GetByObjectId(roleObjectId);

        var modulePermissions = await _moduleService.GetModuleAllPermissions();
        nodes = _moduleService.GetTreeNodes(modulePermissions);

        var selectedPermissons = await _roleService.GetPermissionsByRoleObjectId(roleObjectId);

        if (selectedPermissons != null)
        {
            var checkedNodes = nodes.SelectMany(f => f.ChildNodes).Where(w => selectedPermissons.Any(i => i == w.Id)).ToList();

            //Set parent nodes
            foreach(var node in nodes)
            {
                var coutdd= selectedPermissons.Where(f => node.ChildNodes.Any(k => k.Id == f)).Count();

                if (node.ChildNodes.Count() == coutdd)
                {
                    checkedNodes.Add(node);
                }
            }

            CheckedValues = checkedNodes;

        }

    }

    private  async Task SaveRolePermissions()
    {
        isSubmitting = true;
        var checkItesm = CheckedValues;

        var selectedNodes = CheckedValues.Cast<TreeNode>();
        var permissionObjectIds = selectedNodes.Where(f => f.NodeType == "Permission").Select(i => i.Id).ToList();

        var addResponse = await _roleService.RolePermissionInsertOrUpdateByRoleObjectId(roleObjectId, permissionObjectIds, loginUser.ContactId);

        if (!addResponse.IsSuccess)
        {
            ModalNotification.ShowMessage("Error",addResponse.Message);
            isSubmitting = false;
            return;
        }

        ModalNotification.ShowMessage("Success",addResponse.Message);
        isSubmitting = false;
    }


    void ShowAddEditPopup()
    {
        isPopupVisible = true;
    }

    void CloseAddEditPopup()
    {
        isPopupVisible = false;
    }

    IEnumerable<object> checkedValues;

    IEnumerable<object> CheckedValues
    {
        get => checkedValues;
        set
        {
            checkedValues = value;
        }
    }

    protected void backtoRoles()
    {
        NavigationManager.NavigateTo($"/security/roles", true);
    }
}