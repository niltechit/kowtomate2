@page "/security/roles"

@attribute [Authorize(Roles = "Role.ViewList")]

@using CutOutWiz.Data.Security
@using CutOutWiz.Services.Security
@using KowToMateAdmin.Models.Security
@using KowToMateAdmin.Pages.Shared
@using static CutOutWiz.Core.Utilities.Enums

@inject IWorkContext _workContext
@inject IRoleService _roleService
@inject IPermissionService _permissionService;
@inject NavigationManager NavigationManager

<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <h4 class="mb-sm-0 font-size-18">Roles  
                <span>(@filteredRoles.Count)</span>
            </h4>

            <div class="page-title-right">
                @*<ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="javascript: void(0);">Invoices</a></li>
                    <li class="breadcrumb-item active">Invoice List</li>
                </ol>*@  
                <AuthorizeView Roles="Role.Add"> 
                    <button type="button" class="btn btn-sm btn-secondary" @onclick="AddNew" title="Add New Role"><span class="fas fa-plus"></span> Add New</button>
                </AuthorizeView>  
                                     
            </div>

        </div>
    </div>
</div>
<!-- end page title -->
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                @if (roles is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <div class="row gy-2 gx-3 align-items-center mb-3">                                           
                        <div class="col-sm-auto">                  
                            <div class="input-group">
                                <div class="input-group-text"> <i class="fas fa-search"></i></div>
                                 <input type="text" class="form-control" @bind-value="searchText" @bind-value:event="oninput" id="txtsearchbox" placeholder="Search..">
                            </div>
                        </div>                      
                    </div>

                    <div class="table-responsive">
                        <table class="table mb-0 table-striped table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Name</th>
                                    <th>Status</th>
                                    <th>Created Date</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <Virtualize Items="filteredRoles" Context="role">
                                    <tr @ondblclick="() => Edit(role.ObjectId)">
                                        <td>@role.Name</td>
                                        <td>
                                             @if (role.Status == (int)GeneralStatus.Active)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-warning text-dark">Inactive</span>
                                            }
                                        </td>
                                          <td>@role.CreatedDate.ToShortDateString()</td>
                                        <td>

                                             <AuthorizeView Roles="Role.Edit"> 
                                                <button type="button" class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="(async () => GoToManagePermissions(role.ObjectId))">
                                                    <span class="fas fa-cog"></span>
                                                </button>
                                            </AuthorizeView>  

                                            <AuthorizeView Roles="Role.Edit"> 
                                                <button type="button" class="btn btn-sm btn-outline-primary btn-tbl-action" @onclick="(async () => await Edit(role.ObjectId))">
                                                    <span class="fas fa-pencil-alt"></span>
                                                </button>
                                            </AuthorizeView>  
                                            
                                            <AuthorizeView Roles="Role.Delete">
                                                <button type="button" class="btn btn-sm btn-outline-danger btn-tbl-action" @onclick="() => Delete(role.ObjectId,role.Name)">
                                                    <span class="fas fa-times"></span>
                                                </button>
                                            </AuthorizeView>
                                        </td>
                                    </tr>
                                </Virtualize>
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (isPopupVisible)
{
    @* https://www.puresourcecode.com/dotnet/blazor/modal-dialog-component-for-blazor/*@
    <EditForm Model=@role OnValidSubmit="@InsertUpdateRole" >
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Role</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAddEditPopup"></button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <RoleAddEdit role="role"/>
                            <div class="col">
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Save Changes</button>
                        @if (!string.IsNullOrWhiteSpace(role.ObjectId))
                        {
                            <button type="button" class="btn btn-danger" disabled="@isSubmitting" @onclick="() => Delete(role.ObjectId,role.Name)">Delete</button>
                        }
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isSubmitting" @onclick="CloseAddEditPopup">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

<ModalNotification @ref="ModalNotification" ConfirmationChanged="ConfirmDelete_Click">
</ModalNotification>

@code {
    protected ModalNotification ModalNotification { get; set; }

    bool isSubmitting;
    private List<Role> roles = new List<Role>();

    private Role role = null;
    bool isPopupVisible = false;
    private LoginUserInfoViewModel loginUser = null;
    private string searchText = "";
    private string selectedObjectId = "";
    List<Permission> permissions = null;

    protected override async Task OnInitializedAsync()
    {
        loginUser = _workContext.LoginUserInfo;
        await LoadRoles();
       
    }

    private async Task LoadRoles()
    {
        roles = await _roleService.GetAll(loginUser.CompanyObjectId);
    }

    private async Task InsertUpdateRole()
    {
        isSubmitting = true;

        if (role.Id == 0)
        {
            role.CreatedByContactId = loginUser.ContactId;
            role.ObjectId = Guid.NewGuid().ToString();

            var addResponse = await _roleService.Insert(role);

            if (!addResponse.IsSuccess)
            {               
                ModalNotification.ShowMessage("Error",addResponse.Message);
                isSubmitting = false;
                return;
            }
        }
        else
        {
            role.UpdatedByContactId = loginUser.ContactId;
            var updateResponse = await _roleService.Update(role);

            if (!updateResponse.IsSuccess)
            {                
                ModalNotification.ShowMessage("Error",updateResponse.Message);
                isSubmitting = false;
                return;
            }

        }

        role = new Role();
        isSubmitting = false;

        await LoadRoles();
        CloseAddEditPopup();
    }

    string StatusText()
    {
        if (role.Status == (int)GeneralStatus.Active)
        {
            return "<span class='badge bg-success'>Active</span>";
        }

        return  "<span class='badge bg-info text-dark'>Inactive</span>";
    }

    void AddNew()
    {
        role = new Role { Status = (int)GeneralStatus.Active, CompanyObjectId = loginUser.CompanyObjectId };

        isSubmitting = false;
        ShowAddEditPopup();
    }

    private async Task Edit(string objectId)
    {
        role = await _roleService.GetByObjectId(objectId);
     
        ShowAddEditPopup();
    }

    void ShowAddEditPopup()
    {
        isPopupVisible = true;
    }

    void CloseAddEditPopup()
    {
        isPopupVisible = false;
    }

    protected void Delete(string objectId, string name)
    {
        selectedObjectId = objectId;
        var msg = $"Are you sure you want to delete the role \"{name}\"?";
        ModalNotification.ShowConfirmation("Confirm Delete",msg);
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var deleteResponse = await _roleService.Delete(selectedObjectId);

            if (deleteResponse.IsSuccess)
            {
                await LoadRoles();
                role = new Role();
                CloseAddEditPopup();
            }
            else
            {
                ModalNotification.ShowMessage("Error",deleteResponse.Message);
            }
        }

        isSubmitting = false;
    }

    protected void GoToManagePermissions(string objectId)
    {
        NavigationManager.NavigateTo($"/security/role/assignpermissions/{objectId}", true);
    }

     List<Role> filteredRoles => roles.Where(i => i.Name.ToLower().Contains(searchText.ToLower())).ToList();   
}
