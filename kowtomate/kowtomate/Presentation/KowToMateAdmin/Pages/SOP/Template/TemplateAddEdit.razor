@page "/sop/template/{objectId}"
@page "/sop/template"

@using CutOutWiz.Data.SOP
@using CutOutWiz.Data.Common
@using static CutOutWiz.Core.Utilities.Enums
@using CutOutWiz.Services.SOP
@using CutOutWiz.Services.Common
@using KowToMateAdmin.Models.Security
@using KowToMateAdmin.Pages.Shared

@inject IWorkContext _workContext
@inject ISOPTemplateService _templateService
@inject IFileServerService _fileServerService
@inject NavigationManager UriHelper


<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            @if (template.ObjectId == null)
			{
				<div class="row">
					<h4 class="mb-sm-0 font-size-18">Add SOP Template</h4>
				</div>
			}
			else
			{
				<div class="row">
					<h4 class="mb-sm-0 font-size-18">Edit SOP Template</h4>
				</div>
			}
			<div class="page-title-right">
                <AuthorizeView Roles="SOPTemplate.Add">
                    <a href="/sop/templates" class="btn btn-sm btn-secondary" title="Back To List"><span class="fas fa-arrow-left"></span> Back To List</a> 
                </AuthorizeView>
                 
            </div>
        </div>
    </div>
</div>
<!-- end page title -->

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                
			<EditForm Model=@template OnValidSubmit="@InsertUpdateTemplate">
				<DataAnnotationsValidator />

				<div class="mb-3 mt-3">
					<label for="Name" class="fw-bold">Name</label>
					<InputText class="form-control" @bind-Value="template.Name"></InputText>
					<ValidationMessage For="@(() => template.Name)" />
				</div>

				<div class="mb-3 mt-3">
					<label for="FileServerId" class="fw-bold">File Server</label>
					<InputSelect @bind-Value="template.FileServerId" class="form-select">
						<option value="0">- Select -</option>
						@foreach (var fileServer in fileServers)
						{
							<option value="@fileServer.Id">@fileServer.Name</option>
						}
					</InputSelect>
					<ValidationMessage For="@(() => template.FileServerId)" />
				</div>


				<div class="mb-3 mt-3">
					<label for="Instruction" class="fw-bold">Instruction</label>
					<RadzenHtmlEditor @bind-Value=@template.Instruction style="height: 500px; margin-bottom: 1rem;" />
					<ValidationMessage For="@(() => template.Instruction)" />
				</div>

				<div class="mb-3 mt-3">
					<label for="UnitPrice" class="fw-bold">UnitPrice</label>
					<InputNumber class="form-control" @bind-Value="template.UnitPrice"></InputNumber>
					<ValidationMessage For="@(() => template.UnitPrice)" />
				</div>


				<div class="mb-3 mt-3">
					<label for="Status" class="fw-bold">Status</label>
					<InputSelect @bind-Value="template.Status" class="form-select">
						<option value="0">- Select -</option>
						@foreach (var status in Enum.GetValues(typeof(GeneralStatus)))
						{
							<option value="@((int)status)">@status</option>
						}
					</InputSelect>
					<ValidationMessage For="@(() => template.Status)" />
				</div>

				<div class="mb-3 mt-3">
					<button type="submit" class="btn btn-primary me-2" disabled="@isSubmitting">Save Changes</button>
					@if (!string.IsNullOrWhiteSpace(template.ObjectId))
					{
						<button type="button" class="btn btn-danger me-2" disabled="@isSubmitting" @onclick="() => Delete(template.ObjectId,template.Name)">Delete</button>
					}
				</div>

			</EditForm>
            </div>
        </div>
    </div>
</div>

<ModalNotification @ref="ModalNotification" ConfirmationChanged="ConfirmDelete_Click">
</ModalNotification>

@code {
	protected ModalNotification ModalNotification { get; set; }

	[Parameter]
	public string objectId { get; set; }

	bool isSubmitting;
	private SOPTemplate template = new SOPTemplate();
	private List<FileServer> fileServers = new List<FileServer>();
	private LoginUserInfoViewModel loginUser = null;
	private string selectedObjectId;

	protected override async Task OnInitializedAsync()
	{
		loginUser = _workContext.LoginUserInfo;
		await LoadTemplate();
		fileServers = await _fileServerService.GetAll();
	}

	private async Task LoadTemplate()
	{
		if (string.IsNullOrWhiteSpace(objectId))
		{
			template = new SOPTemplate { CompanyId = loginUser.CompanyId, Status = (int)GeneralStatus.Active };
		}
		else
		{
			template = await _templateService.GetByObjectId(objectId);
		}
	}

	private async Task InsertUpdateTemplate()
	{
		isSubmitting = true;

		if (template.Id == 0)
		{
			template.CreatedByContactId = loginUser.ContactId;
			template.ObjectId = Guid.NewGuid().ToString();

			var addResponse = await _templateService.Insert(template);

			if (!addResponse.IsSuccess)
			{
				ModalNotification.ShowMessage("Error", addResponse.Message);
				isSubmitting = false;
				return;
			}
		}
		else
		{
			template.UpdatedByContactId = loginUser.ContactId;
			var updateResponse = await _templateService.Update(template);

			if (!updateResponse.IsSuccess)
			{
				ModalNotification.ShowMessage("Error", updateResponse.Message);
				isSubmitting = false;
				return;
			}
		}

		template = new SOPTemplate();
		isSubmitting = false;

		UriHelper.NavigateTo("/sop/templates");
	}

	protected void Delete(string objectId, string name)
	{
		selectedObjectId = objectId;
		var msg = $"Are you sure you want to delete the template \"{name}\"?";
		ModalNotification.ShowConfirmation("Confirm Delete", msg);
	}

	protected async Task ConfirmDelete_Click(bool deleteConfirmed)
	{
		if (deleteConfirmed)
		{
			var deleteResponse = await _templateService.Delete(selectedObjectId);

			if (deleteResponse.IsSuccess)
			{
				template = new SOPTemplate();
			}
			else
			{
				ModalNotification.ShowMessage("Error", deleteResponse.Message);
			}
		}

		isSubmitting = false;
		UriHelper.NavigateTo("/sop/templates");
	}

}
